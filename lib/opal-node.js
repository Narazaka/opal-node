// Generated by CoffeeScript 1.10.0
(function() {
  var OpalNode, __path__, extensions, fs, parser, parserFile, source, sourceFile, vm;

  sourceFile = __dirname + "/../opal/opal.js";

  parserFile = __dirname + "/../opal/opal-parser.js";

  extensions = ['.opal', '.rb'];

  fs = require('fs');

  __path__ = require('path');

  source = fs.readFileSync(sourceFile).toString();

  parser = fs.readFileSync(parserFile).toString();

  vm = require('vm');

  vm.runInThisContext(source, sourceFile);

  vm.runInThisContext(parser, parserFile);

  Opal.require("opal-parser");

  OpalNode = (function() {
    function OpalNode() {}

    OpalNode.load_path = [__dirname + '/../opal', __dirname];

    OpalNode.loaded = {};

    OpalNode.backtrace = [];

    OpalNode.node_require = require;

    OpalNode.run = function(ruby, filename) {
      var js;
      js = OpalNode.compile(ruby, {
        file: filename
      });
      return vm.runInThisContext(js, filename);
    };

    OpalNode.compile = function(ruby, options) {
      var compiler, i, key, keys, len, ref, required, value;
      if (options == null) {
        options = void 0;
      }
      if (options && options.klass !== Opal.Hash) {
        keys = (function() {
          var results;
          results = [];
          for (key in options) {
            value = options[key];
            results.push(key);
          }
          return results;
        })();
        options = Opal.hash2(keys, options);
      }
      compiler = Opal.Opal.$$scope.get("Compiler").$new(ruby, options);
      source = compiler.$compile();
      ref = compiler.$requires();
      for (i = 0, len = ref.length; i < len; i++) {
        required = ref[i];
        OpalNode.require(required);
      }
      return Opal.Opal.$compile(ruby, options);
    };

    OpalNode.resolve = function(filename) {
      var error, error1, filepath, full_path, i, len, path, ref;
      try {
        if (filename.match(/^\./)) {
          filepath = __path__.resolve(process.cwd(), filename);
          return require.resolve(filepath);
        } else {
          ref = OpalNode.load_path;
          for (i = 0, len = ref.length; i < len; i++) {
            path = ref[i];
            full_path = __path__.resolve(path, filename);
            if (fs.existsSync(full_path)) {
              return full_path;
            }
            full_path = full_path.replace(/(\.rb)?$/, '.js');
            if (fs.existsSync(full_path)) {
              return full_path;
            }
          }
          return require.resolve(filename);
        }
      } catch (error1) {
        error = error1;
        if (error.code === 'MODULE_NOT_FOUND' || error.message.indexOf("'" + filename + "'") >= 0) {
          return null;
        } else {
          throw error;
        }
      }
    };

    OpalNode.require = function(filename) {
      var file, full_path, loaded, ruby, ruby_filename, stack;
      ruby_filename = filename.replace(/(\.rb)?$/, '.rb');
      full_path = OpalNode.resolve(ruby_filename);
      if (!full_path) {
        if (filename.match(/\.rb$/)) {
          stack = OpalNode.backtrace;
          file = stack[stack.length - 1] || __filename;
          OpalNode.run("raise LoadError, 'cannot load such file -- " + filename + "'", file);
        } else {
          return require(filename);
        }
      }
      loaded = OpalNode.loaded[filename];
      OpalNode.backtrace.push(filename);
      if (loaded) {
        return false;
      }
      ruby = fs.readFileSync("" + full_path).toString();
      OpalNode.loaded[filename] = true;
      if (full_path.match(/\.js$/)) {
        global.require = require;
        vm.runInThisContext(ruby, filename);
      } else {
        OpalNode.run(ruby, filename);
      }
      return OpalNode.backtrace.pop();
    };

    return OpalNode;

  })();

  global.OpalNode = OpalNode;

  OpalNode.require(__dirname + '/opal_node');

  OpalNode.require(__dirname + '/file');

  OpalNode.require(__dirname + '/dir');

}).call(this);
