/* Generated by Opal 0.10.0.dev */
Opal.modules["pathname"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $module = Opal.module;

  Opal.add_stubs(['$==', '$raise', '$attr_reader', '$path', '$start_with?', '$!', '$absolute?', '$sub', '$new', '$expand_path', '$===', '$join', '$to_path', '$unshift', '$pop', '$reverse_each', '$+']);
  (function($base, $super) {
    function $Pathname(){};
    var self = $Pathname = $klass($base, $super, 'Pathname', $Pathname);

    var def = self.$$proto, $scope = self.$$scope;

    def.path = nil;
    Opal.defn(self, '$initialize', function initialize(path) {
      var self = this;

      if (path['$==']("\x00")) {
        self.$raise($scope.get('ArgumentError'))};
      return self.path = path;
    });

    self.$attr_reader("path");

    Opal.defn(self, '$==', function (other) {
      var self = this;

      return other.$path()['$=='](self.path);
    });

    Opal.defn(self, '$absolute?', function () {
      var self = this;

      return self.path['$start_with?']("/");
    });

    Opal.defn(self, '$relative?', function () {
      var self = this;

      return self['$absolute?']()['$!']();
    });

    Opal.defn(self, '$root?', function () {
      var self = this;

      return self.path['$==']("/");
    });

    Opal.defn(self, '$parent', function parent() {
      var $a, self = this, new_path = nil;

      new_path = self.path.$sub(/\/([^\/]+\/?$)/, "");
      if (new_path['$==']("")) {
        new_path = (function() {if ((($a = self['$absolute?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          return "/"
          } else {
          return "."
        }; return nil; })()};
      return $scope.get('Pathname').$new(new_path);
    });

    Opal.defn(self, '$sub', function sub() {
      var $a, self = this, $rest_idx, $rest_len = arguments.length - 0;

      var args = new Array($rest_len > 0 ? $rest_len : 0);
      if ($rest_len > 0) {
        for ($rest_idx = 0; $rest_idx < $rest_len; $rest_idx++) {
          args[$rest_idx] = arguments[$rest_idx + 0];
        }
      }
      return $scope.get('Pathname').$new(($a = self.path).$sub.apply($a, Opal.to_a(args)));
    });

    Opal.defn(self, '$cleanpath', function cleanpath() {
      var self = this;

      return Opal.normalize_loadable_path(self.path);
    });

    Opal.defn(self, '$to_path', function to_path() {
      var self = this;

      return self.path;
    });

    Opal.defn(self, '$hash', function hash() {
      var self = this;

      return self.path;
    });

    Opal.defn(self, '$expand_path', function expand_path() {
      var self = this;

      return $scope.get('File').$expand_path(self.path);
    });

    Opal.defn(self, '$+', function (other) {
      var $a, self = this;

      if ((($a = $scope.get('Pathname')['$==='](other)) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        other = $scope.get('Pathname').$new(other)
      };
      return $scope.get('Pathname').$new($scope.get('File').$join(self.path, other.$to_path()));
    });

    Opal.defn(self, '$join', function join() {try {

      var $a, $b, TMP_1, self = this, $rest_idx, $rest_len = arguments.length - 0, result = nil;

      var args = new Array($rest_len > 0 ? $rest_len : 0);
      if ($rest_len > 0) {
        for ($rest_idx = 0; $rest_idx < $rest_len; $rest_idx++) {
          args[$rest_idx] = arguments[$rest_idx + 0];
        }
      }
      args.$unshift(self);
      result = args.$pop();
      if ((($a = $scope.get('Pathname')['$==='](result)) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        result = $scope.get('Pathname').$new(result)
      };
      if ((($a = result['$absolute?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        return result};
      ($a = ($b = args).$reverse_each, $a.$$p = (TMP_1 = function(arg){var self = TMP_1.$$s || this, $a;
if (arg == null) arg = nil;
      if ((($a = $scope.get('Pathname')['$==='](arg)) !== nil && (!$a.$$is_boolean || $a == true))) {
          } else {
          arg = $scope.get('Pathname').$new(arg)
        };
        result = $rb_plus(arg, result);
        if ((($a = result['$absolute?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          Opal.ret(result)
          } else {
          return nil
        };}, TMP_1.$$s = self, TMP_1), $a).call($b);
      return result;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    });

    Opal.alias(self, 'to_str', 'to_path');

    return Opal.alias(self, 'to_s', 'to_path');
  })($scope.base, null);
  return (function($base) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $scope = self.$$scope;

    Opal.defn(self, '$Pathname', function Pathname(path) {
      var self = this;

      return $scope.get('Pathname').$new(path);
    })
  })($scope.base);
};
