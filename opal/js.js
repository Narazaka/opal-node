/* Generated by Opal 0.10.0.dev */
Opal.modules["js"] = function(Opal) {
  Opal.dynamic_require_severity = "warning";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$insert', '$<<', '$global', '$extend']);
  return (function($base) {
    var $JS, self = $JS = $module($base, 'JS');

    var def = self.$$proto, $scope = self.$$scope, $a, TMP_1, TMP_2, TMP_3;

    Opal.defn(self, '$delete', function (object, property) {
      var self = this;

      return delete object[property];
    });

    Opal.defn(self, '$global', function global() {
      var self = this;

      return Opal.global;
    });

    Opal.defn(self, '$in', function (property, object) {
      var self = this;

      return property in object;
    });

    Opal.defn(self, '$instanceof', function (value, func) {
      var self = this;

      return value instanceof func;
    });

    if ((($a = typeof Function.prototype.bind == 'function') !== nil && (!$a.$$is_boolean || $a == true))) {
      Opal.defn(self, '$new', TMP_1 = function (func) {
        var self = this, $rest_idx, $rest_len = arguments.length - 1, $iter = TMP_1.$$p, block = $iter || nil;

        var args = new Array($rest_len > 0 ? $rest_len : 0);
        if ($rest_len > 0) {
          for ($rest_idx = 0; $rest_idx < $rest_len; $rest_idx++) {
            args[$rest_idx] = arguments[$rest_idx + 1];
          }
        }
        TMP_1.$$p = null;
        args.$insert(0, this);
        if (block !== false && block !== nil) {
          args['$<<'](block)};
        return new (func.bind.apply(func, args))();
      })
      } else {
      Opal.defn(self, '$new', TMP_2 = function (func) {
        var self = this, $rest_idx, $rest_len = arguments.length - 1, $iter = TMP_2.$$p, block = $iter || nil, f = nil;

        var args = new Array($rest_len > 0 ? $rest_len : 0);
        if ($rest_len > 0) {
          for ($rest_idx = 0; $rest_idx < $rest_len; $rest_idx++) {
            args[$rest_idx] = arguments[$rest_idx + 1];
          }
        }
        TMP_2.$$p = null;
        if (block !== false && block !== nil) {
          args['$<<'](block)};
        f = function(){return func.apply(this, args)};
        f["prototype"]=func["prototype"];
        return new f();
      })
    };

    Opal.defn(self, '$typeof', function (value) {
      var self = this;

      return typeof value;
    });

    Opal.defn(self, '$void', function (expr) {
      var self = this;

      return void expr;
    });

    Opal.defn(self, '$call', TMP_3 = function call(func) {
      var self = this, $rest_idx, $rest_len = arguments.length - 1, $iter = TMP_3.$$p, block = $iter || nil, g = nil;

      var args = new Array($rest_len > 0 ? $rest_len : 0);
      if ($rest_len > 0) {
        for ($rest_idx = 0; $rest_idx < $rest_len; $rest_idx++) {
          args[$rest_idx] = arguments[$rest_idx + 1];
        }
      }
      TMP_3.$$p = null;
      g = self.$global();
      if (block !== false && block !== nil) {
        args['$<<'](block)};
      return g[func].apply(g, args);
    });

    Opal.alias(self, 'method_missing', 'call');

    self.$extend(self);
  })($scope.base)
};
