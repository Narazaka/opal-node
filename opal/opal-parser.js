(function(__opal) {
  var self = __opal.top, __scope = __opal, nil = __opal.nil, $mm = __opal.mm, __breaker = __opal.breaker, __slice = __opal.slice, __module = __opal.module, __klass = __opal.klass;
  return (function(__base){
    function Racc() {};
    Racc = __module(__base, "Racc", Racc);
    var def = Racc.prototype, __scope = Racc._scope;

    (function(__base, __super){
      function Parser() {};
      Parser = __klass(__base, __super, "Parser", Parser);

      var def = Parser.prototype, __scope = Parser._scope;
      def.yydebug = nil;

      def.$_racc_setup = function() {
        var _a, _b;
        return ((_a = (((_b = this).$class || $mm('class')).call(_b))._scope.Racc_arg) == null ? __opal.cm("Racc_arg") : _a);
      };

      def.$do_parse = function() {
        var _a, _b;
        return ((_a = this).$_racc_do_parse_rb || $mm('_racc_do_parse_rb')).call(_a, ((_b = this).$_racc_setup || $mm('_racc_setup')).call(_b), false);
      };

      def.$_racc_do_parse_rb = function(arg, in_debug) {
        var action_table = nil, action_check = nil, action_default = nil, action_pointer = nil, goto_table = nil, goto_check = nil, goto_default = nil, goto_pointer = nil, nt_base = nil, reduce_table = nil, token_table = nil, shift_n = nil, reduce_n = nil, use_result = nil, racc_state = nil, racc_tstack = nil, racc_vstack = nil, racc_t = nil, racc_tok = nil, racc_val = nil, racc_read_next = nil, racc_user_yyerror = nil, racc_error_status = nil, token = nil, act = nil, i = nil, nerr = nil, custate = nil, curstate = nil, reduce_i = nil, reduce_len = nil, reduce_to = nil, method_id = nil, tmp_t = nil, tmp_v = nil, reduce_call_result = nil, k1 = nil, _a, _b, _c, _d, _e, _f;
        action_table = ((_a = arg)['$[]'] || $mm('[]')).call(_a, 0);
        action_check = ((_a = arg)['$[]'] || $mm('[]')).call(_a, 1);
        action_default = ((_a = arg)['$[]'] || $mm('[]')).call(_a, 2);
        action_pointer = ((_a = arg)['$[]'] || $mm('[]')).call(_a, 3);
        goto_table = ((_a = arg)['$[]'] || $mm('[]')).call(_a, 4);
        goto_check = ((_a = arg)['$[]'] || $mm('[]')).call(_a, 5);
        goto_default = ((_a = arg)['$[]'] || $mm('[]')).call(_a, 6);
        goto_pointer = ((_a = arg)['$[]'] || $mm('[]')).call(_a, 7);
        nt_base = ((_a = arg)['$[]'] || $mm('[]')).call(_a, 8);
        reduce_table = ((_a = arg)['$[]'] || $mm('[]')).call(_a, 9);
        token_table = ((_a = arg)['$[]'] || $mm('[]')).call(_a, 10);
        shift_n = ((_a = arg)['$[]'] || $mm('[]')).call(_a, 11);
        reduce_n = ((_a = arg)['$[]'] || $mm('[]')).call(_a, 12);
        use_result = ((_a = arg)['$[]'] || $mm('[]')).call(_a, 13);
        racc_state = [0];
        racc_tstack = [];
        racc_vstack = [];
        racc_t = nil;
        racc_tok = nil;
        racc_val = nil;
        racc_read_next = true;
        racc_user_yyerror = false;
        racc_error_status = 0;
        token = nil;
        act = nil;
        i = nil;
        nerr = nil;
        custate = nil;
        while ((_b = true) !== false && _b !== nil){i = ((_b = action_pointer)['$[]'] || $mm('[]')).call(_b, ((_c = racc_state)['$[]'] || $mm('[]')).call(_c, -1));
        if (i !== false && i !== nil) {
          if (racc_read_next !== false && racc_read_next !== nil) {
            if ((_b = (_c = ((_d = racc_t)['$=='] || $mm('==')).call(_d, 0), (_c === nil || _c === false))) !== false && _b !== nil) {
              token = ((_b = this).$next_token || $mm('next_token')).call(_b);
              racc_tok = ((_b = token)['$[]'] || $mm('[]')).call(_b, 0);
              racc_val = ((_b = token)['$[]'] || $mm('[]')).call(_b, 1);
              if (((_b = racc_tok)['$=='] || $mm('==')).call(_b, false)) {
                racc_t = 0
                } else {
                racc_t = ((_b = token_table)['$[]'] || $mm('[]')).call(_b, racc_tok);
                if ((_b = racc_t) === false || _b === nil) {
                  racc_t = 1
                };
              };
              if ((_b = this.yydebug) !== false && _b !== nil) {
                ((_b = this).$racc_read_token || $mm('racc_read_token')).call(_b, racc_t, racc_tok, racc_val)
              };
              racc_read_next = false;
            }
          };
          i = ((_b = i)['$+'] || $mm('+')).call(_b, racc_t);
          if ((_b = ((_c = ((_d = ((_e = i)['$<'] || $mm('<')).call(_e, 0)), _d !== false && _d !== nil ? _d : ((_e = (act = ((_f = action_table)['$[]'] || $mm('[]')).call(_f, i)))['$nil?'] || $mm('nil?')).call(_e))), _c !== false && _c !== nil ? _c : (_d = ((_e = ((_f = action_check)['$[]'] || $mm('[]')).call(_f, i))['$=='] || $mm('==')).call(_e, ((_f = racc_state)['$[]'] || $mm('[]')).call(_f, -1)), (_d === nil || _d === false)))) !== false && _b !== nil) {
            act = ((_b = action_default)['$[]'] || $mm('[]')).call(_b, ((_c = racc_state)['$[]'] || $mm('[]')).call(_c, -1))
          };
          } else {
          act = ((_b = action_default)['$[]'] || $mm('[]')).call(_b, ((_c = racc_state)['$[]'] || $mm('[]')).call(_c, -1))
        };
        if ((_b = this.yydebug) !== false && _b !== nil) {
          ((_b = this).$puts || $mm('puts')).call(_b, "(act: " + (act) + ", shift_n: " + (shift_n) + ", reduce_n: " + (reduce_n) + ")")
        };
        if ((_b = ((_c = ((_d = act)['$>'] || $mm('>')).call(_d, 0)) ? ((_d = act)['$<'] || $mm('<')).call(_d, shift_n) : _c)) !== false && _b !== nil) {
          if (((_b = racc_error_status)['$>'] || $mm('>')).call(_b, 0)) {
            if ((_b = (_c = ((_d = racc_t)['$=='] || $mm('==')).call(_d, 1), (_c === nil || _c === false))) !== false && _b !== nil) {
              racc_error_status = ((_b = racc_error_status)['$-'] || $mm('-')).call(_b, 1)
            }
          };
          ((_b = racc_vstack).$push || $mm('push')).call(_b, racc_val);
          curstate = act;
          ((_b = racc_state)['$<<'] || $mm('<<')).call(_b, act);
          racc_read_next = true;
          if ((_b = this.yydebug) !== false && _b !== nil) {
            ((_b = racc_tstack).$push || $mm('push')).call(_b, racc_t);
            ((_b = this).$racc_shift || $mm('racc_shift')).call(_b, racc_t, racc_tstack, racc_vstack);
          };
          } else {
          if ((_b = ((_c = ((_d = act)['$<'] || $mm('<')).call(_d, 0)) ? ((_d = act)['$>'] || $mm('>')).call(_d, ((_e = reduce_n)['$-@'] || $mm('-@')).call(_e)) : _c)) !== false && _b !== nil) {
            reduce_i = (_b = act, _c = -3, typeof(_b) === 'number' ? _b * _c : _b['$*'](_c));
            reduce_len = ((_b = reduce_table)['$[]'] || $mm('[]')).call(_b, reduce_i);
            reduce_to = ((_b = reduce_table)['$[]'] || $mm('[]')).call(_b, (_c = reduce_i, _d = 1, typeof(_c) === 'number' ? _c + _d : _c['$+'](_d)));
            method_id = ((_b = reduce_table)['$[]'] || $mm('[]')).call(_b, (_c = reduce_i, _d = 2, typeof(_c) === 'number' ? _c + _d : _c['$+'](_d)));
            tmp_t = ((_b = racc_tstack).$last || $mm('last')).call(_b, reduce_len);
            tmp_v = ((_b = racc_vstack).$last || $mm('last')).call(_b, reduce_len);
            ((_b = racc_state).$pop || $mm('pop')).call(_b, reduce_len);
            ((_b = racc_vstack).$pop || $mm('pop')).call(_b, reduce_len);
            ((_b = racc_tstack).$pop || $mm('pop')).call(_b, reduce_len);
            if (use_result !== false && use_result !== nil) {
              reduce_call_result = ((_b = this).$__send__ || $mm('__send__')).call(_b, method_id, tmp_v, nil, ((_c = tmp_v)['$[]'] || $mm('[]')).call(_c, 0));
              ((_b = racc_vstack).$push || $mm('push')).call(_b, reduce_call_result);
              } else {
              ((_b = this).$raise || $mm('raise')).call(_b, "not using result??")
            };
            ((_b = racc_tstack).$push || $mm('push')).call(_b, reduce_to);
            if ((_b = this.yydebug) !== false && _b !== nil) {
              ((_b = this).$racc_reduce || $mm('racc_reduce')).call(_b, tmp_t, reduce_to, racc_tstack, racc_vstack)
            };
            k1 = (_b = reduce_to, _c = nt_base, typeof(_b) === 'number' ? _b - _c : _b['$-'](_c));
            if ((_b = (_c = ((_d = (reduce_i = ((_e = goto_pointer)['$[]'] || $mm('[]')).call(_e, k1)))['$=='] || $mm('==')).call(_d, nil), (_c === nil || _c === false))) !== false && _b !== nil) {
              reduce_i = ((_b = reduce_i)['$+'] || $mm('+')).call(_b, ((_c = racc_state)['$[]'] || $mm('[]')).call(_c, -1));
              if ((_b = (_c = ((_c = ((_d = reduce_i)['$>='] || $mm('>=')).call(_d, 0)) ? (_d = ((_e = (curstate = ((_f = goto_table)['$[]'] || $mm('[]')).call(_f, reduce_i)))['$=='] || $mm('==')).call(_e, nil), (_d === nil || _d === false)) : _c), _c !== false && _c !== nil ? ((_c = ((_d = goto_check)['$[]'] || $mm('[]')).call(_d, reduce_i))['$=='] || $mm('==')).call(_c, k1) : _c)) !== false && _b !== nil) {
                ((_b = racc_state).$push || $mm('push')).call(_b, curstate)
                } else {
                ((_b = racc_state).$push || $mm('push')).call(_b, ((_c = goto_default)['$[]'] || $mm('[]')).call(_c, k1))
              };
              } else {
              ((_b = racc_state).$push || $mm('push')).call(_b, ((_c = goto_default)['$[]'] || $mm('[]')).call(_c, k1))
            };
            } else {
            if (((_b = act)['$=='] || $mm('==')).call(_b, shift_n)) {
              return ((_b = racc_vstack)['$[]'] || $mm('[]')).call(_b, 0)
              } else {
              if (((_b = act)['$=='] || $mm('==')).call(_b, ((_c = reduce_n)['$-@'] || $mm('-@')).call(_c))) {
                ((_b = this).$raise || $mm('raise')).call(_b, "Opal Syntax Error: unexpected '" + (((_c = racc_tok).$inspect || $mm('inspect')).call(_c)) + "'")
                } else {
                ((_b = this).$raise || $mm('raise')).call(_b, "Rac: unknown action: " + (act))
              }
            }
          }
        };
        if ((_b = this.yydebug) !== false && _b !== nil) {
          ((_b = this).$racc_next_state || $mm('racc_next_state')).call(_b, ((_c = racc_state)['$[]'] || $mm('[]')).call(_c, -1), racc_state)
        };};
      };

      def.$racc_read_token = function(t, tok, val) {
        var _a, _b;
        ((_a = this).$puts || $mm('puts')).call(_a, "read    " + (tok) + "(" + (((_b = this).$racc_token2str || $mm('racc_token2str')).call(_b, t)) + ") " + (((_b = val).$inspect || $mm('inspect')).call(_b)));
        return ((_a = this).$puts || $mm('puts')).call(_a, "\n");
      };

      def.$racc_shift = function(tok, tstack, vstack) {
        var _a, _b;
        ((_a = this).$puts || $mm('puts')).call(_a, "shift  " + (((_b = this).$racc_token2str || $mm('racc_token2str')).call(_b, tok)));
        ((_a = this).$racc_print_stacks || $mm('racc_print_stacks')).call(_a, tstack, vstack);
        return ((_a = this).$puts || $mm('puts')).call(_a, "\n");
      };

      def.$racc_reduce = function(toks, sim, tstack, vstack) {
        var _a, _b, _c, TMP_1;
        ((_a = this).$puts || $mm('puts')).call(_a, "reduce " + ((function() { if ((_b = ((_c = toks)['$empty?'] || $mm('empty?')).call(_c)) !== false && _b !== nil) {
          return "<none>"
          } else {
          return ((_b = toks).$map || $mm('map')).call(_b, (TMP_1 = function(t) {

            var self = TMP_1._s || this, _a;
            if (t == null) t = nil;

            return ((_a = self).$racc_token2str || $mm('racc_token2str')).call(_a, t)
          }, TMP_1._s = this, TMP_1))
        }; return nil; }).call(this)));
        ((_a = this).$puts || $mm('puts')).call(_a, "  --> " + (((_b = this).$racc_token2str || $mm('racc_token2str')).call(_b, sim)));
        return ((_a = this).$racc_print_stacks || $mm('racc_print_stacks')).call(_a, tstack, vstack);
      };

      def.$racc_next_state = function(curstate, state) {
        var _a;
        ((_a = this).$puts || $mm('puts')).call(_a, "goto  " + (curstate));
        ((_a = this).$racc_print_states || $mm('racc_print_states')).call(_a, state);
        return ((_a = this).$puts || $mm('puts')).call(_a, "\n");
      };

      def.$racc_token2str = function(tok) {
        var _a, _b, _c;
        return ((_a = ((_b = (((_c = this).$class || $mm('class')).call(_c))._scope.Racc_token_to_s_table) == null ? __opal.cm("Racc_token_to_s_table") : _b))['$[]'] || $mm('[]')).call(_a, tok);
      };

      def.$racc_print_stacks = function(t, v) {
        var _a, TMP_2;
        ((_a = this).$puts || $mm('puts')).call(_a, "  [");
        ((_a = t).$each_index || $mm('each_index')).call(_a, (TMP_2 = function(i) {

          var self = TMP_2._s || this, _a, _b, _c;
          if (i == null) i = nil;

          return ((_a = self).$puts || $mm('puts')).call(_a, "    (" + (((_b = self).$racc_token2str || $mm('racc_token2str')).call(_b, ((_c = t)['$[]'] || $mm('[]')).call(_c, i))) + " " + (((_b = ((_c = v)['$[]'] || $mm('[]')).call(_c, i)).$inspect || $mm('inspect')).call(_b)) + ")")
        }, TMP_2._s = this, TMP_2));
        return ((_a = this).$puts || $mm('puts')).call(_a, "  ]");
      };

      def.$racc_print_states = function(s) {
        var _a, TMP_3;
        ((_a = this).$puts || $mm('puts')).call(_a, "  [");
        ((_a = s).$each || $mm('each')).call(_a, (TMP_3 = function(st) {

          var self = TMP_3._s || this, _a;
          if (st == null) st = nil;

          return ((_a = self).$puts || $mm('puts')).call(_a, "   " + (st))
        }, TMP_3._s = this, TMP_3));
        return ((_a = this).$puts || $mm('puts')).call(_a, "  ]");
      };

      return nil;
    })(Racc, null)
    
  })(self)
})(Opal);
(function(__opal) {
  var self = __opal.top, __scope = __opal, nil = __opal.nil, $mm = __opal.mm, __breaker = __opal.breaker, __slice = __opal.slice, __klass = __opal.klass;
  return (function(__base, __super){
    function StringScanner() {};
    StringScanner = __klass(__base, __super, "StringScanner", StringScanner);

    var def = StringScanner.prototype, __scope = StringScanner._scope;
    def.pos = def.matched = def.working = nil;

    def.$pos = function() {
      
      return this.pos
    }, nil;

    def.$matched = function() {
      
      return this.matched
    }, nil;

    def.$initialize = function(string) {
      
      this.string = string;
      this.pos = 0;
      this.matched = "";
      return this.working = string;
    };

    def.$scan = function(regex) {
      
      
      var regex  = new RegExp('^' + regex.toString().substring(1, regex.toString().length - 1)),
          result = regex.exec(this.working);

      if (result == null) {
        this.matched = '';

        return nil;
      }
      else if (typeof(result) === 'object') {
        this.pos      += result[0].length;
        this.working  = this.working.substring(result[0].length);
        this.matched  = result[0];

        return result[0];
      }
      else if (typeof(result) === 'string') {
        this.pos     += result.length;
        this.working  = this.working.substring(result.length);

        return result;
      }
      else {
        return nil;
      }
    
    };

    def.$check = function(regex) {
      
      
      var regexp = new RegExp('^' + regex.toString().substring(1, regex.toString().length - 1)),
          result = regexp.exec(this.working);

      if (result == null) {
        return this.matched = nil;
      }

      return this.matched = result[0];
    
    };

    def.$peek = function(length) {
      
      return this.working.substring(0, length);
    };

    def['$eos?'] = function() {
      
      return this.working.length === 0;
    };

    return nil;
  })(self, null)
})(Opal);

// We need (some) of the libs from our real ruby parser (not in sprockets load path)
  (function(__opal) {
  var self = __opal.top, __scope = __opal, nil = __opal.nil, $mm = __opal.mm, __breaker = __opal.breaker, __slice = __opal.slice, __module = __opal.module, __klass = __opal.klass, __hash = __opal.hash;
  return (function(__base){
    function Opal() {};
    Opal = __module(__base, "Opal", Opal);
    var def = Opal.prototype, __scope = Opal._scope, _a, _b;

    (function(__base, __super){
      function Grammar() {};
      Grammar = __klass(__base, __super, "Grammar", Grammar);

      var clist = nil, racc_action_table = nil, arr = nil, idx = nil, racc_action_check = nil, racc_action_pointer = nil, racc_action_default = nil, racc_goto_table = nil, racc_goto_check = nil, racc_goto_pointer = nil, racc_goto_default = nil, racc_reduce_table = nil, racc_reduce_n = nil, racc_shift_n = nil, racc_token_table = nil, racc_nt_base = nil, racc_use_result_var = nil, def = Grammar.prototype, __scope = Grammar._scope, _a, _b, TMP_1, TMP_3, TMP_5, TMP_7;
      def.line = def.scope_line = def.string_parse = def.file = def.scope = def.line_number = nil;

      clist = ["63,64,65,7,51,525,197,198,57,58,197,198,372,61,561,59,60,62,23,24,66", "67,196,-470,262,590,22,28,27,89,88,90,91,262,669,17,197,198,197,198", "701,6,41,8,9,93,92,83,50,85,84,86,87,94,95,489,81,82,589,38,39,37,-303", "-77,-74,654,657,590,-417,-303,-85,73,100,-415,525,-417,560,99,525,74", "-415,36,-82,532,30,-470,525,52,-80,723,525,-59,32,294,262,257,40,100", "-80,-424,589,-74,99,-84,18,-81,-470,261,-74,79,73,75,76,77,78,100,261", "524,74,80,99,-303,63,64,65,294,51,56,-67,654,57,58,-415,53,54,61,668", "59,60,62,248,249,66,67,741,726,654,-78,247,278,282,89,88,90,91,100,257", "197,198,702,99,100,549,653,41,554,99,93,92,83,50,85,84,86,87,94,95,261", "81,82,-472,38,39,37,100,257,524,800,100,99,524,778,-82,99,-82,419,100", "-82,524,217,100,99,524,202,590,99,206,-82,-80,52,-80,661,549,-80,595", "-81,244,-81,40,726,-81,532,551,550,549,100,209,653,590,257,99,79,73", "75,76,77,78,589,-415,-79,74,80,100,-85,653,-415,-418,99,251,56,63,64", "65,-418,51,53,54,-422,57,58,531,589,532,61,-422,59,60,62,248,249,66", "67,551,550,562,374,247,278,282,89,88,90,91,217,551,550,100,217,-472", "-73,567,99,41,685,813,93,92,83,50,85,84,86,87,94,95,549,81,82,649,38", "39,37,217,221,226,227,228,223,225,233,234,229,230,415,210,211,-73,100", "231,232,416,202,99,-73,206,549,726,52,521,323,322,326,325,214,731,220", "40,216,215,212,213,224,222,218,209,219,287,288,732,79,73,75,76,77,78", "551,550,552,74,80,733,235,63,64,65,549,51,56,518,-423,57,58,417,53,54", "61,-423,59,60,62,23,24,66,67,518,551,550,556,22,28,27,89,88,90,91,844", "-251,17,-259,-424,-72,100,845,-251,41,-259,99,93,92,83,50,85,84,86,87", "94,95,501,81,82,500,38,39,37,-257,551,550,547,-423,519,501,-257,194", "503,-419,-423,-473,-72,254,195,-70,-419,-423,202,-72,255,206,-78,613", "52,501,520,-421,503,843,-251,244,-259,40,-421,483,-251,-258,-258,509", "510,18,484,-251,-258,-258,79,73,75,76,77,78,572,741,726,74,80,100,-257", "63,64,65,99,51,56,738,193,57,58,-423,53,54,61,719,59,60,62,248,249,66", "67,501,197,198,500,247,278,282,89,88,90,91,726,-74,482,-251,-258,-258", "745,567,-82,41,813,746,93,92,83,50,85,84,86,87,94,95,519,81,82,518,38", "39,37,217,221,226,227,228,223,225,233,234,229,230,-412,210,211,492,515", "231,232,-412,202,513,493,206,487,488,52,323,322,326,325,246,214,217", "220,40,216,215,212,213,224,222,218,209,219,326,325,-257,79,73,75,76", "77,78,-257,718,533,74,80,-473,235,713,-212,665,506,251,56,63,64,65,663", "51,53,54,417,57,58,712,504,217,61,455,59,60,62,248,249,66,67,761,763", "518,766,247,278,282,89,88,90,91,665,455,691,-420,544,768,-257,737,571", "41,-420,545,93,92,83,50,85,84,86,87,94,95,664,81,82,453,38,39,37,217", "221,226,227,228,223,225,233,234,229,230,-257,210,211,-71,257,231,232", "-257,202,-72,-79,206,-473,381,52,489,-80,383,382,664,214,217,220,40", "216,215,212,213,224,222,218,209,219,-239,491,490,79,73,75,76,77,78,704", "555,257,74,80,294,235,63,64,65,217,51,56,266,-76,57,58,-257,53,54,61", "-84,59,60,62,248,249,66,67,485,479,638,478,247,278,282,89,88,90,91,-258", "214,779,780,781,216,215,-258,257,41,645,257,93,92,83,50,85,84,86,87", "94,95,217,81,82,236,38,39,37,217,221,226,227,228,223,225,233,234,229", "230,-259,210,211,477,784,231,232,-259,202,785,-58,206,787,462,52,323", "322,326,325,-258,214,-237,220,40,216,215,212,213,224,222,218,209,219", "791,634,607,79,73,75,76,77,78,608,455,795,74,80,797,235,63,64,65,7,51", "56,453,450,57,58,-259,53,54,61,421,59,60,62,23,24,66,67,420,633,-472", "803,22,28,27,89,88,90,91,294,418,17,102,103,104,105,106,6,41,8,9,93", "92,83,50,85,84,86,87,94,95,217,81,82,570,38,39,37,217,221,226,227,228", "223,225,233,234,229,230,607,210,211,807,808,231,232,608,36,294,632,30", "495,214,52,619,817,216,215,32,214,-240,220,40,216,215,212,213,224,222", "218,18,219,384,687,818,79,73,75,76,77,78,645,820,722,74,80,294,235,63", "64,65,363,51,56,360,518,57,58,-473,53,54,61,559,59,60,62,248,249,66", "67,830,831,339,-67,247,278,282,89,88,90,91,102,103,104,105,106,323,322", "326,325,41,834,618,93,92,83,50,85,84,86,87,94,95,836,81,82,837,38,39", "37,217,221,226,227,228,223,225,233,234,229,230,518,210,211,617,766,231", "232,236,202,294,462,206,770,771,52,772,94,95,286,609,214,846,220,40", "216,215,212,213,224,222,218,209,219,285,-238,462,79,73,75,76,77,78,236", "852,294,74,80,565,235,63,64,65,217,51,56,632,604,57,58,192,53,54,61", "191,59,60,62,23,24,66,67,190,189,862,518,22,28,27,89,88,90,91,864,214", "17,865,188,216,215,212,213,41,566,-237,93,92,83,50,85,84,86,87,94,95", "96,81,82,569,38,39,37,217,221,226,227,228,223,225,233,234,229,230,518", "210,211,,,231,232,,202,,,206,,,52,,,,,,214,,220,40,216,215,212,213,224", "222,218,18,219,,,,79,73,75,76,77,78,,,,74,80,,235,63,64,65,217,51,56", ",,57,58,,53,54,61,,59,60,62,248,249,66,67,,,,,247,278,282,89,88,90,91", ",214,,,,216,215,212,213,41,,,93,92,83,50,85,84,86,87,94,95,,81,82,,38", "39,37,217,221,226,227,228,223,225,233,234,229,230,,210,211,,,231,232", ",202,,,206,,,52,,,,,595,214,,220,40,216,215,212,213,224,222,218,209", "219,,,,79,73,75,76,77,78,,,,74,80,,235,63,64,65,,51,56,,,57,58,,53,54", "61,,59,60,62,248,249,66,67,,,,,247,278,282,89,88,90,91,,,,,,,,,,41,", ",93,92,83,50,85,84,86,87,94,95,,81,82,,38,39,37,217,221,226,227,228", "223,225,233,234,229,230,,210,211,,,231,232,,202,,,206,,,52,,,,,,214", ",220,40,216,215,212,213,224,222,218,209,219,,,,79,73,75,76,77,78,,,", "74,80,,235,,-212,,,251,56,63,64,65,,51,53,54,,57,58,,,,61,,59,60,62", "248,249,66,67,,,,,247,278,282,89,88,90,91,,,,,,,,,,41,,,93,92,83,50", "85,84,86,87,94,95,,81,82,,38,39,37,217,221,226,227,228,223,225,233,234", "229,230,,210,211,,,231,232,,202,,,206,,,52,,,,,246,214,,220,40,216,215", "212,213,224,222,218,209,219,,,,79,73,75,76,77,78,,,,74,80,,235,587,", ",,251,56,63,64,65,7,51,53,54,,57,58,,,,61,,59,60,62,23,24,66,67,,,,", "22,28,27,89,88,90,91,,,17,,,,,,6,41,8,9,93,92,83,50,85,84,86,87,94,95", ",81,82,,38,39,37,217,221,226,227,228,223,225,233,234,229,230,,210,211", ",,231,232,,36,,,30,,,52,,,,,32,214,,220,40,216,215,212,213,224,222,218", "18,219,,,,79,73,75,76,77,78,,,,74,80,,235,63,64,65,,51,56,,,57,58,,53", "54,61,,59,60,62,23,24,66,67,,,,,22,28,27,89,88,90,91,,,17,,,,,,,41,", ",93,92,83,50,85,84,86,87,94,95,,81,82,,38,39,37,217,221,226,227,228", "223,225,233,234,229,230,,210,211,,,231,232,,202,,,206,,,52,,,,,,214", ",220,40,216,215,212,213,224,222,218,18,219,,,,79,73,75,76,77,78,,,,74", "80,,235,63,64,65,,51,56,,,57,58,,53,54,61,,59,60,62,23,24,66,67,,,,", "22,28,27,89,88,90,91,,,,,,,,,,41,,,93,92,83,50,85,84,86,87,94,95,,81", "82,,38,39,37,217,221,226,227,228,223,225,233,234,229,230,,210,211,,", "231,232,,202,,,206,,,52,,,,,,214,,220,40,216,215,212,213,224,222,218", "209,219,,,,79,73,75,76,77,78,,,,74,80,,235,63,64,65,7,51,56,,,57,58", ",53,54,61,,59,60,62,23,24,66,67,,,,,22,28,27,89,88,90,91,,,17,,,,,,6", "41,8,9,93,92,83,50,85,84,86,87,94,95,,81,82,,38,39,37,217,221,226,227", "228,223,225,233,234,229,230,,210,211,,,231,232,,36,,,30,,,52,,,,,32", "214,,220,40,216,215,212,213,224,222,218,18,219,,,,79,73,75,76,77,78", ",,,74,80,,235,63,64,65,7,51,56,,,57,58,,53,54,61,,59,60,62,23,24,66", "67,,,,,22,28,27,89,88,90,91,,,17,,,,,,6,41,8,9,93,92,83,50,85,84,86", "87,94,95,,81,82,,38,39,37,217,221,226,227,228,223,225,233,234,229,230", ",210,211,,,231,232,,36,,,30,,,52,,,,,32,214,,220,40,216,215,212,213", "224,222,218,18,219,,,,79,73,75,76,77,78,,,,74,80,,235,63,64,65,,51,56", ",,57,58,,53,54,61,,59,60,62,248,249,66,67,,,,,247,28,27,89,88,90,91", ",,,,,,,,,41,,,93,92,83,50,85,84,86,87,94,95,,81,82,,38,39,37,217,221", "226,227,228,223,225,233,234,229,230,,210,211,,,231,232,,202,,,206,,", "52,,,,,246,214,244,220,40,216,215,212,213,224,222,218,209,219,,,,79", "73,75,76,77,78,,,,74,80,316,235,320,318,317,319,251,56,63,64,65,,51", "53,54,,57,58,,,,61,,59,60,62,248,249,66,67,,,,,247,28,27,89,88,90,91", ",,,,323,322,326,325,,41,,,93,92,83,50,85,84,86,87,94,95,,81,82,,38,39", "37,217,221,226,227,228,223,225,233,234,229,230,,210,211,,,231,232,,202", ",,206,,,52,,,,,246,214,244,220,40,216,215,212,213,224,222,218,209,219", ",,,79,73,75,76,77,78,,,,74,80,679,235,320,318,317,319,251,56,63,64,65", ",51,53,54,,57,58,,,,61,,59,60,62,248,249,66,67,,,,,247,28,27,89,88,90", "91,,,,,323,322,326,325,,41,,,93,92,83,50,85,84,86,87,94,95,,81,82,,38", "39,37,,,,,,,,,,,,,,316,,320,318,317,319,202,,,206,,,52,,,,,246,,244", ",40,,,,,,,,209,,,,,79,73,75,76,77,78,,,,74,80,323,322,326,325,,,251", "56,63,64,65,7,51,53,54,,57,58,,,,61,,59,60,62,23,24,66,67,,,,,22,28", "27,89,88,90,91,,,17,,,,,,6,41,8,9,93,92,83,50,85,84,86,87,94,95,,81", "82,,38,39,37,217,-494,-494,-494,-494,223,225,,,-494,-494,,,,,,231,232", ",36,,,30,,,52,,,,,32,214,,220,40,216,215,212,213,224,222,218,18,219", ",,,79,73,75,76,77,78,,,,74,80,,,63,64,65,,51,56,,,57,58,,53,54,61,,59", "60,62,248,249,66,67,,,,,247,278,282,89,88,90,91,,,,,,,,,,279,,,93,92", "83,50,85,84,86,87,94,95,,81,82,,,,283,,,,,,,,,,,,,,679,,320,318,317", "319,647,,,206,,,52,,,-350,316,,320,318,317,319,-350,-350,-350,,,-350", "-350,-350,,-350,,,79,73,75,76,77,78,-350,-350,-350,74,80,323,322,326", "325,,-350,-350,56,-350,-350,-350,-350,-350,53,54,,323,322,326,325,,", ",,,,,706,,,,,,,-350,-350,-350,-350,-350,-350,-350,-350,-350,-350,-350", "-350,-350,-350,,,-350,-350,-350,,,-350,,257,-350,,,,,-350,,-350,,-350", ",-350,-350,-350,-350,-350,-350,-350,,-350,-350,-350,,316,,320,318,317", "319,,,,,,-350,-350,-350,-350,,-350,-265,,,,,,-350,-265,-265,-265,,,-265", "-265,-265,679,-265,320,318,317,319,308,,,,,-265,-265,323,322,326,325", ",,,-265,-265,,-265,-265,-265,-265,-265,,316,,320,318,317,319,,,,673", ",,,,,,323,322,326,325,-265,-265,-265,-265,-265,-265,-265,-265,-265,-265", "-265,-265,-265,-265,,,-265,-265,-265,512,,-265,,266,-265,323,322,326", "325,-265,,-265,,-265,,-265,-265,-265,-265,-265,-265,-265,,-265,,-265", ",,,,,,,,,,,,-265,-265,-265,-265,,-265,63,64,65,7,51,,-265,,57,58,,,", "61,,59,60,62,23,24,66,67,,,,,22,28,27,89,88,90,91,,,17,,,,,,6,41,8,9", "93,92,83,50,85,84,86,87,94,95,,81,82,,38,39,37,217,221,226,227,228,223", "225,233,,229,230,,,,,,231,232,,36,,,268,,,52,,,,,32,214,,220,40,216", "215,212,213,224,222,218,18,219,,,,79,73,75,76,77,78,,,,74,80,,,63,64", "65,,51,56,,,57,58,,53,54,61,,59,60,62,248,249,66,67,,,,,247,278,282", "89,88,90,91,,,,,,,,,,279,,,93,92,83,50,85,84,86,87,94,95,,81,82,217", ",679,283,320,318,317,319,,,,,,,,,231,232,,,,,,276,,,273,,,52,,214,,220", "272,216,215,212,213,,673,218,,219,,,,323,322,326,325,79,73,75,76,77", "78,,,,74,80,,,63,64,65,,51,56,,,57,58,,53,54,61,,59,60,62,248,249,66", "67,,,,,247,278,282,89,88,90,91,,,,,,,,,,279,,,93,92,83,50,85,84,86,87", "94,95,,81,82,,,,283,217,221,226,227,228,223,225,,,229,230,,,,,,231,232", ",276,,,206,,,52,,,,,,214,,220,,216,215,212,213,224,222,218,,219,,,,79", "73,75,76,77,78,,,,74,80,,,63,64,65,7,51,56,,,57,58,,53,54,61,,59,60", "62,23,24,66,67,,,,,22,28,27,89,88,90,91,,,17,,,,,,6,41,8,9,93,92,83", "50,85,84,86,87,94,95,,81,82,,38,39,37,217,-494,-494,-494,-494,223,225", ",,-494,-494,,,,,,231,232,,36,,,30,,,52,,,,,32,214,,220,40,216,215,212", "213,224,222,218,18,219,,,,79,73,75,76,77,78,,,,74,80,,,63,64,65,7,51", "56,,,57,58,,53,54,61,,59,60,62,23,24,66,67,,,,,22,28,27,89,88,90,91", ",,17,,,,,,6,41,8,9,93,92,83,50,85,84,86,87,94,95,,81,82,,38,39,37,217", "-494,-494,-494,-494,223,225,,,-494,-494,,,,,,231,232,,36,,,30,,,52,", ",,,32,214,,220,40,216,215,212,213,224,222,218,18,219,,,,79,73,75,76", "77,78,,,,74,80,,,63,64,65,7,51,56,,,57,58,,53,54,61,,59,60,62,23,24", "66,67,,,,,22,28,27,89,88,90,91,,,17,,,,,,6,41,8,9,93,92,83,50,85,84", "86,87,94,95,,81,82,,38,39,37,217,-494,-494,-494,-494,223,225,,,-494", "-494,,,,,,231,232,,36,,,30,,,52,,,,,32,214,,220,40,216,215,212,213,224", "222,218,18,219,,,,79,73,75,76,77,78,,,,74,80,,,63,64,65,7,51,56,,,57", "58,,53,54,61,,59,60,62,23,24,66,67,,,,,22,28,27,89,88,90,91,,,17,,,", ",,6,41,8,9,93,92,83,50,85,84,86,87,94,95,,81,82,,38,39,37,217,-494,-494", "-494,-494,223,225,,,-494,-494,,,,,,231,232,,36,,,30,,,52,,,,,32,214", ",220,40,216,215,212,213,224,222,218,18,219,,,,79,73,75,76,77,78,,,,74", "80,,,63,64,65,,51,56,,,57,58,,53,54,61,,59,60,62,248,249,66,67,,,,,247", "278,282,89,88,90,91,,,,,,,,,,41,,,93,92,83,50,85,84,86,87,94,95,,81", "82,,38,39,37,217,-494,-494,-494,-494,223,225,,,-494,-494,,,,,,231,232", ",202,,,206,,,52,,,,,,214,,220,40,216,215,212,213,224,222,218,209,219", ",,,79,73,75,76,77,78,,,,74,80,,,63,64,65,,51,56,,,57,58,,53,54,61,,59", "60,62,248,249,66,67,,,,,247,278,282,89,88,90,91,,,,,,,,,,41,,,93,92", "83,50,85,84,86,87,94,95,,81,82,,38,39,37,217,,,,,,,,,,,,,,,,231,232", ",202,,,206,,,52,,,,,,214,,220,40,216,215,212,213,,,218,209,219,,,,79", "73,75,76,77,78,,,,74,80,,,63,64,65,,51,56,,,57,58,,53,54,61,,59,60,62", "248,249,66,67,,,,,247,278,282,89,88,90,91,,,,,,,,,,41,,,93,92,83,50", "85,84,86,87,94,95,,81,82,,38,39,37,217,221,226,227,228,223,225,233,234", "229,230,,-494,-494,,,231,232,,202,,,206,,,52,,,,,,214,,220,40,216,215", "212,213,224,222,218,209,219,,,,79,73,75,76,77,78,,,,74,80,,,63,64,65", ",51,56,,,57,58,,53,54,61,,59,60,62,248,249,66,67,,,,,247,278,282,89", "88,90,91,,,,,,,,,,41,,,93,92,83,50,85,84,86,87,94,95,,81,82,,38,39,37", "217,221,226,227,228,223,225,233,234,229,230,,-494,-494,,,231,232,,202", ",,206,,,52,,,,,595,214,244,220,40,216,215,212,213,224,222,218,209,219", ",,,79,73,75,76,77,78,,,,74,80,,,63,64,65,,51,56,,,57,58,,53,54,61,,59", "60,62,248,249,66,67,,,,,247,278,282,89,88,90,91,,,,,,,,,,41,,,93,92", "83,50,85,84,86,87,94,95,,81,82,,38,39,37,217,,,,,,,,,,,,,,,,231,232", ",202,,,206,,,52,,,,,,214,,220,40,216,215,212,213,,,218,209,219,,,,79", "73,75,76,77,78,,-252,,74,80,,,,-252,-252,-252,,56,-252,-252,-252,217", "-252,53,54,,,,,,-252,,-252,-252,,,,231,232,,,-252,-252,,-252,-252,-252", "-252,-252,,,,214,,220,,216,215,212,213,,,218,,219,,,,,,-252,-252,-252", "-252,-252,-252,-252,-252,-252,-252,-252,-252,-252,-252,,,-252,-252,-252", ",,-252,,,-252,,,-252,,-252,,-252,,-252,,-252,-252,-252,-252,-252,-252", "-252,,-252,,-252,,,,,,,,,,,,,-252,-252,-252,-252,,-252,,,-252,-252,", ",-252,63,64,65,,51,,,,57,58,,,,61,,59,60,62,23,24,66,67,,,,,22,28,27", "89,88,90,91,,,17,,,,,,,41,,,93,92,83,50,85,84,86,87,94,95,217,81,82", ",38,39,37,,217,,,,,,,,231,232,,,,,,,231,232,202,,,206,,214,52,220,,216", "215,212,213,214,,40,,216,215,212,213,,,18,,,,,79,73,75,76,77,78,,,,74", "80,,,63,64,65,,51,56,,,57,58,,53,54,61,,59,60,62,248,249,66,67,,,,,247", "278,282,89,88,90,91,,,,,,,,,,41,,,93,92,83,50,85,84,86,87,94,95,,81", "82,,38,39,37,217,,,,,,,,,,,,,,,,231,232,,202,,,206,,,52,,,,,246,214", ",220,40,216,215,212,213,,,,209,,,,,79,73,75,76,77,78,,,,74,80,,,,,,", "251,56,63,64,65,,51,53,54,,57,58,,,,61,,59,60,62,248,249,66,67,,,,,247", "278,282,89,88,90,91,,,,,,,,,,41,,,93,92,83,50,85,84,86,87,94,95,,81", "82,,38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52,,,,,246,,,,40,,,,,,,", "209,,,,,79,73,75,76,77,78,,,,74,80,,,,,,,251,56,63,64,65,,51,53,54,", "57,58,,,,61,,59,60,62,248,249,66,67,,,,,247,278,282,89,88,90,91,,,,", ",,,,,41,,,93,92,83,50,85,84,86,87,94,95,,81,82,,38,39,37,,,,,,,,,,,", ",,,,,,,,202,,,206,,,52,,,,,,,,,40,,,,,,,,209,,,,,79,73,75,76,77,78,", ",,74,80,,,63,64,65,7,51,56,,,57,58,,53,54,61,,59,60,62,23,24,66,67,", ",,,22,28,27,89,88,90,91,,,17,,,,,,6,41,8,9,93,92,83,50,85,84,86,87,94", "95,,81,82,,38,39,37,,,,,,,,,,,,,,,,,,,,36,,,30,,,52,,,,,32,,,,40,,,", ",,,,18,,,,,79,73,75,76,77,78,,,,74,80,,,63,64,65,,51,56,,,57,58,,53", "54,61,,59,60,62,23,24,66,67,,,,,22,28,27,89,88,90,91,,,17,,,,,,,41,", ",93,92,83,50,85,84,86,87,94,95,,81,82,,38,39,37,,,,,,,,,,,,,,,,,,,,202", ",,206,,,52,,,,,,,,,40,,,,,,,,18,,,,,79,73,75,76,77,78,,,,74,80,,,63", "64,65,,51,56,,,57,58,,53,54,61,,59,60,62,23,24,66,67,,,,,22,28,27,89", "88,90,91,,,17,,,,,,,41,,,93,92,83,50,85,84,86,87,94,95,,81,82,,38,39", "37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52,,,,,,,,,40,,,,,,,,18,,,,,79,73", "75,76,77,78,,,,74,80,,,63,64,65,,51,56,,,57,58,,53,54,61,,59,60,62,23", "24,66,67,,,,,22,28,27,89,88,90,91,,,17,,,,,,,41,,,93,92,83,50,85,84", "86,87,94,95,,81,82,,38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52,,,,,", ",,,40,,,,,,,,18,,,,,79,73,75,76,77,78,,,,74,80,100,,,,,99,,56,63,64", "65,7,51,53,54,,57,58,,,,61,,59,60,62,23,24,66,67,,,,,22,28,27,89,88", "90,91,,,17,,,,,,6,41,8,9,93,92,83,50,85,84,86,87,94,95,,81,82,,38,39", "37,,,,,,,,,,,,,,,,,,,,36,,,30,,,52,,,,,32,,,,40,,,,,,,,18,,,,,79,73", "75,76,77,78,,,,74,80,,,63,64,65,,51,56,,,57,58,,53,54,61,,59,60,62,248", "249,66,67,,,,,247,278,282,89,88,90,91,,,,,,,,,,41,,,93,92,83,50,85,84", "86,87,94,95,,81,82,,38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52,,,,,595", ",,,40,,,,,,,,209,,,,,79,73,75,76,77,78,,,,74,80,,,63,64,65,,51,56,,", "57,58,,53,54,61,,59,60,62,248,249,66,67,,,,,247,278,282,89,88,90,91", ",,,,,,,,,41,,,93,92,83,50,85,84,86,87,94,95,,81,82,,38,39,37,,,,,,,", ",,,,,,,,,,,,202,,,206,,,52,,,,,,,,,40,,,,,,,,209,,,,,79,73,75,76,77", "78,,,,74,80,,,63,64,65,,51,56,,,57,58,,53,54,61,,59,60,62,23,24,66,67", ",,,,22,28,27,89,88,90,91,,,17,,,,,,,41,,,93,92,83,50,85,84,86,87,94", "95,,81,82,,38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52,,,,,,,,,40,,,", ",,,,18,,,,,79,73,75,76,77,78,,,,74,80,,,63,64,65,,51,56,,,57,58,,53", "54,61,,59,60,62,248,249,66,67,,,,,247,278,282,89,88,90,91,,,,,,,,,,279", ",,93,92,83,50,85,84,86,87,94,95,,81,82,,,,283,,,,,,,,,,,,,,,,,,,,825", ",,206,,,52,,,,,,,,,,,,,,,,,,,,,,79,73,75,76,77,78,,,,74,80,,,63,64,65", ",51,56,,,57,58,,53,54,61,,59,60,62,248,249,66,67,,,,,247,278,282,89", "88,90,91,,,,,,,,,,41,,,93,92,83,50,85,84,86,87,94,95,,81,82,,38,39,37", ",,,,,,,,,,,,,,,,,,,202,,,206,,,52,,,,,246,,,,40,,,,,,,,209,,,,,79,73", "75,76,77,78,,,,74,80,,,,,,,251,56,-475,-475,-475,,-475,53,54,,-475,-475", ",,,-475,,-475,-475,-475,-475,-475,-475,-475,,,,,-475,-475,-475,-475", "-475,-475,-475,,,,,,,,,,-475,,,-475,-475,-475,-475,-475,-475,-475,-475", "-475,-475,,-475,-475,,-475,-475,-475,,,,,,,,,,,,,,,,,,,,-475,,,-475", "-475,,-475,,,,,-475,,-475,,-475,,,,,,,,-475,,,,,-475,-475,-475,-475", "-475,-475,,,,-475,-475,,,,,,,-475,-475,-469,-469,-469,,-469,-475,-475", ",-469,-469,,,,-469,,-469,-469,-469,-469,-469,-469,-469,,-469,,,-469", "-469,-469,-469,-469,-469,-469,,,,,,,,,,-469,,,-469,-469,-469,-469,-469", "-469,-469,-469,-469,-469,,-469,-469,,-469,-469,-469,,,,,,,,,,,,,,,,", ",,,-469,,,-469,-469,,-469,,,,,-469,,-469,,-469,,,,,,,,-469,,-469,,,-469", "-469,-469,-469,-469,-469,,,,-469,-469,,,,,,,-469,-469,-470,-470,-470", ",-470,-469,-469,,-470,-470,,,,-470,,-470,-470,-470,-470,-470,-470,-470", ",-470,,,-470,-470,-470,-470,-470,-470,-470,,,,,,,,,,-470,,,-470,-470", "-470,-470,-470,-470,-470,-470,-470,-470,,-470,-470,,-470,-470,-470,", ",,,,,,,,,,,,,,,,,,-470,,,-470,-470,,-470,,,,,-470,,-470,,-470,,,,,,", ",-470,,-470,,,-470,-470,-470,-470,-470,-470,,,,-470,-470,,,,,,,-470", "-470,63,64,65,7,51,-470,-470,,57,58,,,,61,,59,60,62,23,24,66,67,,,,", "22,28,27,89,88,90,91,,,17,,,,,,6,41,8,9,93,92,83,50,85,84,86,87,94,95", ",81,82,,38,39,37,,,,,,,,,,,,,,,,,,,,36,,,30,,,52,,,,,32,,,,40,,,,,,", ",18,,,,,79,73,75,76,77,78,,,,74,80,,,63,64,65,7,51,56,,,57,58,,53,54", "61,,59,60,62,23,24,66,67,,,,,22,28,27,89,88,90,91,,,17,,,,,,6,41,8,9", "93,92,83,50,85,84,86,87,94,95,,81,82,,38,39,37,,,,,,,,,,,,,,,,,,,,36", ",,30,,,52,,,,,32,,,,40,,,,,,,,18,,,,,79,73,75,76,77,78,,,,74,80,,,63", "64,65,374,51,56,,,57,58,,53,54,61,,59,60,62,23,24,66,67,,,,,22,28,27", "89,88,90,91,,,17,,,,,,,41,,,93,92,83,50,85,84,86,87,94,95,,81,82,,38", "39,37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52,,,,,,,,,40,,,,,,,,18,,,,,79", "73,75,76,77,78,,,,74,80,,,63,64,65,,51,56,,,57,58,,53,54,61,,59,60,62", "23,24,66,67,,,,,22,28,27,89,88,90,91,,,17,,,,,,,41,,,93,92,83,50,85", "84,86,87,94,95,,81,82,,38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52,,", ",,,,,,40,,,,,,,,18,,,,,79,73,75,76,77,78,,,,74,80,,,63,64,65,,51,56", ",,57,58,,53,54,61,,59,60,62,23,24,66,67,,,,,22,28,27,89,88,90,91,,,17", ",,,,,,41,,,93,92,83,50,85,84,86,87,94,95,,81,82,,38,39,37,,,,,,,,,,", ",,,,,,,,,202,,,206,,,52,,,,,,,,,40,,,,,,,,18,,,,,79,73,75,76,77,78,", ",,74,80,,,63,64,65,,51,56,,,57,58,,53,54,61,,59,60,62,23,24,66,67,,", ",,22,28,27,89,88,90,91,,,17,,,,,,,41,,,93,92,83,50,85,84,86,87,94,95", ",81,82,,38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52,,,,,,,,,40,,,,,,", ",18,,,,,79,73,75,76,77,78,,,,74,80,,,63,64,65,7,51,56,,,57,58,,53,54", "61,,59,60,62,23,24,66,67,,,,,22,28,27,89,88,90,91,,,17,,,,,,6,41,8,9", "93,92,83,50,85,84,86,87,94,95,,81,82,,38,39,37,,,,,,,,,,,,,,,,,,,,36", ",,30,,,52,,,,,32,,,,40,,,,,,,,18,,,,,79,73,75,76,77,78,,,,74,80,,,63", "64,65,,51,56,,,57,58,,53,54,61,,59,60,62,248,249,66,67,,,,,247,278,282", "89,88,90,91,,,,,,,,,,41,,,93,92,83,50,85,84,86,87,94,95,,81,82,,38,39", "37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52,,,,,,,,,40,,,,,,,,209,,,,,79,73", "75,76,77,78,,,,74,80,,,-474,-474,-474,,-474,56,,,-474,-474,,53,54,-474", ",-474,-474,-474,-474,-474,-474,-474,,,,,-474,-474,-474,-474,-474,-474", "-474,,,,,,,,,,-474,,,-474,-474,-474,-474,-474,-474,-474,-474,-474,-474", ",-474,-474,,-474,-474,-474,,,,,,,,,,,,,,,,,,,,-474,,,-474,-474,,-474", ",,,,-474,,-474,,-474,,,,,,,,-474,,,,-257,-474,-474,-474,-474,-474,-474", "-257,-257,-257,-474,-474,,-257,-257,,-257,,-474,-474,,,,,,-474,-474", ",,,,,,,,-257,-257,,-257,-257,-257,-257,-257,,,,,,,,,,,,,,,,,,,,,,-257", "-257,-257,-257,-257,-257,-257,-257,-257,-257,-257,-257,-257,-257,,,-257", "-257,-257,,580,,,,-257,,,,,,,-257,,-257,,-257,-257,-257,-257,-257,-257", "-257,,-257,,-257,,,,,,,,,,,,,-257,-257,,-75,,-257,,,,,-83,,-257,63,64", "65,7,51,,,,57,58,,,,61,,59,60,62,23,24,66,67,,,,,22,28,27,89,88,90,91", ",,17,,,,,,6,41,8,9,93,92,83,50,85,84,86,87,94,95,,81,82,,38,39,37,,", ",,,,,,,,,,,,,,,,,36,,,30,,,52,,,,,32,,,,40,,,,,,,,18,,,,,79,73,75,76", "77,78,,,,74,80,,,63,64,65,7,51,56,,,57,58,,53,54,61,,59,60,62,23,24", "66,67,,,,,22,28,27,89,88,90,91,,,17,,,,,,6,41,8,9,93,92,83,50,85,84", "86,87,94,95,,81,82,,38,39,37,,,,,,,,,,,,,,,,,,,,36,,,30,,,52,,,,,32", ",,,40,,,,,,,,18,,,,,79,73,75,76,77,78,,,,74,80,,,63,64,65,,51,56,,,57", "58,,53,54,61,,59,60,62,23,24,66,67,,,,,22,28,27,89,88,90,91,,,,,,,,", ",41,,,93,92,83,50,85,84,86,87,94,95,,81,82,,38,39,37,,,,,,,,,,,,,,,", ",,,,202,,,206,,,52,,,,,391,,,,40,,,,,,,,209,,,,,79,73,75,76,77,78,,", ",74,80,,,63,64,65,,51,56,,,57,58,,53,54,61,,59,60,62,23,24,66,67,,,", ",22,28,27,89,88,90,91,,,,,,,,,,41,,,93,92,83,50,85,84,86,87,94,95,,81", "82,,38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52,,,,,391,,,,40,,,,,,,", "209,,,,,79,73,75,76,77,78,,,,74,80,,,63,64,65,,51,56,,,57,58,,53,54", "61,,59,60,62,23,24,66,67,,,,,22,28,27,89,88,90,91,,,,,,,,,,41,,,93,92", "83,50,85,84,86,87,94,95,,81,82,,38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206", ",,52,,,,,,,,,40,,,,,,,,209,,,,,79,73,75,76,77,78,,,,74,80,,,63,64,65", ",51,56,,,57,58,,53,54,61,,59,60,62,248,249,66,67,,,,,247,278,282,89", "88,90,91,,,,,,,,,,41,,,93,92,83,50,85,84,86,87,94,95,,81,82,,38,39,37", ",,,,,,,,,,,,,,,,,,,202,,,206,,,52,,,,,246,,,,40,,,,,,,,209,,,,,79,73", "75,76,77,78,-476,,,74,80,,,-476,-476,-476,,251,56,-476,-476,,-476,,53", "54,,,,,,-476,,,,,,,,,,-476,-476,,-476,-476,-476,-476,-476,,,,,,,,,,", ",,,,,,,,,,,-476,-476,-476,-476,-476,-476,-476,-476,-476,-476,-476,-476", "-476,-476,,,-476,-476,-476,,577,,,,-476,,,,,,,-476,,-476,,-476,-476", "-476,-476,-476,-476,-476,,-476,-476,-476,,,,,,,,,,,,,-476,-476,,-73", ",-476,-492,,,,-81,,-476,-492,-492,-492,,,-492,-492,-492,,-492,,,,,,", ",,-492,-492,-492,,,,,,,,-492,-492,,-492,-492,-492,-492,-492,,,,,,,,", ",,,,,,,,,,,,,-492,-492,-492,-492,-492,-492,-492,-492,-492,-492,-492", "-492,-492,-492,,,-492,-492,-492,,,-492,,257,-492,,,,,-492,,-492,,-492", ",-492,-492,-492,-492,-492,-492,-492,,-492,-492,-492,,,,,,,,,,,,,-492", "-492,-492,-492,,-492,63,64,65,,51,,-492,,57,58,,,,61,,59,60,62,23,24", "66,67,,,,,22,28,27,89,88,90,91,,,,,,,,,,41,,,93,92,83,50,85,84,86,87", "94,95,,81,82,,38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52,,,,,,,,,40", ",,,,,,,209,,,,,79,73,75,76,77,78,,,,74,80,,,63,64,65,,51,56,,,57,58", ",53,54,61,,59,60,62,23,24,66,67,,,,,22,28,27,89,88,90,91,,,17,,,,,,", "41,,,93,92,83,50,85,84,86,87,94,95,,81,82,,38,39,37,,,,,,,,,,,,,,,,", ",,,202,,,206,,,52,,,,,,,,,40,,,,,,,,18,,,,,79,73,75,76,77,78,,,,74,80", ",,63,64,65,,51,56,,,57,58,,53,54,61,,59,60,62,23,24,66,67,,,,,22,28", "27,89,88,90,91,,,17,,,,,,,41,,,93,92,83,50,85,84,86,87,94,95,,81,82", ",38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52,,,,,,,,,40,,,,,,,,18,,,", ",79,73,75,76,77,78,,,,74,80,,,63,64,65,,51,56,,,57,58,,53,54,61,,59", "60,62,23,24,66,67,,,,,22,28,27,89,88,90,91,,,17,,,,,,,41,,,93,92,83", "50,85,84,86,87,94,95,,81,82,,38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206,", ",52,,,,,,,,,40,,,,,,,,18,,,,,79,73,75,76,77,78,,,,74,80,,,63,64,65,", "51,56,,,57,58,,53,54,61,,59,60,62,248,249,66,67,,,,,247,278,282,89,88", "90,91,,,,,,,,,,41,,,93,92,83,50,85,84,86,87,94,95,,81,82,,38,39,37,", ",,,,,,,,,,,,,,,,,,202,,,206,,,52,,,,,,,,,40,,,,,,,,209,,,,,79,73,75", "76,77,78,,,,74,80,,,63,64,65,7,51,56,,,57,58,,53,54,61,,59,60,62,23", "24,66,67,,,,,22,28,27,89,88,90,91,,,17,,,,,,6,41,8,9,93,92,83,50,85", "84,86,87,94,95,,81,82,,38,39,37,,,,,,,,,,,,,,,,,,,,36,,,30,,,52,,,,", "32,,,,40,,,,,,,,18,,,,,79,73,75,76,77,78,,,,74,80,,,63,64,65,,51,56", ",,57,58,,53,54,61,,59,60,62,248,249,66,67,,,,,247,278,282,89,88,90,91", ",,,,,,,,,41,,,93,92,83,50,85,84,86,87,94,95,,81,82,,38,39,37,,,,,,,", ",,,,,,,,,,,,202,,,206,,,52,,,,,,,,,40,,,,,,,,209,,,,,79,73,75,76,77", "78,,,,74,80,,,63,64,65,,51,56,,,57,58,,53,54,61,,59,60,62,248,249,66", "67,,,,,247,278,282,89,88,90,91,,,,,,,,,,41,,,93,92,83,50,85,84,86,87", "94,95,,81,82,,38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52,,,,,690,,,", "40,,,,,,,,209,,,,,79,73,75,76,77,78,,,,74,80,,,63,64,65,,51,56,,,57", "58,,53,54,61,,59,60,62,248,249,66,67,,,,,247,278,282,89,88,90,91,,,", ",,,,,,41,,,93,92,83,50,85,84,86,87,94,95,,81,82,,38,39,37,,,,,,,,,,", ",,,,,,,,,202,,,206,,,52,,,,,,,,,40,,,,,,,,209,,,,,79,73,75,76,77,78", ",,,74,80,,,63,64,65,7,51,56,,,57,58,,53,54,61,,59,60,62,23,24,66,67", ",,,,22,28,27,89,88,90,91,,,17,,,,,,6,41,8,9,93,92,83,50,85,84,86,87", "94,95,,81,82,,38,39,37,,,,,,,,,,,,,,,,,,,,36,,,30,,,52,,,,,32,,,,40", ",,,,,,,18,,,,,79,73,75,76,77,78,,,,74,80,,,63,64,65,,51,56,,,57,58,", "53,54,61,,59,60,62,248,249,66,67,,,,,247,278,282,89,88,90,91,,,,,,,", ",,41,,,93,92,83,50,85,84,86,87,94,95,,81,82,,38,39,37,,,,,,,,,,,,,,", ",,,,,202,,,206,,,52,,,,,,,,,40,,,,,,,,209,,,,,79,73,75,76,77,78,,,,74", "80,,,63,64,65,,51,56,,,57,58,,53,54,61,,59,60,62,248,249,66,67,,,,,247", "278,282,89,88,90,91,,,,,,,,,,41,,,93,92,83,50,85,84,86,87,94,95,,81", "82,,38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52,,,,,,,,,40,,,,,,,,209", ",,,,79,73,75,76,77,78,,,,74,80,,,63,64,65,,51,56,,,57,58,,53,54,61,", "59,60,62,248,249,66,67,,,,,247,278,282,89,88,90,91,,,,,,,,,,41,,,93", "92,83,50,85,84,86,87,94,95,,81,82,,38,39,37,,,,,,,,,,,,,,,,,,,,202,", ",206,,,52,,,,,,,,,40,,,,,,,,209,,,,,79,73,75,76,77,78,,,,74,80,,,63", "64,65,,51,56,,,57,58,,53,54,61,,59,60,62,248,249,66,67,,,,,247,278,282", "89,88,90,91,,,,,,,,,,41,,,93,92,83,50,85,84,86,87,94,95,,81,82,,38,39", "37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52,,,,,,,,,40,,,,,,,,209,,,,,79,73", "75,76,77,78,,,,74,80,,,63,64,65,,51,56,,,57,58,,53,54,61,,59,60,62,248", "249,66,67,,,,,247,278,282,89,88,90,91,,,,,,,,,,41,,,93,92,83,50,85,84", "86,87,94,95,,81,82,,38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52,,,,,", ",,,40,,,,,,,,209,,,,,79,73,75,76,77,78,,,,74,80,,,63,64,65,,51,56,,", "57,58,,53,54,61,,59,60,62,248,249,66,67,,,,,247,278,282,89,88,90,91", ",,,,,,,,,41,,,93,92,83,50,85,84,86,87,94,95,,81,82,,38,39,37,,,,,,,", ",,,,,,,,,,,,202,,,206,,,52,,,,,,,,,40,,,,,,,,209,,,,,79,73,75,76,77", "78,,,,74,80,,,63,64,65,,51,56,,,57,58,,53,54,61,,59,60,62,248,249,66", "67,,,,,247,278,282,89,88,90,91,,,,,,,,,,41,,,93,92,83,50,85,84,86,87", "94,95,,81,82,,38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52,,,,,,,,,40", ",,,,,,,209,,,,,79,73,75,76,77,78,,,,74,80,,,63,64,65,,51,56,,,57,58", ",53,54,61,,59,60,62,248,249,66,67,,,,,247,278,282,89,88,90,91,,,,,,", ",,,41,,,93,92,83,50,85,84,86,87,94,95,,81,82,,38,39,37,,,,,,,,,,,,,", ",,,,,,202,,,206,,,52,,,,,,,,,40,,,,,,,,209,,,,,79,73,75,76,77,78,,,", "74,80,,,63,64,65,,51,56,,,57,58,,53,54,61,,59,60,62,248,249,66,67,,", ",,247,278,282,89,88,90,91,,,,,,,,,,41,,,93,92,83,50,85,84,86,87,94,95", ",81,82,,38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52,,,,,,,,,40,,,,,,", ",209,,,,,79,73,75,76,77,78,,,,74,80,,,63,64,65,,51,56,,,57,58,,53,54", "61,,59,60,62,248,249,66,67,,,,,247,278,282,89,88,90,91,,,,,,,,,,41,", ",93,92,83,50,85,84,86,87,94,95,,81,82,,38,39,37,,,,,,,,,,,,,,,,,,,,202", ",,206,,,52,,,,,,,,,40,,,,,,,,209,,,,,79,73,75,76,77,78,,,,74,80,,,63", "64,65,,51,56,,,57,58,,53,54,61,,59,60,62,248,249,66,67,,,,,247,278,282", "89,88,90,91,,,,,,,,,,41,,,93,92,83,50,85,84,86,87,94,95,,81,82,,38,39", "37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52,,,,,,,,,40,,,,,,,,209,,,,,79,73", "75,76,77,78,,,,74,80,,,63,64,65,,51,56,,,57,58,,53,54,61,,59,60,62,248", "249,66,67,,,,,247,278,282,89,88,90,91,,,,,,,,,,41,,,93,92,83,50,85,84", "86,87,94,95,,81,82,,38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52,,,,,", ",,,40,,,,,,,,209,,,,,79,73,75,76,77,78,,,,74,80,,,63,64,65,,51,56,,", "57,58,,53,54,61,,59,60,62,248,249,66,67,,,,,247,278,282,89,88,90,91", ",,,,,,,,,41,,,93,92,83,50,85,84,86,87,94,95,,81,82,,38,39,37,,,,,,,", ",,,,,,,,,,,,202,,,206,,,52,,,,,,,,,40,,,,,,,,209,,,,,79,73,75,76,77", "78,,,,74,80,,,63,64,65,,51,56,,,57,58,,53,54,61,,59,60,62,248,249,66", "67,,,,,247,278,282,89,88,90,91,,,,,,,,,,41,,,93,92,83,50,85,84,86,87", "94,95,,81,82,,38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52,,,,,,,,,40", ",,,,,,,209,,,,,79,73,75,76,77,78,,,,74,80,,,63,64,65,,51,56,,,57,58", ",53,54,61,,59,60,62,248,249,66,67,,,,,247,278,282,89,88,90,91,,,,,,", ",,,41,,,93,92,83,50,85,84,86,87,94,95,,81,82,,38,39,37,,,,,,,,,,,,,", ",,,,,,202,,,206,,,52,,,,,,,,,40,,,,,,,,209,,,,,79,73,75,76,77,78,,,", "74,80,,,63,64,65,,51,56,,,57,58,,53,54,61,,59,60,62,248,249,66,67,,", ",,247,278,282,89,88,90,91,,,,,,,,,,41,,,93,92,83,50,85,84,86,87,94,95", ",81,82,,38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52,,,,,,,,,40,,,,,,", ",209,,,,,79,73,75,76,77,78,,,,74,80,,,63,64,65,,51,56,,,57,58,,53,54", "61,,59,60,62,248,249,66,67,,,,,247,278,282,89,88,90,91,,,,,,,,,,41,", ",93,92,83,50,85,84,86,87,94,95,,81,82,,38,39,37,,,,,,,,,,,,,,,,,,,,202", ",,206,,,52,,,,,,,,,40,,,,,,,,209,,,,,79,73,75,76,77,78,,,,74,80,,,63", "64,65,,51,56,,,57,58,,53,54,61,,59,60,62,248,249,66,67,,,,,247,278,282", "89,88,90,91,,,,,,,,,,41,,,93,92,83,50,85,84,86,87,94,95,,81,82,,38,39", "37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52,,,,,,,,,40,,,,,,,,209,,,,,79,73", "75,76,77,78,,,,74,80,,,63,64,65,,51,56,,,57,58,,53,54,61,,59,60,62,248", "249,66,67,,,,,247,278,282,89,88,90,91,,,,,,,,,,41,,,93,92,83,50,85,84", "86,87,94,95,,81,82,,38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52,,,,,", ",,,40,,,,,,,,209,,,,,79,73,75,76,77,78,,,,74,80,,,63,64,65,,51,56,,", "57,58,,53,54,61,,59,60,62,248,249,66,67,,,,,247,278,282,89,88,90,91", ",,,,,,,,,41,,,93,92,83,50,85,84,86,87,94,95,,81,82,,38,39,37,,,,,,,", ",,,,,,,,,,,,202,,,206,,,52,,,,,,,,,40,,,,,,,,209,,,,,79,73,75,76,77", "78,,,,74,80,,,63,64,65,,51,56,,,57,58,,53,54,61,,59,60,62,248,249,66", "67,,,,,247,278,282,89,88,90,91,,,,,,,,,,41,,,93,92,83,50,85,84,86,87", "94,95,,81,82,,38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52,,,,,,,,,40", ",,,,,,,209,,,,,79,73,75,76,77,78,,,,74,80,,,63,64,65,,51,56,,,57,58", ",53,54,61,,59,60,62,248,249,66,67,,,,,247,278,282,89,88,90,91,,,,,,", ",,,41,,,93,92,83,50,85,84,86,87,94,95,,81,82,,38,39,37,,,,,,,,,,,,,", ",,,,,,202,,,206,,,52,,,,,,,,,40,,,,,,,,209,,,,,79,73,75,76,77,78,,,", "74,80,,,63,64,65,,51,56,,,57,58,,53,54,61,,59,60,62,248,249,66,67,,", ",,247,278,282,89,88,90,91,,,,,,,,,,41,,,93,92,83,50,85,84,86,87,94,95", ",81,82,,38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52,,,,,,,,,40,,,,,,", ",209,,,,,79,73,75,76,77,78,,,,74,80,,,63,64,65,,51,56,,,57,58,,53,54", "61,,59,60,62,248,249,66,67,,,,,247,278,282,89,88,90,91,,,,,,,,,,41,", ",93,92,83,50,85,84,86,87,94,95,,81,82,,38,39,37,,,,,,,,,,,,,,,,,,,,202", ",,206,,,52,,,,,,,,,40,,,,,,,,209,,,,,79,73,75,76,77,78,,,,74,80,,,63", "64,65,,51,56,,,57,58,,53,54,61,,59,60,62,248,249,66,67,,,,,247,278,282", "89,88,90,91,,,,,,,,,,41,,,93,92,83,50,85,84,86,87,94,95,,81,82,,38,39", "37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52,,,,,,,,,40,,,,,,,,209,,,,,79,73", "75,76,77,78,,,,74,80,,,63,64,65,,51,56,,,57,58,,53,54,61,,59,60,62,248", "249,66,67,,,,,247,278,282,89,88,90,91,,,,,,,,,,41,,,93,92,83,50,85,84", "86,87,94,95,,81,82,,38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52,,,,,", ",,,40,,,,,,,,209,,,,,79,73,75,76,77,78,,,,74,80,,,63,64,65,,51,56,,", "57,58,,53,54,61,,59,60,62,248,249,66,67,,,,,247,278,282,89,88,90,91", ",,,,,,,,,41,,,93,92,83,50,85,84,86,87,94,95,,81,82,,38,39,37,,,,,,,", ",,,,,,,,,,,,202,,,206,,,52,,,,,,,,,40,,,,,,,,209,,,,,79,73,75,76,77", "78,,,,74,80,,,63,64,65,,51,56,,,57,58,,53,54,61,,59,60,62,23,24,66,67", ",,,,22,28,27,89,88,90,91,,,,,,,,,,41,,,93,92,83,50,85,84,86,87,94,95", ",81,82,,38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52,,,,,,,,,40,,,,,,", ",209,,,,,79,73,75,76,77,78,,,,74,80,,,63,64,65,7,51,56,,,57,58,,53,54", "61,,59,60,62,23,24,66,67,,,,,22,28,27,89,88,90,91,,,17,,,,,,6,41,8,9", "93,92,83,50,85,84,86,87,94,95,,81,82,,38,39,37,,,,,,,,,,,,,,,,,,,,36", ",,30,,,52,,,,,32,,,,40,,,,,,,,18,,,,,79,73,75,76,77,78,,,,74,80,,,63", "64,65,7,51,56,,,57,58,,53,54,61,,59,60,62,23,24,66,67,,,,,22,28,27,89", "88,90,91,,,17,,,,,,6,41,8,9,93,92,83,50,85,84,86,87,94,95,,81,82,,38", "39,37,,,,,,,,,,,,,,,,,,,,36,,,30,,,52,,,,,32,,,,40,,,,,,,,18,,,,,79", "73,75,76,77,78,,,,74,80,,,63,64,65,,51,56,,,57,58,,53,54,61,,59,60,62", "248,249,66,67,,,,,247,278,282,89,88,90,91,,,,,,,,,,41,,,93,92,83,50", "85,84,86,87,94,95,,81,82,,38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52", ",,,,,,,,40,,,,,,,,209,,,,,79,73,75,76,77,78,,,,74,80,,,63,64,65,,51", "56,,,57,58,,53,54,61,,59,60,62,23,24,66,67,,,,,22,28,27,89,88,90,91", ",,,,,,,,,41,,,93,92,83,50,85,84,86,87,94,95,,81,82,,38,39,37,,,,,,,", ",,,,,,,,,,,,202,,,206,,,52,,,,,,,,,40,,,,,,,,209,,,,,79,73,75,76,77", "78,,,,74,80,,,63,64,65,,51,56,,,57,58,,53,54,61,,59,60,62,248,249,66", "67,,,,,247,278,282,89,88,90,91,,,,,,,,,,41,,,93,92,83,50,85,84,86,87", "94,95,,81,82,,38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52,,,,,,,,,40", ",,,,,,,209,,,,,79,73,75,76,77,78,,,,74,80,,,63,64,65,,51,56,,,57,58", ",53,54,61,,59,60,62,248,249,66,67,,,,,247,278,282,89,88,90,91,,,,,,", ",,,41,,,93,92,83,50,85,84,86,87,94,95,,81,82,,38,39,37,,,,,,,,,,,,,", ",,,,,,202,,,206,,,52,,,,,,,,,40,,,,,,,,209,,,,,79,73,75,76,77,78,,,", "74,80,,,63,64,65,,51,56,,,57,58,,53,54,61,,59,60,62,23,24,66,67,,,,", "22,28,27,89,88,90,91,,,,,,,,,,41,,,93,92,83,50,85,84,86,87,94,95,,81", "82,,38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52,,,,,,,,,40,,,,,,,,209", ",,,,79,73,75,76,77,78,,,,74,80,,,63,64,65,,51,56,,,57,58,,53,54,61,", "59,60,62,248,249,66,67,,,,,247,278,282,89,88,90,91,,,,,,,,,,41,,,93", "92,83,50,85,84,86,87,94,95,,81,82,,38,39,37,,,,,,,,,,,,,,,,,,,,202,", ",206,,,52,,,,,,,,,40,,,,,,,,209,,,,,79,73,75,76,77,78,,,,74,80,,,63", "64,65,7,51,56,,,57,58,,53,54,61,,59,60,62,23,24,66,67,,,,,22,28,27,89", "88,90,91,,,17,,,,,,6,41,8,9,93,92,83,50,85,84,86,87,94,95,,81,82,,38", "39,37,,,,,,,,,,,,,,,,,,,,36,,,30,,,52,,,,,32,,,,40,,,,,,,,18,,,,,79", "73,75,76,77,78,,,,74,80,,,63,64,65,,51,56,,,57,58,,53,54,61,,59,60,62", "248,249,66,67,,,,,247,28,27,89,88,90,91,,,,,,,,,,41,,,93,92,83,50,85", "84,86,87,94,95,,81,82,,38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52,,", ",,246,,244,,40,,,,,,,,209,,,,,79,73,75,76,77,78,,,,74,80,,,,,,,251,56", "63,64,65,,51,53,54,,57,58,,,,61,,59,60,62,248,249,66,67,,,,,247,28,27", "89,88,90,91,,,,,,,,,,41,,,93,92,83,50,85,84,86,87,94,95,,81,82,,38,39", "37,,,,,,,,,,,,,,,,,,,,202,,,206,,,471,,,,,246,,244,,40,,,,,,,,209,,", ",,79,73,75,76,77,78,,,,74,80,,,,,,,251,56,63,64,65,,51,53,54,,57,58", ",,,61,,59,60,62,248,249,66,67,,,,,247,28,27,89,88,90,91,,,,,,,,,,41", ",,93,92,83,50,85,84,86,87,94,95,,81,82,,38,39,37,,,,,,,,,,,,,,,,,,,", "202,,,206,,475,52,,,,,246,,244,,40,,,,,,,,209,,,,,79,73,75,76,77,78", ",-476,,74,80,,,,-476,-476,-476,251,56,-476,-476,-476,,-476,53,54,,,", ",,,-476,-476,-476,,,,,,,,-476,-476,,-476,-476,-476,-476,-476,,,,,,,", ",,,,,,,,,,,,,,-476,-476,-476,-476,-476,-476,-476,-476,-476,-476,-476", "-476,-476,-476,,,-476,-476,-476,,703,-476,,,-476,,,-476,,-476,,-476", ",-476,,-476,-476,-476,-476,-476,-476,-476,,-476,-476,-476,,,,,,,,,,", ",,-476,-476,-476,-476,,-476,,,,,-81,,-476,63,64,65,7,51,,,,57,58,,,", "61,,59,60,62,23,24,66,67,,,,,22,28,27,89,88,90,91,,,17,,,,,,6,41,8,9", "93,92,83,50,85,84,86,87,94,95,,81,82,,38,39,37,,,,,,,,,,,,,,,,,,,,36", ",,268,,,52,,,,,32,,,,40,,,,,,,,18,,,,,79,73,75,76,77,78,,,,74,80,,,63", "64,65,,51,56,,,57,58,,53,54,61,,59,60,62,248,249,66,67,,,,,247,278,282", "89,88,90,91,,,,,,,,,,41,,,93,92,83,50,85,84,86,87,94,95,,81,82,,38,39", "37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52,,,,,246,,,,40,,,,,,,,209,,,,,79", "73,75,76,77,78,,,,74,80,,,63,64,65,,51,56,,,57,58,,53,54,61,,59,60,62", "23,24,66,67,,,,,22,28,27,89,88,90,91,,,17,,,,,,,41,,,93,92,83,50,85", "84,86,87,94,95,,81,82,,38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52,,", ",,,,,,40,,,,,,,,18,,,,,79,73,75,76,77,78,,,,74,80,,,63,64,65,,51,56", ",,57,58,,53,54,61,,59,60,62,248,249,66,67,,,,,247,278,282,89,88,90,91", ",,,,,,,,,41,,,93,92,83,50,85,84,86,87,94,95,,81,82,,38,39,37,,,,,,,", ",,,,,,,,,,,,202,,,206,,,52,,,,,,,,,40,,,,,,,,209,,,,,79,73,75,76,77", "78,,,,74,80,,,63,64,65,,51,56,,,57,58,,53,54,61,,59,60,62,248,249,66", "67,,,,,247,278,282,89,88,90,91,,,,,,,,,,279,,,93,92,83,50,85,84,86,87", "94,95,,81,82,,,,283,,,,,,,,,,,,,,,,,,,,276,,,206,,,52,,,,,,,,,,,,,,", ",,,,,,,79,73,75,76,77,78,,,,74,80,,,63,64,65,7,51,56,,,57,58,,53,54", "61,,59,60,62,23,24,66,67,,,,,22,28,27,89,88,90,91,,,17,,,,,,6,41,8,9", "93,92,83,50,85,84,86,87,94,95,,81,82,,38,39,37,,,,,,,,,,,,,,,,,,,,36", ",,268,,,52,,,,,32,,,,40,,,,,,,,18,,,,,79,73,75,76,77,78,,-257,,74,80", ",,,-257,-257,-257,,56,-257,-257,-257,,-257,53,54,,,,,,,,-257,-257,,", ",,,,,-257,-257,,-257,-257,-257,-257,-257,,,,,,,,,,,,,,,,,,,,,,-257,-257", "-257,-257,-257,-257,-257,-257,-257,-257,-257,-257,-257,-257,,,-257,-257", "-257,,580,-257,,,-257,,,-257,,-257,,-257,,-257,,-257,-257,-257,-257", "-257,-257,-257,,-257,,-257,,,,,,,,,,,,,-257,-257,-257,-257,,-257,,63", "64,65,-83,51,-257,,,57,58,,,,61,,59,60,62,248,249,66,67,,,,,247,278", "282,89,88,90,91,,,,,,,,,,41,,,93,92,83,50,85,84,86,87,94,95,,81,82,", "38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52,,,,,,,,,40,,,,,,,,209,,,", ",79,73,75,76,77,78,,,,74,80,,,63,64,65,,51,56,,,57,58,,53,54,61,,59", "60,62,248,249,66,67,,,,,247,278,282,89,88,90,91,,,,,,,,,,41,,,93,92", "83,50,85,84,86,87,94,95,,81,82,,38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206", ",,52,,,,,,,,,40,,,,,,,,209,,,,,79,73,75,76,77,78,,,,74,80,,,63,64,65", "7,51,56,,,57,58,,53,54,61,,59,60,62,23,24,66,67,,,,,22,28,27,89,88,90", "91,,,17,,,,,,6,41,8,9,93,92,83,50,85,84,86,87,94,95,,81,82,,38,39,37", ",,,,,,,,,,,,,,,,,,,36,,,30,,,52,,,,,32,,,,40,,,,,,,,18,,,,,79,73,75", "76,77,78,,,,74,80,,,63,64,65,,51,56,,,57,58,,53,54,61,,59,60,62,248", "249,66,67,,,,,247,278,282,89,88,90,91,,,,,,,,,,41,,,93,92,83,50,85,84", "86,87,94,95,,81,82,,38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52,,,,,", ",,,40,,,,,,,,209,,,,,79,73,75,76,77,78,,,,74,80,,,63,64,65,,51,56,,", "57,58,,53,54,61,,59,60,62,248,249,66,67,,,,,247,278,282,89,88,90,91", ",,,,,,,,,41,,,93,92,83,50,85,84,86,87,94,95,,81,82,,38,39,37,,,,,,,", ",,,,,,,,,,,,202,,,206,,,52,,,,,,,,,40,,,,,,,,209,,,,,79,73,75,76,77", "78,,,,74,80,,,63,64,65,7,51,56,,,57,58,,53,54,61,,59,60,62,23,24,66", "67,,,,,22,28,27,89,88,90,91,,,17,,,,,,6,41,8,9,93,92,83,50,85,84,86", "87,94,95,,81,82,,38,39,37,,,,,,,,,,,,,,,,,,,,36,,,30,,,52,,,,,32,,,", "40,,,,,,,,18,,,,,79,73,75,76,77,78,,,,74,80,,,63,64,65,,51,56,,,57,58", ",53,54,61,,59,60,62,248,249,66,67,,,,,247,28,27,89,88,90,91,,,,,,,,", ",41,,,93,92,83,50,85,84,86,87,94,95,,81,82,,38,39,37,,,,,,,,,,,,,,,", ",,,,202,,,206,,,52,,,,,595,,244,,40,,,,,,,,209,,,,,79,73,75,76,77,78", ",,,74,80,,,,,,,251,56,63,64,65,,51,53,54,,57,58,,,,61,,59,60,62,248", "249,66,67,,,,,247,278,282,89,88,90,91,,,,,,,,,,279,,,93,92,83,50,85", "84,534,87,94,95,,81,82,,,,283,,,,,,,,,,,,,,,,,,,,535,,,206,,,52,,,,", ",,,,,,,,,,,,,,,,,79,73,75,76,77,78,,,,74,80,,,63,64,65,,51,56,,,57,58", ",53,54,61,,59,60,62,248,249,66,67,,,,,247,278,282,89,88,90,91,,,,,,", ",,,279,,,93,92,83,50,85,84,534,87,94,95,,81,82,,,,283,,,,,,,,,,,,,,", ",,,,,535,,,206,,,52,,,,,,,,,,,,,,,,,,,,,,79,73,75,76,77,78,,,,74,80", ",,63,64,65,,51,56,,,57,58,,53,54,61,,59,60,62,23,24,66,67,,,,,22,28", "27,89,88,90,91,,,,,,,,,,41,,,93,92,83,50,85,84,86,87,94,95,,81,82,,38", "39,37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52,,,,,,,,,40,,,,,,,,209,,,,,79", "73,75,76,77,78,,,,74,80,,,63,64,65,,51,56,,,57,58,,53,54,61,,59,60,62", "248,249,66,67,,,,,247,278,282,89,88,90,91,,,,,,,,,,41,,,93,92,83,50", "85,84,86,87,94,95,,81,82,,38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52", ",,,,,,,,40,,,,,,,,209,,,,,79,73,75,76,77,78,,,,74,80,,,63,64,65,7,51", "56,,,57,58,,53,54,61,,59,60,62,23,24,66,67,,,,,22,28,27,89,88,90,91", ",,17,,,,,,6,41,8,9,93,92,83,50,85,84,86,87,94,95,,81,82,,38,39,37,,", ",,,,,,,,,,,,,,,,,36,,,30,,,52,,,,,32,,,,40,,,,,,,,18,,,,,79,73,75,76", "77,78,,,,74,80,,,63,64,65,7,51,56,,,57,58,,53,54,61,,59,60,62,23,24", "66,67,,,,,22,28,27,89,88,90,91,,,17,,,,,,6,41,8,9,93,92,83,50,85,84", "86,87,94,95,,81,82,,38,39,37,,,,,,,,,,,,,,,,,,,,36,,,30,,,52,,,,,32", ",,,40,,,,,,,,18,,,,,79,73,75,76,77,78,,,,74,80,,,63,64,65,,51,56,,,57", "58,,53,54,61,,59,60,62,248,249,66,67,,,,,247,278,282,89,88,90,91,,,", ",,,,,,41,,,93,92,83,50,85,84,86,87,94,95,,81,82,,38,39,37,,,,,,,,,,", ",,,,,,,,,202,,,206,495,,52,,,,,,,,,40,,,,,,,,209,,,,,79,73,75,76,77", "78,,,,74,80,,,63,64,65,7,51,56,,,57,58,,53,54,61,,59,60,62,23,24,66", "67,,,,,22,28,27,89,88,90,91,,,17,,,,,,6,41,8,9,93,92,83,50,85,84,86", "87,94,95,,81,82,,38,39,37,,,,,,,,,,,,,,,,,,,,36,,,30,,,52,,,,,32,,,", "40,,,,,,,,18,,,,,79,73,75,76,77,78,,,,74,80,,,63,64,65,,51,56,,,57,58", ",53,54,61,,59,60,62,23,24,66,67,,,,,22,28,27,89,88,90,91,,,17,,,,,,", "41,,,93,92,83,50,85,84,86,87,94,95,,81,82,,38,39,37,,,,,,,,,,,,,,,,", ",,,202,,,206,,,52,,,,,,,,,40,,,,,,,,18,,,,,79,73,75,76,77,78,,,,74,80", ",,63,64,65,7,51,56,,,57,58,,53,54,61,,59,60,62,23,24,66,67,,,,,22,28", "27,89,88,90,91,,,17,,,,,,6,41,8,9,93,92,83,50,85,84,86,87,94,95,,81", "82,,38,39,37,,,,,,,,,,,,,,,,,,,,36,,,30,,,52,,,,,32,,,,40,,,,,,,,18", ",,,,79,73,75,76,77,78,,,,74,80,,,63,64,65,,51,56,,,57,58,,53,54,61,", "59,60,62,23,24,66,67,,,,,22,28,27,89,88,90,91,,,17,,,,,,,41,,,93,92", "83,50,85,84,86,87,94,95,,81,82,,38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206", ",,52,,,,,,,,,40,,,,,,,,18,,,,,79,73,75,76,77,78,,,,74,80,,,63,64,65", "7,51,56,,,57,58,,53,54,61,,59,60,62,23,24,66,67,,,,,22,28,27,89,88,90", "91,,,17,,,,,,6,41,8,9,93,92,83,50,85,84,86,87,94,95,,81,82,,38,39,37", ",,,,,,,,,,,,,,,,,,,36,,,30,,,52,,,,,32,,,,40,,,,,,,,18,,,,,79,73,75", "76,77,78,,,,74,80,,,63,64,65,7,51,56,,,57,58,,53,54,61,,59,60,62,23", "24,66,67,,,,,22,28,27,89,88,90,91,,,17,,,,,,6,41,8,9,93,92,83,50,85", "84,86,87,94,95,,81,82,,38,39,37,,,,,,,,,,,,,,,,,,,,36,,,30,,,52,,,,", "32,,,,40,,,,,,,,18,,,,,79,73,75,76,77,78,,,,74,80,,,63,64,65,,51,56", ",,57,58,,53,54,61,,59,60,62,248,249,66,67,,,,,247,278,282,89,88,90,91", ",,,,,,,,,41,,,93,92,83,50,85,84,86,87,94,95,,81,82,,38,39,37,,,,,,,", ",,,,,,,,,,,,202,,,206,,,52,,,,,391,,,,40,,,,,,,,209,,,,,79,73,75,76", "77,78,,,,74,80,,,63,64,65,,51,56,,,57,58,,53,54,61,,59,60,62,23,24,66", "67,,,,,22,28,27,89,88,90,91,,,17,,,,,,,41,,,93,92,83,50,85,84,86,87", "94,95,,81,82,,38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52,,,,,,,,,40", ",,,,,,,18,,,,,79,73,75,76,77,78,,,,74,80,,,63,64,65,,51,56,,,57,58,", "53,54,61,,59,60,62,23,24,66,67,,,,,22,28,27,89,88,90,91,,,17,,,,,,,41", ",,93,92,83,50,85,84,86,87,94,95,,81,82,,38,39,37,,,,,,,,,,,,,,,,,,,", "202,,,206,,,52,,,,,,,,,40,,,,,,,,18,,,,,79,73,75,76,77,78,,,,74,80,", ",63,64,65,,51,56,,,57,58,,53,54,61,,59,60,62,248,249,66,67,,,,,247,278", "282,89,88,90,91,,,,,,,,,,41,,,93,92,83,50,85,84,86,87,94,95,,81,82,", "38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52,,,,,246,,,,40,,,,,,,,209", ",,,,79,73,75,76,77,78,,,,74,80,,,,,,,251,56,63,64,65,,51,53,54,,57,58", ",,,61,,59,60,62,248,249,66,67,,,,,247,278,282,89,88,90,91,,,,,,,,,,41", ",,93,92,83,50,85,84,86,87,94,95,,81,82,,38,39,37,,,,,,,,,,,,,,,,,,,", "202,,,206,,,52,,,,,246,,,,40,,,,,,,,209,,,,,79,73,75,76,77,78,,,,74", "80,,,63,64,65,,51,56,,,57,58,,53,54,61,,59,60,62,248,249,66,67,,,,,247", "278,282,89,88,90,91,,,,,,,,,,41,,,93,92,83,50,85,84,86,87,94,95,,81", "82,,38,39,37,,,,,,,,,,,,,,,,,,,,202,,,206,,,52,,,,,,,244,,40,,,,,,,", "209,,,,,79,73,75,76,77,78,,-492,,74,80,,,,-492,-492,-492,251,56,-492", "-492,-492,,-492,53,54,,,,,,,,-492,,,,,,,,,-492,-492,,-492,-492,-492", "-492,-492,,,,,,,,,,,,-492,,,,,,,-492,-492,-492,,,-492,-492,-492,,-492", ",,,,-492,,,,,-492,,-492,,,,,257,-492,-492,-492,,-492,-492,-492,-492", "-492,,,,,,,,,,,,,-492,,,,,,,,,,,,,-492,,-492,,,-492,,-492,,,,,,,-492", ",,,,257,-492,,,,,,,,,,,,,,,,,,,,,-492,,,,,,,,,,,,,-492,,-492,,,-492", "153,164,154,177,150,170,160,159,,,175,158,157,152,178,,,162,151,165", "169,171,163,156,,,172,179,174,173,166,176,161,149,168,167,180,181,182", "183,184,148,155,146,147,144,145,109,111,,,110,,,,,,,,137,138,,135,119", "120,121,143,124,126,,,122,,,,,139,140,127,128,,,,,,,,,,,,,132,131,,118", "136,134,133,129,130,125,123,116,142,117,,,141,185,153,164,154,177,150", "170,160,159,,80,175,158,157,152,178,,,162,151,165,169,171,163,156,,", "172,179,174,173,166,176,161,149,168,167,180,181,182,183,184,148,155", "146,147,144,145,109,111,,,110,,,,,,,,137,138,,135,119,120,121,143,124", "126,,,122,,,,,139,140,127,128,,,,,,,,,,,,,132,131,,118,136,134,133,129", "130,125,123,116,142,117,,,141,185,153,164,154,177,150,170,160,159,,80", "175,158,157,152,178,,,162,151,165,169,171,163,156,,,172,179,174,173", "166,176,161,149,168,167,180,181,182,183,184,148,155,146,147,144,145", "109,111,108,,110,,,,,,,,137,138,,135,119,120,121,143,124,126,,,122,", ",,,139,140,127,128,,,,,,,,,,,,,132,131,,118,136,134,133,129,130,125", "123,116,142,117,,,141,185,153,164,154,177,150,170,160,159,,80,175,158", "157,152,178,,,162,151,165,169,171,163,156,,,172,179,174,173,166,176", "161,149,168,167,180,181,182,183,184,148,155,146,147,144,145,109,111", ",,110,,,,,,,,137,138,,135,119,120,121,143,124,126,,,122,,,,,139,140", "127,128,,,,,,,,,,,,,132,131,,118,136,134,133,129,130,125,123,116,142", "117,,,141,185,153,164,154,177,150,170,160,159,,80,175,158,157,152,178", ",,162,151,165,169,171,163,156,,,172,179,174,173,166,176,161,149,168", "167,180,181,182,183,184,148,155,146,147,144,145,109,111,370,369,110", "371,,,,,,,137,138,,135,119,120,121,143,124,126,,,122,,,,,139,140,127", "128,,,,,,,,,,,,,132,131,,118,136,134,133,129,130,125,123,116,142,117", ",,141,153,164,154,177,150,170,160,159,,,175,158,157,152,178,,,162,151", "165,169,171,163,156,,,172,179,174,347,346,348,345,149,168,167,180,181", "182,183,184,148,155,146,147,343,344,341,111,85,84,342,87,,,,,,,137,138", ",135,119,120,121,143,124,126,,,122,,,,,139,140,127,128,,,,,,353,,,,", ",,132,131,,118,136,134,133,129,130,125,123,116,142,117,,,141,153,164", "154,177,150,170,160,159,,,175,158,157,152,178,,,162,151,165,169,171", "163,156,,,172,179,174,173,166,176,161,149,168,167,180,181,182,183,184", "148,155,146,147,144,145,109,111,,,110,,,,,,,,137,138,,135,119,120,121", "143,124,126,,,122,,,,,139,140,127,128,,,,,,,,,,,,,132,131,,118,136,134", "133,129,130,125,123,116,142,117,,,141,153,164,154,177,150,170,160,159", ",,175,158,157,152,178,,,162,151,165,169,171,163,156,,,172,179,174,173", "166,176,161,149,168,167,180,181,182,183,184,148,155,146,147,144,145", "109,111,370,369,110,371,,,,,,,137,138,,135,119,120,121,143,124,126,", ",122,,,,,139,140,127,128,,,,,,,,,,,,,132,131,,118,136,134,133,129,130", "125,123,116,142,117,459,403,141,,460,,,,,,,,137,138,,135,119,120,121", "143,124,126,,,122,,,,,139,140,127,128,,,,,,,,,,,,,132,131,,118,136,134", "133,129,130,125,123,116,142,117,459,403,141,,460,,,,,,,,137,138,,135", "119,120,121,143,124,126,,,122,,,,,139,140,127,128,,,,,,,,,,,,,132,131", ",118,136,134,133,129,130,125,123,116,142,117,751,409,141,,794,,,,,,", ",137,138,,135,119,120,121,143,124,126,,,122,,,,,139,140,127,128,,,,", ",,,,,,,,132,131,,118,136,134,133,129,130,125,123,116,142,117,857,403", "141,,858,,,,,,,,137,138,,135,119,120,121,143,124,126,,,122,,,,,139,140", "127,128,,,,,,257,,,,,,,132,131,,118,136,134,133,129,130,125,123,116", "142,117,859,409,141,,860,,,,,,,,137,138,,135,119,120,121,143,124,126", ",,122,,,,,139,140,127,128,,,,,,,,,,,,,132,131,,118,136,134,133,129,130", "125,123,116,142,117,583,409,141,,584,,,,,,,,137,138,,135,119,120,121", "143,124,126,,,122,,,,,139,140,127,128,,,,,,,,,,,,,132,131,,118,136,134", "133,129,130,125,123,116,142,117,581,403,141,,582,,,,,,,,137,138,,135", "119,120,121,143,124,126,,,122,,,,,139,140,127,128,,,,,,257,,,,,,,132", "131,,118,136,134,133,129,130,125,123,116,142,117,459,403,141,,460,,", ",,,,,137,138,,135,119,120,121,143,124,126,,,122,,,,,139,140,127,128", ",,,,,,,,,,,,132,131,,118,136,134,133,129,130,125,123,116,142,117,405", "409,141,,407,,,,,,,,137,138,,135,119,120,121,143,124,126,,,122,,,,,139", "140,127,128,,,,,,,,,,,,,132,131,,118,136,134,133,129,130,125,123,116", "142,117,399,403,141,,400,,,,,,,,137,138,,135,119,120,121,143,124,126", ",,122,,,,,139,140,127,128,,,,,,257,,,,,,,132,131,,118,136,134,133,129", "130,125,123,116,142,117,459,403,141,,460,,,,,,,,137,138,,135,119,120", "121,143,124,126,,,122,,,,,139,140,127,128,,,,,,,,,,,,,132,131,,118,136", "134,133,129,130,125,123,116,142,117,624,409,141,,625,,,,,,,,137,138", ",135,119,120,121,143,124,126,,,122,,,,,139,140,127,128,,,,,,,,,,,,,132", "131,,118,136,134,133,129,130,125,123,116,142,117,621,403,141,,622,,", ",,,,,137,138,,135,119,120,121,143,124,126,,,122,,,,,139,140,127,128", ",,,,,257,,,,,,,132,131,,118,136,134,133,129,130,125,123,116,142,117", "751,409,141,,749,,,,,,,,137,138,,135,119,120,121,143,124,126,,,122,", ",,,139,140,127,128,,,,,,,,,,,,,132,131,,118,136,134,133,129,130,125", "123,116,142,117,581,403,141,,582,,,,,,,,137,138,,135,119,120,121,143", "124,126,,,122,,,,,139,140,127,128,,,,,,257,,,,,,,132,131,,118,136,134", "133,129,130,125,123,116,142,117,583,409,141,,584,,,,,,,,137,138,,135", "119,120,121,143,124,126,,,122,,,,,139,140,127,128,,,,,,,,,,,,,132,131", ",118,136,134,133,129,130,125,123,116,142,117,459,403,141,,460,,,,,,", ",137,138,,135,119,120,121,143,124,126,,,122,,,,,139,140,127,128,,,,", ",257,,,,,,,132,131,,118,136,134,133,129,130,125,123,116,142,117,,,141"];

      racc_action_table = arr = ((_a = ((_b = __opal.Object._scope.Array) == null ? __opal.cm("Array") : _b)).$new || $mm('new')).call(_a, 21316, nil);

      idx = 0;

      ((_a = clist).$each || $mm('each')).call(_a, (TMP_1 = function(str) {

        var self = TMP_1._s || this, TMP_2, _a, _b;
        if (str == null) str = nil;

        return ((_a = ((_b = str).$split || $mm('split')).call(_b, ",", -1)).$each || $mm('each')).call(_a, (TMP_2 = function(i) {

          var self = TMP_2._s || this, _a, _b;
          if (i == null) i = nil;

          if ((_a = ((_b = i)['$empty?'] || $mm('empty?')).call(_b)) === false || _a === nil) {
            ((_a = arr)['$[]='] || $mm('[]=')).call(_a, idx, ((_b = i).$to_i || $mm('to_i')).call(_b))
          };
          return idx = ((_a = idx)['$+'] || $mm('+')).call(_a, 1);
        }, TMP_2._s = self, TMP_2))
      }, TMP_1._s = Grammar, TMP_1));

      clist = ["0,0,0,0,0,790,296,296,0,0,670,670,96,0,364,0,0,0,0,0,0,0,14,534,55,462", "0,0,0,0,0,0,0,280,539,0,630,630,546,546,581,0,0,0,0,0,0,0,0,0,0,0,0", "0,0,418,0,0,462,0,0,0,42,14,622,748,530,473,346,42,14,71,754,534,747", "346,364,754,330,71,534,0,858,529,0,534,329,0,581,630,829,618,0,296,26", "280,0,670,857,201,473,622,670,418,0,859,534,55,622,0,0,0,0,0,0,790,280", "790,0,0,790,42,450,450,450,546,450,0,618,527,450,450,534,0,0,450,539", "450,450,450,450,450,450,450,861,861,528,201,450,450,450,450,450,450", "450,539,26,15,15,582,539,748,359,748,450,359,748,450,450,450,450,450", "450,450,450,450,450,26,450,450,859,450,450,450,747,623,747,747,330,747", "330,704,858,330,858,203,329,858,329,426,829,329,829,450,472,829,450", "582,857,450,857,535,366,857,450,859,450,859,450,832,859,832,359,359", "557,527,450,527,448,626,527,450,450,450,450,450,450,472,342,704,450", "450,528,203,528,342,347,528,450,450,455,455,455,347,455,450,450,343", "455,455,334,448,334,455,343,455,455,455,455,455,455,455,366,366,366", "335,455,455,455,455,455,455,455,628,557,557,674,629,624,624,586,674", "455,557,837,455,455,455,455,455,455,455,455,455,455,357,455,455,523", "455,455,455,586,586,586,586,586,586,586,586,586,586,586,200,586,586", "624,669,586,586,200,455,669,624,455,361,631,455,327,837,837,837,837", "586,636,586,455,586,586,586,586,586,586,586,455,586,37,37,637,455,455", "455,455,455,455,357,357,357,455,455,639,586,471,471,471,355,471,455", "640,823,471,471,200,455,455,471,823,471,471,471,471,471,471,471,643", "361,361,361,471,471,471,471,471,471,471,824,826,471,722,35,621,3,824", "826,471,722,3,471,471,471,471,471,471,471,471,471,471,298,471,471,298", "471,471,471,749,355,355,355,823,645,299,749,13,299,348,274,749,621,25", "13,35,348,274,471,621,25,471,35,471,471,304,324,344,304,824,826,471", "722,471,344,275,277,846,485,307,307,471,275,277,846,485,471,471,471", "471,471,471,400,648,648,471,471,333,749,482,482,482,333,482,471,647", "13,482,482,274,471,471,482,614,482,482,482,482,482,482,482,301,328,328", "301,482,482,482,482,482,482,482,650,400,275,277,846,485,656,389,400", "482,763,658,482,482,482,482,482,482,482,482,482,482,316,482,482,313", "482,482,482,389,389,389,389,389,389,389,389,389,389,389,341,389,389", "289,312,389,389,341,482,311,289,482,283,283,482,763,763,763,763,482", "389,427,389,482,389,389,389,389,389,389,389,482,389,518,518,625,482", "482,482,482,482,482,625,611,336,482,482,625,389,606,389,537,302,482", "482,489,489,489,537,489,482,482,289,489,489,605,300,428,489,597,489", "489,489,489,489,489,489,675,676,677,679,489,489,489,489,489,489,489", "646,594,570,345,350,682,625,646,399,489,345,350,489,489,489,489,489", "489,489,489,489,489,537,489,489,592,489,489,489,494,494,494,494,494", "494,494,494,494,494,494,860,494,494,570,406,494,494,860,489,399,570", "489,860,108,489,286,399,108,108,646,494,291,494,489,494,494,494,494", "494,494,494,489,494,689,288,287,489,489,489,489,489,489,585,360,282", "489,489,279,494,490,490,490,425,490,489,278,286,490,490,860,489,489", "490,286,490,490,490,490,490,490,490,276,271,511,270,490,490,490,490", "490,490,490,661,425,707,708,711,425,425,661,714,490,515,715,490,490", "490,490,490,490,490,490,490,490,429,490,490,717,490,490,490,777,777", "777,777,777,777,777,777,777,777,777,865,777,777,269,720,777,777,865", "490,721,267,490,724,256,490,515,515,515,515,661,777,727,777,490,777", "777,777,777,777,777,777,490,777,728,498,716,490,490,490,490,490,490", "716,245,739,490,490,742,777,847,847,847,847,847,490,242,241,847,847", "865,490,490,847,205,847,847,847,847,847,847,847,204,497,751,752,847", "847,847,847,847,847,847,716,202,847,373,373,373,373,373,847,847,847", "847,847,847,847,847,847,847,847,847,847,847,424,847,847,398,847,847", "847,397,397,397,397,397,397,397,397,397,397,397,466,397,397,757,758", "397,397,466,847,759,496,847,486,424,847,481,774,424,424,847,397,775", "397,847,397,397,397,397,397,397,397,847,397,186,561,782,847,847,847", "847,847,847,733,783,620,847,847,466,397,491,491,491,78,491,847,77,793", "491,491,794,847,847,491,363,491,491,491,491,491,491,491,798,799,63,477", "491,491,491,491,491,491,491,5,5,5,5,5,733,733,733,733,491,804,476,491", "491,491,491,491,491,491,491,491,491,809,491,491,810,491,491,491,239", "239,239,239,239,239,239,239,239,239,239,811,239,239,474,813,239,239", "468,491,41,578,491,683,683,491,683,683,683,36,467,239,825,239,491,239", "239,239,239,239,239,239,491,239,34,568,573,491,491,491,491,491,491,20", "835,465,491,491,385,239,495,495,495,443,495,491,842,464,495,495,12,491", "491,495,11,495,495,495,495,495,495,495,10,9,851,853,495,495,495,495", "495,495,495,854,443,495,856,8,443,443,443,443,495,386,394,495,495,495", "495,495,495,495,495,495,495,1,495,495,392,495,495,495,19,19,19,19,19", "19,19,19,19,19,19,812,19,19,,,19,19,,495,,,495,,,495,,,,,,19,,19,495", "19,19,19,19,19,19,19,495,19,,,,495,495,495,495,495,495,,,,495,495,,19", "500,500,500,444,500,495,,,500,500,,495,495,500,,500,500,500,500,500", "500,500,,,,,500,500,500,500,500,500,500,,444,,,,444,444,444,444,500", ",,500,500,500,500,500,500,500,500,500,500,,500,500,,500,500,500,705", "705,705,705,705,705,705,705,705,705,705,,705,705,,,705,705,,500,,,500", ",,500,,,,,500,705,,705,500,705,705,705,705,705,705,705,500,705,,,,500", "500,500,500,500,500,,,,500,500,,705,503,503,503,,503,500,,,503,503,", "500,500,503,,503,503,503,503,503,503,503,,,,,503,503,503,503,503,503", "503,,,,,,,,,,503,,,503,503,503,503,503,503,503,503,503,503,,503,503", ",503,503,503,610,610,610,610,610,610,610,610,610,610,610,,610,610,,", "610,610,,503,,,503,,,503,,,,,,610,,610,503,610,610,610,610,610,610,610", "503,610,,,,503,503,503,503,503,503,,,,503,503,,610,,610,,,503,503,843", "843,843,,843,503,503,,843,843,,,,843,,843,843,843,843,843,843,843,,", ",,843,843,843,843,843,843,843,,,,,,,,,,843,,,843,843,843,843,843,843", "843,843,843,843,,843,843,,843,843,843,447,447,447,447,447,447,447,447", "447,447,447,,447,447,,,447,447,,843,,,843,,,843,,,,,843,447,,447,843", "447,447,447,447,447,447,447,843,447,,,,843,843,843,843,843,843,,,,843", "843,,447,447,,,,843,843,841,841,841,841,841,843,843,,841,841,,,,841", ",841,841,841,841,841,841,841,,,,,841,841,841,841,841,841,841,,,841,", ",,,,841,841,841,841,841,841,841,841,841,841,841,841,841,841,,841,841", ",841,841,841,412,412,412,412,412,412,412,412,412,412,412,,412,412,,", "412,412,,841,,,841,,,841,,,,,841,412,,412,841,412,412,412,412,412,412", "412,841,412,,,,841,841,841,841,841,841,,,,841,841,,412,17,17,17,,17", "841,,,17,17,,841,841,17,,17,17,17,17,17,17,17,,,,,17,17,17,17,17,17", "17,,,17,,,,,,,17,,,17,17,17,17,17,17,17,17,17,17,,17,17,,17,17,17,700", "700,700,700,700,700,700,700,700,700,700,,700,700,,,700,700,,17,,,17", ",,17,,,,,,700,,700,17,700,700,700,700,700,700,700,17,700,,,,17,17,17", "17,17,17,,,,17,17,,700,18,18,18,,18,17,,,18,18,,17,17,18,,18,18,18,18", "18,18,18,,,,,18,18,18,18,18,18,18,,,,,,,,,,18,,,18,18,18,18,18,18,18", "18,18,18,,18,18,,18,18,18,698,698,698,698,698,698,698,698,698,698,698", ",698,698,,,698,698,,18,,,18,,,18,,,,,,698,,698,18,698,698,698,698,698", "698,698,18,698,,,,18,18,18,18,18,18,,,,18,18,,698,509,509,509,509,509", "18,,,509,509,,18,18,509,,509,509,509,509,509,509,509,,,,,509,509,509", "509,509,509,509,,,509,,,,,,509,509,509,509,509,509,509,509,509,509,509", "509,509,509,,509,509,,509,509,509,695,695,695,695,695,695,695,695,695", "695,695,,695,695,,,695,695,,509,,,509,,,509,,,,,509,695,,695,509,695", "695,695,695,695,695,695,509,695,,,,509,509,509,509,509,509,,,,509,509", ",695,833,833,833,833,833,509,,,833,833,,509,509,833,,833,833,833,833", "833,833,833,,,,,833,833,833,833,833,833,833,,,833,,,,,,833,833,833,833", "833,833,833,833,833,833,833,833,833,833,,833,833,,833,833,833,693,693", "693,693,693,693,693,693,693,693,693,,693,693,,,693,693,,833,,,833,,", "833,,,,,833,693,,693,833,693,693,693,693,693,693,693,833,693,,,,833", "833,833,833,833,833,,,,833,833,,693,22,22,22,,22,833,,,22,22,,833,833", "22,,22,22,22,22,22,22,22,,,,,22,22,22,22,22,22,22,,,,,,,,,,22,,,22,22", "22,22,22,22,22,22,22,22,,22,22,,22,22,22,688,688,688,688,688,688,688", "688,688,688,688,,688,688,,,688,688,,22,,,22,,,22,,,,,22,688,22,688,22", "688,688,688,688,688,688,688,22,688,,,,22,22,22,22,22,22,,,,22,22,62", "688,62,62,62,62,22,22,23,23,23,,23,22,22,,23,23,,,,23,,23,23,23,23,23", "23,23,,,,,23,23,23,23,23,23,23,,,,,62,62,62,62,,23,,,23,23,23,23,23", "23,23,23,23,23,,23,23,,23,23,23,627,627,627,627,627,627,627,627,627", "627,627,,627,627,,,627,627,,23,,,23,,,23,,,,,23,627,23,627,23,627,627", "627,627,627,627,627,23,627,,,,23,23,23,23,23,23,,,,23,23,673,627,673", "673,673,673,23,23,24,24,24,,24,23,23,,24,24,,,,24,,24,24,24,24,24,24", "24,,,,,24,24,24,24,24,24,24,,,,,673,673,673,673,,24,,,24,24,24,24,24", "24,24,24,24,24,,24,24,,24,24,24,,,,,,,,,,,,,,513,,513,513,513,513,24", ",,24,,,24,,,,,24,,24,,24,,,,,,,,24,,,,,24,24,24,24,24,24,,,,24,24,513", "513,513,513,,,24,24,510,510,510,510,510,24,24,,510,510,,,,510,,510,510", "510,510,510,510,510,,,,,510,510,510,510,510,510,510,,,510,,,,,,510,510", "510,510,510,510,510,510,510,510,510,510,510,510,,510,510,,510,510,510", "433,433,433,433,433,433,433,,,433,433,,,,,,433,433,,510,,,510,,,510", ",,,,510,433,,433,510,433,433,433,433,433,433,433,510,433,,,,510,510", "510,510,510,510,,,,510,510,,,519,519,519,,519,510,,,519,519,,510,510", "519,,519,519,519,519,519,519,519,,,,,519,519,519,519,519,519,519,,,", ",,,,,,519,,,519,519,519,519,519,519,519,519,519,519,,519,519,,,,519", ",,,,,,,,,,,,,761,,761,761,761,761,519,,,519,,,519,,,27,589,,589,589", "589,589,27,27,27,,,27,27,27,,27,,,519,519,519,519,519,519,27,27,27,519", "519,761,761,761,761,,27,27,519,27,27,27,27,27,519,519,,589,589,589,589", ",,,,,,,589,,,,,,,27,27,27,27,27,27,27,27,27,27,27,27,27,27,,,27,27,27", ",,27,,27,27,,,,,27,,27,,27,,27,27,27,27,27,27,27,,27,27,27,,56,,56,56", "56,56,,,,,,27,27,27,27,,27,28,,,,,,27,28,28,28,,,28,28,28,542,28,542", "542,542,542,56,,,,,28,28,56,56,56,56,,,,28,28,,28,28,28,28,28,,308,", "308,308,308,308,,,,542,,,,,,,542,542,542,542,28,28,28,28,28,28,28,28", "28,28,28,28,28,28,,,28,28,28,308,,28,,28,28,308,308,308,308,28,,28,", "28,,28,28,28,28,28,28,28,,28,,28,,,,,,,,,,,,,28,28,28,28,,28,30,30,30", "30,30,,28,,30,30,,,,30,,30,30,30,30,30,30,30,,,,,30,30,30,30,30,30,30", ",,30,,,,,,30,30,30,30,30,30,30,30,30,30,30,30,30,30,,30,30,,30,30,30", "446,446,446,446,446,446,446,446,,446,446,,,,,,446,446,,30,,,30,,,30", ",,,,30,446,,446,30,446,446,446,446,446,446,446,30,446,,,,30,30,30,30", "30,30,,,,30,30,,,31,31,31,,31,30,,,31,31,,30,30,31,,31,31,31,31,31,31", "31,,,,,31,31,31,31,31,31,31,,,,,,,,,,31,,,31,31,31,31,31,31,31,31,31", "31,,31,31,437,,816,31,816,816,816,816,,,,,,,,,437,437,,,,,,31,,,31,", ",31,,437,,437,31,437,437,437,437,,816,437,,437,,,,816,816,816,816,31", "31,31,31,31,31,,,,31,31,,,32,32,32,,32,31,,,32,32,,31,31,32,,32,32,32", "32,32,32,32,,,,,32,32,32,32,32,32,32,,,,,,,,,,32,,,32,32,32,32,32,32", "32,32,32,32,,32,32,,,,32,445,445,445,445,445,445,445,,,445,445,,,,,", "445,445,,32,,,32,,,32,,,,,,445,,445,,445,445,445,445,445,445,445,,445", ",,,32,32,32,32,32,32,,,,32,32,,,522,522,522,522,522,32,,,522,522,,32", "32,522,,522,522,522,522,522,522,522,,,,,522,522,522,522,522,522,522", ",,522,,,,,,522,522,522,522,522,522,522,522,522,522,522,522,522,522,", "522,522,,522,522,522,438,438,438,438,438,438,438,,,438,438,,,,,,438", "438,,522,,,522,,,522,,,,,522,438,,438,522,438,438,438,438,438,438,438", "522,438,,,,522,522,522,522,522,522,,,,522,522,,,526,526,526,526,526", "522,,,526,526,,522,522,526,,526,526,526,526,526,526,526,,,,,526,526", "526,526,526,526,526,,,526,,,,,,526,526,526,526,526,526,526,526,526,526", "526,526,526,526,,526,526,,526,526,526,439,439,439,439,439,439,439,,", "439,439,,,,,,439,439,,526,,,526,,,526,,,,,526,439,,439,526,439,439,439", "439,439,439,439,526,439,,,,526,526,526,526,526,526,,,,526,526,,,531", "531,531,531,531,526,,,531,531,,526,526,531,,531,531,531,531,531,531", "531,,,,,531,531,531,531,531,531,531,,,531,,,,,,531,531,531,531,531,531", "531,531,531,531,531,531,531,531,,531,531,,531,531,531,440,440,440,440", "440,440,440,,,440,440,,,,,,440,440,,531,,,531,,,531,,,,,531,440,,440", "531,440,440,440,440,440,440,440,531,440,,,,531,531,531,531,531,531,", ",,531,531,,,822,822,822,822,822,531,,,822,822,,531,531,822,,822,822", "822,822,822,822,822,,,,,822,822,822,822,822,822,822,,,822,,,,,,822,822", "822,822,822,822,822,822,822,822,822,822,822,822,,822,822,,822,822,822", "441,441,441,441,441,441,441,,,441,441,,,,,,441,441,,822,,,822,,,822", ",,,,822,441,,441,822,441,441,441,441,441,441,441,822,441,,,,822,822", "822,822,822,822,,,,822,822,,,38,38,38,,38,822,,,38,38,,822,822,38,,38", "38,38,38,38,38,38,,,,,38,38,38,38,38,38,38,,,,,,,,,,38,,,38,38,38,38", "38,38,38,38,38,38,,38,38,,38,38,38,442,442,442,442,442,442,442,,,442", "442,,,,,,442,442,,38,,,38,,,38,,,,,,442,,442,38,442,442,442,442,442", "442,442,38,442,,,,38,38,38,38,38,38,,,,38,38,,,39,39,39,,39,38,,,39", "39,,38,38,39,,39,39,39,39,39,39,39,,,,,39,39,39,39,39,39,39,,,,,,,,", ",39,,,39,39,39,39,39,39,39,39,39,39,,39,39,,39,39,39,434,,,,,,,,,,,", ",,,,434,434,,39,,,39,,,39,,,,,,434,,434,39,434,434,434,434,,,434,39", "434,,,,39,39,39,39,39,39,,,,39,39,,,40,40,40,,40,39,,,40,40,,39,39,40", ",40,40,40,40,40,40,40,,,,,40,40,40,40,40,40,40,,,,,,,,,,40,,,40,40,40", "40,40,40,40,40,40,40,,40,40,,40,40,40,422,422,422,422,422,422,422,422", "422,422,422,,422,422,,,422,422,,40,,,40,,,40,,,,,,422,,422,40,422,422", "422,422,422,422,422,40,422,,,,40,40,40,40,40,40,,,,40,40,,,820,820,820", ",820,40,,,820,820,,40,40,820,,820,820,820,820,820,820,820,,,,,820,820", "820,820,820,820,820,,,,,,,,,,820,,,820,820,820,820,820,820,820,820,820", "820,,820,820,,820,820,820,423,423,423,423,423,423,423,423,423,423,423", ",423,423,,,423,423,,820,,,820,,,820,,,,,820,423,820,423,820,423,423", "423,423,423,423,423,820,423,,,,820,820,820,820,820,820,,,,820,820,,", "421,421,421,,421,820,,,421,421,,820,820,421,,421,421,421,421,421,421", "421,,,,,421,421,421,421,421,421,421,,,,,,,,,,421,,,421,421,421,421,421", "421,421,421,421,421,,421,421,,421,421,421,435,,,,,,,,,,,,,,,,435,435", ",421,,,421,,,421,,,,,,435,,435,421,435,435,435,435,,,435,421,435,,,", "421,421,421,421,421,421,,50,,421,421,,,,50,50,50,,421,50,50,50,436,50", "421,421,,,,,,50,,50,50,,,,436,436,,,50,50,,50,50,50,50,50,,,,436,,436", ",436,436,436,436,,,436,,436,,,,,,50,50,50,50,50,50,50,50,50,50,50,50", "50,50,,,50,50,50,,,50,,,50,,,50,,50,,50,,50,,50,50,50,50,50,50,50,,50", ",50,,,,,,,,,,,,,50,50,50,50,,50,,,50,50,,,50,52,52,52,,52,,,,52,52,", ",,52,,52,52,52,52,52,52,52,,,,,52,52,52,52,52,52,52,,,52,,,,,,,52,,", "52,52,52,52,52,52,52,52,52,52,430,52,52,,52,52,52,,432,,,,,,,,430,430", ",,,,,,432,432,52,,,52,,430,52,430,,430,430,430,430,432,,52,,432,432", "432,432,,,52,,,,,52,52,52,52,52,52,,,,52,52,,,53,53,53,,53,52,,,53,53", ",52,52,53,,53,53,53,53,53,53,53,,,,,53,53,53,53,53,53,53,,,,,,,,,,53", ",,53,53,53,53,53,53,53,53,53,53,,53,53,,53,53,53,431,,,,,,,,,,,,,,,", "431,431,,53,,,53,,,53,,,,,53,431,,431,53,431,431,431,431,,,,53,,,,,53", "53,53,53,53,53,,,,53,53,,,,,,,53,53,54,54,54,,54,53,53,,54,54,,,,54", ",54,54,54,54,54,54,54,,,,,54,54,54,54,54,54,54,,,,,,,,,,54,,,54,54,54", "54,54,54,54,54,54,54,,54,54,,54,54,54,,,,,,,,,,,,,,,,,,,,54,,,54,,,54", ",,,,54,,,,54,,,,,,,,54,,,,,54,54,54,54,54,54,,,,54,54,,,,,,,54,54,420", "420,420,,420,54,54,,420,420,,,,420,,420,420,420,420,420,420,420,,,,", "420,420,420,420,420,420,420,,,,,,,,,,420,,,420,420,420,420,420,420,420", "420,420,420,,420,420,,420,420,420,,,,,,,,,,,,,,,,,,,,420,,,420,,,420", ",,,,,,,,420,,,,,,,,420,,,,,420,420,420,420,420,420,,,,420,420,,,806", "806,806,806,806,420,,,806,806,,420,420,806,,806,806,806,806,806,806", "806,,,,,806,806,806,806,806,806,806,,,806,,,,,,806,806,806,806,806,806", "806,806,806,806,806,806,806,806,,806,806,,806,806,806,,,,,,,,,,,,,,", ",,,,,806,,,806,,,806,,,,,806,,,,806,,,,,,,,806,,,,,806,806,806,806,806", "806,,,,806,806,,,57,57,57,,57,806,,,57,57,,806,806,57,,57,57,57,57,57", "57,57,,,,,57,57,57,57,57,57,57,,,57,,,,,,,57,,,57,57,57,57,57,57,57", "57,57,57,,57,57,,57,57,57,,,,,,,,,,,,,,,,,,,,57,,,57,,,57,,,,,,,,,57", ",,,,,,,57,,,,,57,57,57,57,57,57,,,,57,57,,,58,58,58,,58,57,,,58,58,", "57,57,58,,58,58,58,58,58,58,58,,,,,58,58,58,58,58,58,58,,,58,,,,,,,58", ",,58,58,58,58,58,58,58,58,58,58,,58,58,,58,58,58,,,,,,,,,,,,,,,,,,,", "58,,,58,,,58,,,,,,,,,58,,,,,,,,58,,,,,58,58,58,58,58,58,,,,58,58,,,61", "61,61,,61,58,,,61,61,,58,58,61,,61,61,61,61,61,61,61,,,,,61,61,61,61", "61,61,61,,,61,,,,,,,61,,,61,61,61,61,61,61,61,61,61,61,,61,61,,61,61", "61,,,,,,,,,,,,,,,,,,,,61,,,61,,,61,,,,,,,,,61,,,,,,,,61,,,,,61,61,61", "61,61,61,,,,61,61,61,,,,,61,,61,801,801,801,801,801,61,61,,801,801,", ",,801,,801,801,801,801,801,801,801,,,,,801,801,801,801,801,801,801,", ",801,,,,,,801,801,801,801,801,801,801,801,801,801,801,801,801,801,,801", "801,,801,801,801,,,,,,,,,,,,,,,,,,,,801,,,801,,,801,,,,,801,,,,801,", ",,,,,,801,,,,,801,801,801,801,801,801,,,,801,801,,,800,800,800,,800", "801,,,800,800,,801,801,800,,800,800,800,800,800,800,800,,,,,800,800", "800,800,800,800,800,,,,,,,,,,800,,,800,800,800,800,800,800,800,800,800", "800,,800,800,,800,800,800,,,,,,,,,,,,,,,,,,,,800,,,800,,,800,,,,,800", ",,,800,,,,,,,,800,,,,,800,800,800,800,800,800,,,,800,800,,,419,419,419", ",419,800,,,419,419,,800,800,419,,419,419,419,419,419,419,419,,,,,419", "419,419,419,419,419,419,,,,,,,,,,419,,,419,419,419,419,419,419,419,419", "419,419,,419,419,,419,419,419,,,,,,,,,,,,,,,,,,,,419,,,419,,,419,,,", ",,,,,419,,,,,,,,419,,,,,419,419,419,419,419,419,,,,419,419,,,796,796", "796,,796,419,,,796,796,,419,419,796,,796,796,796,796,796,796,796,,,", ",796,796,796,796,796,796,796,,,796,,,,,,,796,,,796,796,796,796,796,796", "796,796,796,796,,796,796,,796,796,796,,,,,,,,,,,,,,,,,,,,796,,,796,", ",796,,,,,,,,,796,,,,,,,,796,,,,,796,796,796,796,796,796,,,,796,796,", ",791,791,791,,791,796,,,791,791,,796,796,791,,791,791,791,791,791,791", "791,,,,,791,791,791,791,791,791,791,,,,,,,,,,791,,,791,791,791,791,791", "791,791,791,791,791,,791,791,,,,791,,,,,,,,,,,,,,,,,,,,791,,,791,,,791", ",,,,,,,,,,,,,,,,,,,,,791,791,791,791,791,791,,,,791,791,,,417,417,417", ",417,791,,,417,417,,791,791,417,,417,417,417,417,417,417,417,,,,,417", "417,417,417,417,417,417,,,,,,,,,,417,,,417,417,417,417,417,417,417,417", "417,417,,417,417,,417,417,417,,,,,,,,,,,,,,,,,,,,417,,,417,,,417,,,", ",417,,,,417,,,,,,,,417,,,,,417,417,417,417,417,417,,,,417,417,,,,,,", "417,417,410,410,410,,410,417,417,,410,410,,,,410,,410,410,410,410,410", "410,410,,,,,410,410,410,410,410,410,410,,,,,,,,,,410,,,410,410,410,410", "410,410,410,410,410,410,,410,410,,410,410,410,,,,,,,,,,,,,,,,,,,,410", ",,410,410,,410,,,,,410,,410,,410,,,,,,,,410,,,,,410,410,410,410,410", "410,,,,410,410,,,,,,,410,410,83,83,83,,83,410,410,,83,83,,,,83,,83,83", "83,83,83,83,83,,83,,,83,83,83,83,83,83,83,,,,,,,,,,83,,,83,83,83,83", "83,83,83,83,83,83,,83,83,,83,83,83,,,,,,,,,,,,,,,,,,,,83,,,83,83,,83", ",,,,83,,83,,83,,,,,,,,83,,83,,,83,83,83,83,83,83,,,,83,83,,,,,,,83,83", "86,86,86,,86,83,83,,86,86,,,,86,,86,86,86,86,86,86,86,,86,,,86,86,86", "86,86,86,86,,,,,,,,,,86,,,86,86,86,86,86,86,86,86,86,86,,86,86,,86,86", "86,,,,,,,,,,,,,,,,,,,,86,,,86,86,,86,,,,,86,,86,,86,,,,,,,,86,,86,,", "86,86,86,86,86,86,,,,86,86,,,,,,,86,86,787,787,787,787,787,86,86,,787", "787,,,,787,,787,787,787,787,787,787,787,,,,,787,787,787,787,787,787", "787,,,787,,,,,,787,787,787,787,787,787,787,787,787,787,787,787,787,787", ",787,787,,787,787,787,,,,,,,,,,,,,,,,,,,,787,,,787,,,787,,,,,787,,,", "787,,,,,,,,787,,,,,787,787,787,787,787,787,,,,787,787,,,98,98,98,98", "98,787,,,98,98,,787,787,98,,98,98,98,98,98,98,98,,,,,98,98,98,98,98", "98,98,,,98,,,,,,98,98,98,98,98,98,98,98,98,98,98,98,98,98,,98,98,,98", "98,98,,,,,,,,,,,,,,,,,,,,98,,,98,,,98,,,,,98,,,,98,,,,,,,,98,,,,,98", "98,98,98,98,98,,,,98,98,,,102,102,102,98,102,98,,,102,102,,98,98,102", ",102,102,102,102,102,102,102,,,,,102,102,102,102,102,102,102,,,102,", ",,,,,102,,,102,102,102,102,102,102,102,102,102,102,,102,102,,102,102", "102,,,,,,,,,,,,,,,,,,,,102,,,102,,,102,,,,,,,,,102,,,,,,,,102,,,,,102", "102,102,102,102,102,,,,102,102,,,103,103,103,,103,102,,,103,103,,102", "102,103,,103,103,103,103,103,103,103,,,,,103,103,103,103,103,103,103", ",,103,,,,,,,103,,,103,103,103,103,103,103,103,103,103,103,,103,103,", "103,103,103,,,,,,,,,,,,,,,,,,,,103,,,103,,,103,,,,,,,,,103,,,,,,,,103", ",,,,103,103,103,103,103,103,,,,103,103,,,104,104,104,,104,103,,,104", "104,,103,103,104,,104,104,104,104,104,104,104,,,,,104,104,104,104,104", "104,104,,,104,,,,,,,104,,,104,104,104,104,104,104,104,104,104,104,,104", "104,,104,104,104,,,,,,,,,,,,,,,,,,,,104,,,104,,,104,,,,,,,,,104,,,,", ",,,104,,,,,104,104,104,104,104,104,,,,104,104,,,105,105,105,,105,104", ",,105,105,,104,104,105,,105,105,105,105,105,105,105,,,,,105,105,105", "105,105,105,105,,,105,,,,,,,105,,,105,105,105,105,105,105,105,105,105", "105,,105,105,,105,105,105,,,,,,,,,,,,,,,,,,,,105,,,105,,,105,,,,,,,", ",105,,,,,,,,105,,,,,105,105,105,105,105,105,,,,105,105,,,106,106,106", "106,106,105,,,106,106,,105,105,106,,106,106,106,106,106,106,106,,,,", "106,106,106,106,106,106,106,,,106,,,,,,106,106,106,106,106,106,106,106", "106,106,106,106,106,106,,106,106,,106,106,106,,,,,,,,,,,,,,,,,,,,106", ",,106,,,106,,,,,106,,,,106,,,,,,,,106,,,,,106,106,106,106,106,106,,", ",106,106,,,778,778,778,,778,106,,,778,778,,106,106,778,,778,778,778", "778,778,778,778,,,,,778,778,778,778,778,778,778,,,,,,,,,,778,,,778,778", "778,778,778,778,778,778,778,778,,778,778,,778,778,778,,,,,,,,,,,,,,", ",,,,,778,,,778,,,778,,,,,,,,,778,,,,,,,,778,,,,,778,778,778,778,778", "778,,,,778,778,,,409,409,409,,409,778,,,409,409,,778,778,409,,409,409", "409,409,409,409,409,,,,,409,409,409,409,409,409,409,,,,,,,,,,409,,,409", "409,409,409,409,409,409,409,409,409,,409,409,,409,409,409,,,,,,,,,,", ",,,,,,,,,409,,,409,409,,409,,,,,409,,409,,409,,,,,,,,409,,,,407,409", "409,409,409,409,409,407,407,407,409,409,,407,407,,407,,409,409,,,,,", "409,409,,,,,,,,,407,407,,407,407,407,407,407,,,,,,,,,,,,,,,,,,,,,,407", "407,407,407,407,407,407,407,407,407,407,407,407,407,,,407,407,407,,407", ",,,407,,,,,,,407,,407,,407,407,407,407,407,407,407,,407,,407,,,,,,,", ",,,,,407,407,,407,,407,,,,,407,,407,188,188,188,188,188,,,,188,188,", ",,188,,188,188,188,188,188,188,188,,,,,188,188,188,188,188,188,188,", ",188,,,,,,188,188,188,188,188,188,188,188,188,188,188,188,188,188,,188", "188,,188,188,188,,,,,,,,,,,,,,,,,,,,188,,,188,,,188,,,,,188,,,,188,", ",,,,,,188,,,,,188,188,188,188,188,188,,,,188,188,,,189,189,189,189,189", "188,,,189,189,,188,188,189,,189,189,189,189,189,189,189,,,,,189,189", "189,189,189,189,189,,,189,,,,,,189,189,189,189,189,189,189,189,189,189", "189,189,189,189,,189,189,,189,189,189,,,,,,,,,,,,,,,,,,,,189,,,189,", ",189,,,,,189,,,,189,,,,,,,,189,,,,,189,189,189,189,189,189,,,,189,189", ",,190,190,190,,190,189,,,190,190,,189,189,190,,190,190,190,190,190,190", "190,,,,,190,190,190,190,190,190,190,,,,,,,,,,190,,,190,190,190,190,190", "190,190,190,190,190,,190,190,,190,190,190,,,,,,,,,,,,,,,,,,,,190,,,190", ",,190,,,,,190,,,,190,,,,,,,,190,,,,,190,190,190,190,190,190,,,,190,190", ",,191,191,191,,191,190,,,191,191,,190,190,191,,191,191,191,191,191,191", "191,,,,,191,191,191,191,191,191,191,,,,,,,,,,191,,,191,191,191,191,191", "191,191,191,191,191,,191,191,,191,191,191,,,,,,,,,,,,,,,,,,,,191,,,191", ",,191,,,,,191,,,,191,,,,,,,,191,,,,,191,191,191,191,191,191,,,,191,191", ",,192,192,192,,192,191,,,192,192,,191,191,192,,192,192,192,192,192,192", "192,,,,,192,192,192,192,192,192,192,,,,,,,,,,192,,,192,192,192,192,192", "192,192,192,192,192,,192,192,,192,192,192,,,,,,,,,,,,,,,,,,,,192,,,192", ",,192,,,,,,,,,192,,,,,,,,192,,,,,192,192,192,192,192,192,,,,192,192", ",,193,193,193,,193,192,,,193,193,,192,192,193,,193,193,193,193,193,193", "193,,,,,193,193,193,193,193,193,193,,,,,,,,,,193,,,193,193,193,193,193", "193,193,193,193,193,,193,193,,193,193,193,,,,,,,,,,,,,,,,,,,,193,,,193", ",,193,,,,,193,,,,193,,,,,,,,193,,,,,193,193,193,193,193,193,405,,,193", "193,,,405,405,405,,193,193,405,405,,405,,193,193,,,,,,405,,,,,,,,,,405", "405,,405,405,405,405,405,,,,,,,,,,,,,,,,,,,,,,405,405,405,405,405,405", "405,405,405,405,405,405,405,405,,,405,405,405,,405,,,,405,,,,,,,405", ",405,,405,405,405,405,405,405,405,,405,405,405,,,,,,,,,,,,,405,405,", "405,,405,401,,,,405,,405,401,401,401,,,401,401,401,,401,,,,,,,,,401", "401,401,,,,,,,,401,401,,401,401,401,401,401,,,,,,,,,,,,,,,,,,,,,,401", "401,401,401,401,401,401,401,401,401,401,401,401,401,,,401,401,401,,", "401,,401,401,,,,,401,,401,,401,,401,401,401,401,401,401,401,,401,401", "401,,,,,,,,,,,,,401,401,401,401,,401,196,196,196,,196,,401,,196,196", ",,,196,,196,196,196,196,196,196,196,,,,,196,196,196,196,196,196,196", ",,,,,,,,,196,,,196,196,196,196,196,196,196,196,196,196,,196,196,,196", "196,196,,,,,,,,,,,,,,,,,,,,196,,,196,,,196,,,,,,,,,196,,,,,,,,196,,", ",,196,196,196,196,196,196,,,,196,196,,,197,197,197,,197,196,,,197,197", ",196,196,197,,197,197,197,197,197,197,197,,,,,197,197,197,197,197,197", "197,,,197,,,,,,,197,,,197,197,197,197,197,197,197,197,197,197,,197,197", ",197,197,197,,,,,,,,,,,,,,,,,,,,197,,,197,,,197,,,,,,,,,197,,,,,,,,197", ",,,,197,197,197,197,197,197,,,,197,197,,,198,198,198,,198,197,,,198", "198,,197,197,198,,198,198,198,198,198,198,198,,,,,198,198,198,198,198", "198,198,,,198,,,,,,,198,,,198,198,198,198,198,198,198,198,198,198,,198", "198,,198,198,198,,,,,,,,,,,,,,,,,,,,198,,,198,,,198,,,,,,,,,198,,,,", ",,,198,,,,,198,198,198,198,198,198,,,,198,198,,,540,540,540,,540,198", ",,540,540,,198,198,540,,540,540,540,540,540,540,540,,,,,540,540,540", "540,540,540,540,,,540,,,,,,,540,,,540,540,540,540,540,540,540,540,540", "540,,540,540,,540,540,540,,,,,,,,,,,,,,,,,,,,540,,,540,,,540,,,,,,,", ",540,,,,,,,,540,,,,,540,540,540,540,540,540,,,,540,540,,,766,766,766", ",766,540,,,766,766,,540,540,766,,766,766,766,766,766,766,766,,,,,766", "766,766,766,766,766,766,,,,,,,,,,766,,,766,766,766,766,766,766,766,766", "766,766,,766,766,,766,766,766,,,,,,,,,,,,,,,,,,,,766,,,766,,,766,,,", ",,,,,766,,,,,,,,766,,,,,766,766,766,766,766,766,,,,766,766,,,753,753", "753,753,753,766,,,753,753,,766,766,753,,753,753,753,753,753,753,753", ",,,,753,753,753,753,753,753,753,,,753,,,,,,753,753,753,753,753,753,753", "753,753,753,753,753,753,753,,753,753,,753,753,753,,,,,,,,,,,,,,,,,,", ",753,,,753,,,753,,,,,753,,,,753,,,,,,,,753,,,,,753,753,753,753,753,753", ",,,753,753,,,567,567,567,,567,753,,,567,567,,753,753,567,,567,567,567", "567,567,567,567,,,,,567,567,567,567,567,567,567,,,,,,,,,,567,,,567,567", "567,567,567,567,567,567,567,567,,567,567,,567,567,567,,,,,,,,,,,,,,", ",,,,,567,,,567,,,567,,,,,,,,,567,,,,,,,,567,,,,,567,567,567,567,567", "567,,,,567,567,,,569,569,569,,569,567,,,569,569,,567,567,569,,569,569", "569,569,569,569,569,,,,,569,569,569,569,569,569,569,,,,,,,,,,569,,,569", "569,569,569,569,569,569,569,569,569,,569,569,,569,569,569,,,,,,,,,,", ",,,,,,,,,569,,,569,,,569,,,,,569,,,,569,,,,,,,,569,,,,,569,569,569,569", "569,569,,,,569,569,,,391,391,391,,391,569,,,391,391,,569,569,391,,391", "391,391,391,391,391,391,,,,,391,391,391,391,391,391,391,,,,,,,,,,391", ",,391,391,391,391,391,391,391,391,391,391,,391,391,,391,391,391,,,,", ",,,,,,,,,,,,,,,391,,,391,,,391,,,,,,,,,391,,,,,,,,391,,,,,391,391,391", "391,391,391,,,,391,391,,,206,206,206,206,206,391,,,206,206,,391,391", "206,,206,206,206,206,206,206,206,,,,,206,206,206,206,206,206,206,,,206", ",,,,,206,206,206,206,206,206,206,206,206,206,206,206,206,206,,206,206", ",206,206,206,,,,,,,,,,,,,,,,,,,,206,,,206,,,206,,,,,206,,,,206,,,,,", ",,206,,,,,206,206,206,206,206,206,,,,206,206,,,209,209,209,,209,206", ",,209,209,,206,206,209,,209,209,209,209,209,209,209,,,,,209,209,209", "209,209,209,209,,,,,,,,,,209,,,209,209,209,209,209,209,209,209,209,209", ",209,209,,209,209,209,,,,,,,,,,,,,,,,,,,,209,,,209,,,209,,,,,,,,,209", ",,,,,,,209,,,,,209,209,209,209,209,209,,,,209,209,,,210,210,210,,210", "209,,,210,210,,209,209,210,,210,210,210,210,210,210,210,,,,,210,210", "210,210,210,210,210,,,,,,,,,,210,,,210,210,210,210,210,210,210,210,210", "210,,210,210,,210,210,210,,,,,,,,,,,,,,,,,,,,210,,,210,,,210,,,,,,,", ",210,,,,,,,,210,,,,,210,210,210,210,210,210,,,,210,210,,,211,211,211", ",211,210,,,211,211,,210,210,211,,211,211,211,211,211,211,211,,,,,211", "211,211,211,211,211,211,,,,,,,,,,211,,,211,211,211,211,211,211,211,211", "211,211,,211,211,,211,211,211,,,,,,,,,,,,,,,,,,,,211,,,211,,,211,,,", ",,,,,211,,,,,,,,211,,,,,211,211,211,211,211,211,,,,211,211,,,212,212", "212,,212,211,,,212,212,,211,211,212,,212,212,212,212,212,212,212,,,", ",212,212,212,212,212,212,212,,,,,,,,,,212,,,212,212,212,212,212,212", "212,212,212,212,,212,212,,212,212,212,,,,,,,,,,,,,,,,,,,,212,,,212,", ",212,,,,,,,,,212,,,,,,,,212,,,,,212,212,212,212,212,212,,,,212,212,", ",213,213,213,,213,212,,,213,213,,212,212,213,,213,213,213,213,213,213", "213,,,,,213,213,213,213,213,213,213,,,,,,,,,,213,,,213,213,213,213,213", "213,213,213,213,213,,213,213,,213,213,213,,,,,,,,,,,,,,,,,,,,213,,,213", ",,213,,,,,,,,,213,,,,,,,,213,,,,,213,213,213,213,213,213,,,,213,213", ",,214,214,214,,214,213,,,214,214,,213,213,214,,214,214,214,214,214,214", "214,,,,,214,214,214,214,214,214,214,,,,,,,,,,214,,,214,214,214,214,214", "214,214,214,214,214,,214,214,,214,214,214,,,,,,,,,,,,,,,,,,,,214,,,214", ",,214,,,,,,,,,214,,,,,,,,214,,,,,214,214,214,214,214,214,,,,214,214", ",,215,215,215,,215,214,,,215,215,,214,214,215,,215,215,215,215,215,215", "215,,,,,215,215,215,215,215,215,215,,,,,,,,,,215,,,215,215,215,215,215", "215,215,215,215,215,,215,215,,215,215,215,,,,,,,,,,,,,,,,,,,,215,,,215", ",,215,,,,,,,,,215,,,,,,,,215,,,,,215,215,215,215,215,215,,,,215,215", ",,216,216,216,,216,215,,,216,216,,215,215,216,,216,216,216,216,216,216", "216,,,,,216,216,216,216,216,216,216,,,,,,,,,,216,,,216,216,216,216,216", "216,216,216,216,216,,216,216,,216,216,216,,,,,,,,,,,,,,,,,,,,216,,,216", ",,216,,,,,,,,,216,,,,,,,,216,,,,,216,216,216,216,216,216,,,,216,216", ",,217,217,217,,217,216,,,217,217,,216,216,217,,217,217,217,217,217,217", "217,,,,,217,217,217,217,217,217,217,,,,,,,,,,217,,,217,217,217,217,217", "217,217,217,217,217,,217,217,,217,217,217,,,,,,,,,,,,,,,,,,,,217,,,217", ",,217,,,,,,,,,217,,,,,,,,217,,,,,217,217,217,217,217,217,,,,217,217", ",,218,218,218,,218,217,,,218,218,,217,217,218,,218,218,218,218,218,218", "218,,,,,218,218,218,218,218,218,218,,,,,,,,,,218,,,218,218,218,218,218", "218,218,218,218,218,,218,218,,218,218,218,,,,,,,,,,,,,,,,,,,,218,,,218", ",,218,,,,,,,,,218,,,,,,,,218,,,,,218,218,218,218,218,218,,,,218,218", ",,219,219,219,,219,218,,,219,219,,218,218,219,,219,219,219,219,219,219", "219,,,,,219,219,219,219,219,219,219,,,,,,,,,,219,,,219,219,219,219,219", "219,219,219,219,219,,219,219,,219,219,219,,,,,,,,,,,,,,,,,,,,219,,,219", ",,219,,,,,,,,,219,,,,,,,,219,,,,,219,219,219,219,219,219,,,,219,219", ",,220,220,220,,220,219,,,220,220,,219,219,220,,220,220,220,220,220,220", "220,,,,,220,220,220,220,220,220,220,,,,,,,,,,220,,,220,220,220,220,220", "220,220,220,220,220,,220,220,,220,220,220,,,,,,,,,,,,,,,,,,,,220,,,220", ",,220,,,,,,,,,220,,,,,,,,220,,,,,220,220,220,220,220,220,,,,220,220", ",,221,221,221,,221,220,,,221,221,,220,220,221,,221,221,221,221,221,221", "221,,,,,221,221,221,221,221,221,221,,,,,,,,,,221,,,221,221,221,221,221", "221,221,221,221,221,,221,221,,221,221,221,,,,,,,,,,,,,,,,,,,,221,,,221", ",,221,,,,,,,,,221,,,,,,,,221,,,,,221,221,221,221,221,221,,,,221,221", ",,222,222,222,,222,221,,,222,222,,221,221,222,,222,222,222,222,222,222", "222,,,,,222,222,222,222,222,222,222,,,,,,,,,,222,,,222,222,222,222,222", "222,222,222,222,222,,222,222,,222,222,222,,,,,,,,,,,,,,,,,,,,222,,,222", ",,222,,,,,,,,,222,,,,,,,,222,,,,,222,222,222,222,222,222,,,,222,222", ",,223,223,223,,223,222,,,223,223,,222,222,223,,223,223,223,223,223,223", "223,,,,,223,223,223,223,223,223,223,,,,,,,,,,223,,,223,223,223,223,223", "223,223,223,223,223,,223,223,,223,223,223,,,,,,,,,,,,,,,,,,,,223,,,223", ",,223,,,,,,,,,223,,,,,,,,223,,,,,223,223,223,223,223,223,,,,223,223", ",,224,224,224,,224,223,,,224,224,,223,223,224,,224,224,224,224,224,224", "224,,,,,224,224,224,224,224,224,224,,,,,,,,,,224,,,224,224,224,224,224", "224,224,224,224,224,,224,224,,224,224,224,,,,,,,,,,,,,,,,,,,,224,,,224", ",,224,,,,,,,,,224,,,,,,,,224,,,,,224,224,224,224,224,224,,,,224,224", ",,225,225,225,,225,224,,,225,225,,224,224,225,,225,225,225,225,225,225", "225,,,,,225,225,225,225,225,225,225,,,,,,,,,,225,,,225,225,225,225,225", "225,225,225,225,225,,225,225,,225,225,225,,,,,,,,,,,,,,,,,,,,225,,,225", ",,225,,,,,,,,,225,,,,,,,,225,,,,,225,225,225,225,225,225,,,,225,225", ",,226,226,226,,226,225,,,226,226,,225,225,226,,226,226,226,226,226,226", "226,,,,,226,226,226,226,226,226,226,,,,,,,,,,226,,,226,226,226,226,226", "226,226,226,226,226,,226,226,,226,226,226,,,,,,,,,,,,,,,,,,,,226,,,226", ",,226,,,,,,,,,226,,,,,,,,226,,,,,226,226,226,226,226,226,,,,226,226", ",,227,227,227,,227,226,,,227,227,,226,226,227,,227,227,227,227,227,227", "227,,,,,227,227,227,227,227,227,227,,,,,,,,,,227,,,227,227,227,227,227", "227,227,227,227,227,,227,227,,227,227,227,,,,,,,,,,,,,,,,,,,,227,,,227", ",,227,,,,,,,,,227,,,,,,,,227,,,,,227,227,227,227,227,227,,,,227,227", ",,228,228,228,,228,227,,,228,228,,227,227,228,,228,228,228,228,228,228", "228,,,,,228,228,228,228,228,228,228,,,,,,,,,,228,,,228,228,228,228,228", "228,228,228,228,228,,228,228,,228,228,228,,,,,,,,,,,,,,,,,,,,228,,,228", ",,228,,,,,,,,,228,,,,,,,,228,,,,,228,228,228,228,228,228,,,,228,228", ",,229,229,229,,229,228,,,229,229,,228,228,229,,229,229,229,229,229,229", "229,,,,,229,229,229,229,229,229,229,,,,,,,,,,229,,,229,229,229,229,229", "229,229,229,229,229,,229,229,,229,229,229,,,,,,,,,,,,,,,,,,,,229,,,229", ",,229,,,,,,,,,229,,,,,,,,229,,,,,229,229,229,229,229,229,,,,229,229", ",,230,230,230,,230,229,,,230,230,,229,229,230,,230,230,230,230,230,230", "230,,,,,230,230,230,230,230,230,230,,,,,,,,,,230,,,230,230,230,230,230", "230,230,230,230,230,,230,230,,230,230,230,,,,,,,,,,,,,,,,,,,,230,,,230", ",,230,,,,,,,,,230,,,,,,,,230,,,,,230,230,230,230,230,230,,,,230,230", ",,231,231,231,,231,230,,,231,231,,230,230,231,,231,231,231,231,231,231", "231,,,,,231,231,231,231,231,231,231,,,,,,,,,,231,,,231,231,231,231,231", "231,231,231,231,231,,231,231,,231,231,231,,,,,,,,,,,,,,,,,,,,231,,,231", ",,231,,,,,,,,,231,,,,,,,,231,,,,,231,231,231,231,231,231,,,,231,231", ",,232,232,232,,232,231,,,232,232,,231,231,232,,232,232,232,232,232,232", "232,,,,,232,232,232,232,232,232,232,,,,,,,,,,232,,,232,232,232,232,232", "232,232,232,232,232,,232,232,,232,232,232,,,,,,,,,,,,,,,,,,,,232,,,232", ",,232,,,,,,,,,232,,,,,,,,232,,,,,232,232,232,232,232,232,,,,232,232", ",,233,233,233,,233,232,,,233,233,,232,232,233,,233,233,233,233,233,233", "233,,,,,233,233,233,233,233,233,233,,,,,,,,,,233,,,233,233,233,233,233", "233,233,233,233,233,,233,233,,233,233,233,,,,,,,,,,,,,,,,,,,,233,,,233", ",,233,,,,,,,,,233,,,,,,,,233,,,,,233,233,233,233,233,233,,,,233,233", ",,234,234,234,,234,233,,,234,234,,233,233,234,,234,234,234,234,234,234", "234,,,,,234,234,234,234,234,234,234,,,,,,,,,,234,,,234,234,234,234,234", "234,234,234,234,234,,234,234,,234,234,234,,,,,,,,,,,,,,,,,,,,234,,,234", ",,234,,,,,,,,,234,,,,,,,,234,,,,,234,234,234,234,234,234,,,,234,234", ",,235,235,235,,235,234,,,235,235,,234,234,235,,235,235,235,235,235,235", "235,,,,,235,235,235,235,235,235,235,,,,,,,,,,235,,,235,235,235,235,235", "235,235,235,235,235,,235,235,,235,235,235,,,,,,,,,,,,,,,,,,,,235,,,235", ",,235,,,,,,,,,235,,,,,,,,235,,,,,235,235,235,235,235,235,,,,235,235", ",,571,571,571,,571,235,,,571,571,,235,235,571,,571,571,571,571,571,571", "571,,,,,571,571,571,571,571,571,571,,,,,,,,,,571,,,571,571,571,571,571", "571,571,571,571,571,,571,571,,571,571,571,,,,,,,,,,,,,,,,,,,,571,,,571", ",,571,,,,,,,,,571,,,,,,,,571,,,,,571,571,571,571,571,571,,,,571,571", ",,744,744,744,744,744,571,,,744,744,,571,571,744,,744,744,744,744,744", "744,744,,,,,744,744,744,744,744,744,744,,,744,,,,,,744,744,744,744,744", "744,744,744,744,744,744,744,744,744,,744,744,,744,744,744,,,,,,,,,,", ",,,,,,,,,744,,,744,,,744,,,,,744,,,,744,,,,,,,,744,,,,,744,744,744,744", "744,744,,,,744,744,,,743,743,743,743,743,744,,,743,743,,744,744,743", ",743,743,743,743,743,743,743,,,,,743,743,743,743,743,743,743,,,743,", ",,,,743,743,743,743,743,743,743,743,743,743,743,743,743,743,,743,743", ",743,743,743,,,,,,,,,,,,,,,,,,,,743,,,743,,,743,,,,,743,,,,743,,,,,", ",,743,,,,,743,743,743,743,743,743,,,,743,743,,,244,244,244,,244,743", ",,244,244,,743,743,244,,244,244,244,244,244,244,244,,,,,244,244,244", "244,244,244,244,,,,,,,,,,244,,,244,244,244,244,244,244,244,244,244,244", ",244,244,,244,244,244,,,,,,,,,,,,,,,,,,,,244,,,244,,,244,,,,,,,,,244", ",,,,,,,244,,,,,244,244,244,244,244,244,,,,244,244,,,572,572,572,,572", "244,,,572,572,,244,244,572,,572,572,572,572,572,572,572,,,,,572,572", "572,572,572,572,572,,,,,,,,,,572,,,572,572,572,572,572,572,572,572,572", "572,,572,572,,572,572,572,,,,,,,,,,,,,,,,,,,,572,,,572,,,572,,,,,,,", ",572,,,,,,,,572,,,,,572,572,572,572,572,572,,,,572,572,,,246,246,246", ",246,572,,,246,246,,572,572,246,,246,246,246,246,246,246,246,,,,,246", "246,246,246,246,246,246,,,,,,,,,,246,,,246,246,246,246,246,246,246,246", "246,246,,246,246,,246,246,246,,,,,,,,,,,,,,,,,,,,246,,,246,,,246,,,", ",,,,,246,,,,,,,,246,,,,,246,246,246,246,246,246,,,,246,246,,,251,251", "251,,251,246,,,251,251,,246,246,251,,251,251,251,251,251,251,251,,,", ",251,251,251,251,251,251,251,,,,,,,,,,251,,,251,251,251,251,251,251", "251,251,251,251,,251,251,,251,251,251,,,,,,,,,,,,,,,,,,,,251,,,251,", ",251,,,,,,,,,251,,,,,,,,251,,,,,251,251,251,251,251,251,,,,251,251,", ",577,577,577,,577,251,,,577,577,,251,251,577,,577,577,577,577,577,577", "577,,,,,577,577,577,577,577,577,577,,,,,,,,,,577,,,577,577,577,577,577", "577,577,577,577,577,,577,577,,577,577,577,,,,,,,,,,,,,,,,,,,,577,,,577", ",,577,,,,,,,,,577,,,,,,,,577,,,,,577,577,577,577,577,577,,,,577,577", ",,580,580,580,,580,577,,,580,580,,577,577,580,,580,580,580,580,580,580", "580,,,,,580,580,580,580,580,580,580,,,,,,,,,,580,,,580,580,580,580,580", "580,580,580,580,580,,580,580,,580,580,580,,,,,,,,,,,,,,,,,,,,580,,,580", ",,580,,,,,,,,,580,,,,,,,,580,,,,,580,580,580,580,580,580,,,,580,580", ",,726,726,726,726,726,580,,,726,726,,580,580,726,,726,726,726,726,726", "726,726,,,,,726,726,726,726,726,726,726,,,726,,,,,,726,726,726,726,726", "726,726,726,726,726,726,726,726,726,,726,726,,726,726,726,,,,,,,,,,", ",,,,,,,,,726,,,726,,,726,,,,,726,,,,726,,,,,,,,726,,,,,726,726,726,726", "726,726,,,,726,726,,,257,257,257,,257,726,,,257,257,,726,726,257,,257", "257,257,257,257,257,257,,,,,257,257,257,257,257,257,257,,,,,,,,,,257", ",,257,257,257,257,257,257,257,257,257,257,,257,257,,257,257,257,,,,", ",,,,,,,,,,,,,,,257,,,257,,,257,,,,,257,,257,,257,,,,,,,,257,,,,,257", "257,257,257,257,257,,,,257,257,,,,,,,257,257,258,258,258,,258,257,257", ",258,258,,,,258,,258,258,258,258,258,258,258,,,,,258,258,258,258,258", "258,258,,,,,,,,,,258,,,258,258,258,258,258,258,258,258,258,258,,258", "258,,258,258,258,,,,,,,,,,,,,,,,,,,,258,,,258,,,258,,,,,258,,258,,258", ",,,,,,,258,,,,,258,258,258,258,258,258,,,,258,258,,,,,,,258,258,266", "266,266,,266,258,258,,266,266,,,,266,,266,266,266,266,266,266,266,,", ",,266,266,266,266,266,266,266,,,,,,,,,,266,,,266,266,266,266,266,266", "266,266,266,266,,266,266,,266,266,266,,,,,,,,,,,,,,,,,,,,266,,,266,", "266,266,,,,,266,,266,,266,,,,,,,,266,,,,,266,266,266,266,266,266,,583", ",266,266,,,,583,583,583,266,266,583,583,583,,583,266,266,,,,,,,583,583", "583,,,,,,,,583,583,,583,583,583,583,583,,,,,,,,,,,,,,,,,,,,,,583,583", "583,583,583,583,583,583,583,583,583,583,583,583,,,583,583,583,,583,583", ",,583,,,583,,583,,583,,583,,583,583,583,583,583,583,583,,583,583,583", ",,,,,,,,,,,,583,583,583,583,,583,,,,,583,,583,268,268,268,268,268,,", ",268,268,,,,268,,268,268,268,268,268,268,268,,,,,268,268,268,268,268", "268,268,,,268,,,,,,268,268,268,268,268,268,268,268,268,268,268,268,268", "268,,268,268,,268,268,268,,,,,,,,,,,,,,,,,,,,268,,,268,,,268,,,,,268", ",,,268,,,,,,,,268,,,,,268,268,268,268,268,268,,,,268,268,,,718,718,718", ",718,268,,,718,718,,268,268,718,,718,718,718,718,718,718,718,,,,,718", "718,718,718,718,718,718,,,,,,,,,,718,,,718,718,718,718,718,718,718,718", "718,718,,718,718,,718,718,718,,,,,,,,,,,,,,,,,,,,718,,,718,,,718,,,", ",718,,,,718,,,,,,,,718,,,,,718,718,718,718,718,718,,,,718,718,,,353", "353,353,,353,718,,,353,353,,718,718,353,,353,353,353,353,353,353,353", ",,,,353,353,353,353,353,353,353,,,353,,,,,,,353,,,353,353,353,353,353", "353,353,353,353,353,,353,353,,353,353,353,,,,,,,,,,,,,,,,,,,,353,,,353", ",,353,,,,,,,,,353,,,,,,,,353,,,,,353,353,353,353,353,353,,,,353,353", ",,703,703,703,,703,353,,,703,703,,353,353,703,,703,703,703,703,703,703", "703,,,,,703,703,703,703,703,703,703,,,,,,,,,,703,,,703,703,703,703,703", "703,703,703,703,703,,703,703,,703,703,703,,,,,,,,,,,,,,,,,,,,703,,,703", ",,703,,,,,,,,,703,,,,,,,,703,,,,,703,703,703,703,703,703,,,,703,703", ",,272,272,272,,272,703,,,272,272,,703,703,272,,272,272,272,272,272,272", "272,,,,,272,272,272,272,272,272,272,,,,,,,,,,272,,,272,272,272,272,272", "272,272,272,272,272,,272,272,,,,272,,,,,,,,,,,,,,,,,,,,272,,,272,,,272", ",,,,,,,,,,,,,,,,,,,,,272,272,272,272,272,272,,,,272,272,,,273,273,273", "273,273,272,,,273,273,,272,272,273,,273,273,273,273,273,273,273,,,,", "273,273,273,273,273,273,273,,,273,,,,,,273,273,273,273,273,273,273,273", "273,273,273,273,273,273,,273,273,,273,273,273,,,,,,,,,,,,,,,,,,,,273", ",,273,,,273,,,,,273,,,,273,,,,,,,,273,,,,,273,273,273,273,273,273,,584", ",273,273,,,,584,584,584,,273,584,584,584,,584,273,273,,,,,,,,584,584", ",,,,,,,584,584,,584,584,584,584,584,,,,,,,,,,,,,,,,,,,,,,584,584,584", "584,584,584,584,584,584,584,584,584,584,584,,,584,584,584,,584,584,", ",584,,,584,,584,,584,,584,,584,584,584,584,584,584,584,,584,,584,,,", ",,,,,,,,,584,584,584,584,,584,,587,587,587,584,587,584,,,587,587,,,", "587,,587,587,587,587,587,587,587,,,,,587,587,587,587,587,587,587,,,", ",,,,,,587,,,587,587,587,587,587,587,587,587,587,587,,587,587,,587,587", "587,,,,,,,,,,,,,,,,,,,,587,,,587,,,587,,,,,,,,,587,,,,,,,,587,,,,,587", "587,587,587,587,587,,,,587,587,,,702,702,702,,702,587,,,702,702,,587", "587,702,,702,702,702,702,702,702,702,,,,,702,702,702,702,702,702,702", ",,,,,,,,,702,,,702,702,702,702,702,702,702,702,702,702,,702,702,,702", "702,702,,,,,,,,,,,,,,,,,,,,702,,,702,,,702,,,,,,,,,702,,,,,,,,702,,", ",,702,702,702,702,702,702,,,,702,702,,,591,591,591,591,591,702,,,591", "591,,702,702,591,,591,591,591,591,591,591,591,,,,,591,591,591,591,591", "591,591,,,591,,,,,,591,591,591,591,591,591,591,591,591,591,591,591,591", "591,,591,591,,591,591,591,,,,,,,,,,,,,,,,,,,,591,,,591,,,591,,,,,591", ",,,591,,,,,,,,591,,,,,591,591,591,591,591,591,,,,591,591,,,701,701,701", ",701,591,,,701,701,,591,591,701,,701,701,701,701,701,701,701,,,,,701", "701,701,701,701,701,701,,,,,,,,,,701,,,701,701,701,701,701,701,701,701", "701,701,,701,701,,701,701,701,,,,,,,,,,,,,,,,,,,,701,,,701,,,701,,,", ",,,,,701,,,,,,,,701,,,,,701,701,701,701,701,701,,,,701,701,,,595,595", "595,,595,701,,,595,595,,701,701,595,,595,595,595,595,595,595,595,,,", ",595,595,595,595,595,595,595,,,,,,,,,,595,,,595,595,595,595,595,595", "595,595,595,595,,595,595,,595,595,595,,,,,,,,,,,,,,,,,,,,595,,,595,", ",595,,,,,,,,,595,,,,,,,,595,,,,,595,595,595,595,595,595,,,,595,595,", ",603,603,603,603,603,595,,,603,603,,595,595,603,,603,603,603,603,603", "603,603,,,,,603,603,603,603,603,603,603,,,603,,,,,,603,603,603,603,603", "603,603,603,603,603,603,603,603,603,,603,603,,603,603,603,,,,,,,,,,", ",,,,,,,,,603,,,603,,,603,,,,,603,,,,603,,,,,,,,603,,,,,603,603,603,603", "603,603,,,,603,603,,,609,609,609,,609,603,,,609,609,,603,603,609,,609", "609,609,609,609,609,609,,,,,609,609,609,609,609,609,609,,,,,,,,,,609", ",,609,609,609,609,609,609,609,609,609,609,,609,609,,609,609,609,,,,", ",,,,,,,,,,,,,,,609,,,609,,,609,,,,,609,,609,,609,,,,,,,,609,,,,,609", "609,609,609,609,609,,,,609,609,,,,,,,609,609,340,340,340,,340,609,609", ",340,340,,,,340,,340,340,340,340,340,340,340,,,,,340,340,340,340,340", "340,340,,,,,,,,,,340,,,340,340,340,340,340,340,340,340,340,340,,340", "340,,,,340,,,,,,,,,,,,,,,,,,,,340,,,340,,,340,,,,,,,,,,,,,,,,,,,,,,340", "340,340,340,340,340,,,,340,340,,,338,338,338,,338,340,,,338,338,,340", "340,338,,338,338,338,338,338,338,338,,,,,338,338,338,338,338,338,338", ",,,,,,,,,338,,,338,338,338,338,338,338,338,338,338,338,,338,338,,,,338", ",,,,,,,,,,,,,,,,,,,338,,,338,,,338,,,,,,,,,,,,,,,,,,,,,,338,338,338", "338,338,338,,,,338,338,,,691,691,691,,691,338,,,691,691,,338,338,691", ",691,691,691,691,691,691,691,,,,,691,691,691,691,691,691,691,,,,,,,", ",,691,,,691,691,691,691,691,691,691,691,691,691,,691,691,,691,691,691", ",,,,,,,,,,,,,,,,,,,691,,,691,,,691,,,,,,,,,691,,,,,,,,691,,,,,691,691", "691,691,691,691,,,,691,691,,,690,690,690,,690,691,,,690,690,,691,691", "690,,690,690,690,690,690,690,690,,,,,690,690,690,690,690,690,690,,,", ",,,,,,690,,,690,690,690,690,690,690,690,690,690,690,,690,690,,690,690", "690,,,,,,,,,,,,,,,,,,,,690,,,690,,,690,,,,,,,,,690,,,,,,,,690,,,,,690", "690,690,690,690,690,,,,690,690,,,615,615,615,615,615,690,,,615,615,", "690,690,615,,615,615,615,615,615,615,615,,,,,615,615,615,615,615,615", "615,,,615,,,,,,615,615,615,615,615,615,615,615,615,615,615,615,615,615", ",615,615,,615,615,615,,,,,,,,,,,,,,,,,,,,615,,,615,,,615,,,,,615,,,", "615,,,,,,,,615,,,,,615,615,615,615,615,615,,,,615,615,,,616,616,616", "616,616,615,,,616,616,,615,615,616,,616,616,616,616,616,616,616,,,,", "616,616,616,616,616,616,616,,,616,,,,,,616,616,616,616,616,616,616,616", "616,616,616,616,616,616,,616,616,,616,616,616,,,,,,,,,,,,,,,,,,,,616", ",,616,,,616,,,,,616,,,,616,,,,,,,,616,,,,,616,616,616,616,616,616,,", ",616,616,,,293,293,293,,293,616,,,293,293,,616,616,293,,293,293,293", "293,293,293,293,,,,,293,293,293,293,293,293,293,,,,,,,,,,293,,,293,293", "293,293,293,293,293,293,293,293,,293,293,,293,293,293,,,,,,,,,,,,,,", ",,,,,293,,,293,293,,293,,,,,,,,,293,,,,,,,,293,,,,,293,293,293,293,293", "293,,,,293,293,,,295,295,295,295,295,293,,,295,295,,293,293,295,,295", "295,295,295,295,295,295,,,,,295,295,295,295,295,295,295,,,295,,,,,,295", "295,295,295,295,295,295,295,295,295,295,295,295,295,,295,295,,295,295", "295,,,,,,,,,,,,,,,,,,,,295,,,295,,,295,,,,,295,,,,295,,,,,,,,295,,,", ",295,295,295,295,295,295,,,,295,295,,,332,332,332,,332,295,,,332,332", ",295,295,332,,332,332,332,332,332,332,332,,,,,332,332,332,332,332,332", "332,,,332,,,,,,,332,,,332,332,332,332,332,332,332,332,332,332,,332,332", ",332,332,332,,,,,,,,,,,,,,,,,,,,332,,,332,,,332,,,,,,,,,332,,,,,,,,332", ",,,,332,332,332,332,332,332,,,,332,332,,,684,684,684,684,684,332,,,684", "684,,332,332,684,,684,684,684,684,684,684,684,,,,,684,684,684,684,684", "684,684,,,684,,,,,,684,684,684,684,684,684,684,684,684,684,684,684,684", "684,,684,684,,684,684,684,,,,,,,,,,,,,,,,,,,,684,,,684,,,684,,,,,684", ",,,684,,,,,,,,684,,,,,684,684,684,684,684,684,,,,684,684,,,331,331,331", ",331,684,,,331,331,,684,684,331,,331,331,331,331,331,331,331,,,,,331", "331,331,331,331,331,331,,,331,,,,,,,331,,,331,331,331,331,331,331,331", "331,331,331,,331,331,,331,331,331,,,,,,,,,,,,,,,,,,,,331,,,331,,,331", ",,,,,,,,331,,,,,,,,331,,,,,331,331,331,331,331,331,,,,331,331,,,672", "672,672,672,672,331,,,672,672,,331,331,672,,672,672,672,672,672,672", "672,,,,,672,672,672,672,672,672,672,,,672,,,,,,672,672,672,672,672,672", "672,672,672,672,672,672,672,672,,672,672,,672,672,672,,,,,,,,,,,,,,", ",,,,,672,,,672,,,672,,,,,672,,,,672,,,,,,,,672,,,,,672,672,672,672,672", "672,,,,672,672,,,671,671,671,671,671,672,,,671,671,,672,672,671,,671", "671,671,671,671,671,671,,,,,671,671,671,671,671,671,671,,,671,,,,,,671", "671,671,671,671,671,671,671,671,671,671,671,671,671,,671,671,,671,671", "671,,,,,,,,,,,,,,,,,,,,671,,,671,,,671,,,,,671,,,,671,,,,,,,,671,,,", ",671,671,671,671,671,671,,,,671,671,,,632,632,632,,632,671,,,632,632", ",671,671,632,,632,632,632,632,632,632,632,,,,,632,632,632,632,632,632", "632,,,,,,,,,,632,,,632,632,632,632,632,632,632,632,632,632,,632,632", ",632,632,632,,,,,,,,,,,,,,,,,,,,632,,,632,,,632,,,,,632,,,,632,,,,,", ",,632,,,,,632,632,632,632,632,632,,,,632,632,,,668,668,668,,668,632", ",,668,668,,632,632,668,,668,668,668,668,668,668,668,,,,,668,668,668", "668,668,668,668,,,668,,,,,,,668,,,668,668,668,668,668,668,668,668,668", "668,,668,668,,668,668,668,,,,,,,,,,,,,,,,,,,,668,,,668,,,668,,,,,,,", ",668,,,,,,,,668,,,,,668,668,668,668,668,668,,,,668,668,,,660,660,660", ",660,668,,,660,660,,668,668,660,,660,660,660,660,660,660,660,,,,,660", "660,660,660,660,660,660,,,660,,,,,,,660,,,660,660,660,660,660,660,660", "660,660,660,,660,660,,660,660,660,,,,,,,,,,,,,,,,,,,,660,,,660,,,660", ",,,,,,,,660,,,,,,,,660,,,,,660,660,660,660,660,660,,,,660,660,,,664", "664,664,,664,660,,,664,664,,660,660,664,,664,664,664,664,664,664,664", ",,,,664,664,664,664,664,664,664,,,,,,,,,,664,,,664,664,664,664,664,664", "664,664,664,664,,664,664,,664,664,664,,,,,,,,,,,,,,,,,,,,664,,,664,", ",664,,,,,664,,,,664,,,,,,,,664,,,,,664,664,664,664,664,664,,,,664,664", ",,,,,,664,664,659,659,659,,659,664,664,,659,659,,,,659,,659,659,659", "659,659,659,659,,,,,659,659,659,659,659,659,659,,,,,,,,,,659,,,659,659", "659,659,659,659,659,659,659,659,,659,659,,659,659,659,,,,,,,,,,,,,,", ",,,,,659,,,659,,,659,,,,,659,,,,659,,,,,,,,659,,,,,659,659,659,659,659", "659,,,,659,659,,,453,453,453,,453,659,,,453,453,,659,659,453,,453,453", "453,453,453,453,453,,,,,453,453,453,453,453,453,453,,,,,,,,,,453,,,453", "453,453,453,453,453,453,453,453,453,,453,453,,453,453,453,,,,,,,,,,", ",,,,,,,,,453,,,453,,,453,,,,,,,453,,453,,,,,,,,453,,,,,453,453,453,453", "453,453,,461,,453,453,,,,461,461,461,453,453,461,461,461,,461,453,453", ",,,,,,,461,,,,,,,,,461,461,,461,461,461,461,461,,,,,,,,,,,,458,,,,,", ",458,458,458,,,458,458,458,,458,,,,,461,,,,,458,,461,,,,,461,461,458", "458,,458,458,458,458,458,,,,,,,,,,,,,461,,,,,,,,,,,,,461,,461,,,461", ",458,,,,,,,458,,,,,458,458,,,,,,,,,,,,,,,,,,,,,458,,,,,,,,,,,,,458,", "458,,,458,7,7,7,7,7,7,7,7,,,7,7,7,7,7,,,7,7,7,7,7,7,7,,,7,7,7,7,7,7", "7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,,,7,,,,,,,,7,7,,7,7,7,7,7,7,7,,,7", ",,,,7,7,7,7,,,,,,,,,,,,,7,7,,7,7,7,7,7,7,7,7,7,7,7,,,7,7,384,384,384", "384,384,384,384,384,,7,384,384,384,384,384,,,384,384,384,384,384,384", "384,,,384,384,384,384,384,384,384,384,384,384,384,384,384,384,384,384", "384,384,384,384,384,384,384,,,384,,,,,,,,384,384,,384,384,384,384,384", "384,384,,,384,,,,,384,384,384,384,,,,,,,,,,,,,384,384,,384,384,384,384", "384,384,384,384,384,384,384,,,384,384,6,6,6,6,6,6,6,6,,384,6,6,6,6,6", ",,6,6,6,6,6,6,6,,,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,,6", ",,,,,,,6,6,,6,6,6,6,6,6,6,,,6,,,,,6,6,6,6,,,,,,,,,,,,,6,6,,6,6,6,6,6", "6,6,6,6,6,6,,,6,6,380,380,380,380,380,380,380,380,,6,380,380,380,380", "380,,,380,380,380,380,380,380,380,,,380,380,380,380,380,380,380,380", "380,380,380,380,380,380,380,380,380,380,380,380,380,380,380,,,380,,", ",,,,,380,380,,380,380,380,380,380,380,380,,,380,,,,,380,380,380,380", ",,,,,,,,,,,,380,380,,380,380,380,380,380,380,380,380,380,380,380,,,380", "380,79,79,79,79,79,79,79,79,,380,79,79,79,79,79,,,79,79,79,79,79,79", "79,,,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79", "79,79,79,79,79,79,,,,,,,79,79,,79,79,79,79,79,79,79,,,79,,,,,79,79,79", "79,,,,,,,,,,,,,79,79,,79,79,79,79,79,79,79,79,79,79,79,,,79,65,65,65", "65,65,65,65,65,,,65,65,65,65,65,,,65,65,65,65,65,65,65,,,65,65,65,65", "65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65", ",,,,,,65,65,,65,65,65,65,65,65,65,,,65,,,,,65,65,65,65,,,,,,65,,,,,", ",65,65,,65,65,65,65,65,65,65,65,65,65,65,,,65,681,681,681,681,681,681", "681,681,,,681,681,681,681,681,,,681,681,681,681,681,681,681,,,681,681", "681,681,681,681,681,681,681,681,681,681,681,681,681,681,681,681,681", "681,681,681,681,,,681,,,,,,,,681,681,,681,681,681,681,681,681,681,,", "681,,,,,681,681,681,681,,,,,,,,,,,,,681,681,,681,681,681,681,681,681", "681,681,681,681,681,,,681,185,185,185,185,185,185,185,185,,,185,185", "185,185,185,,,185,185,185,185,185,185,185,,,185,185,185,185,185,185", "185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185", "185,185,185,185,,,,,,,185,185,,185,185,185,185,185,185,185,,,185,,,", ",185,185,185,185,,,,,,,,,,,,,185,185,,185,185,185,185,185,185,185,185", "185,185,185,254,254,185,,254,,,,,,,,254,254,,254,254,254,254,254,254", "254,,,254,,,,,254,254,254,254,,,,,,,,,,,,,254,254,,254,254,254,254,254", "254,254,254,254,254,254,255,255,254,,255,,,,,,,,255,255,,255,255,255", "255,255,255,255,,,255,,,,,255,255,255,255,,,,,,,,,,,,,255,255,,255,255", "255,255,255,255,255,255,255,255,255,737,737,255,,737,,,,,,,,737,737", ",737,737,737,737,737,737,737,,,737,,,,,737,737,737,737,,,,,,,,,,,,,737", "737,,737,737,737,737,737,737,737,737,737,737,737,844,844,737,,844,,", ",,,,,844,844,,844,844,844,844,844,844,844,,,844,,,,,844,844,844,844", ",,,,,844,,,,,,,844,844,,844,844,844,844,844,844,844,844,844,844,844", "845,845,844,,845,,,,,,,,845,845,,845,845,845,845,845,845,845,,,845,", ",,,845,845,845,845,,,,,,,,,,,,,845,845,,845,845,845,845,845,845,845", "845,845,845,845,493,493,845,,493,,,,,,,,493,493,,493,493,493,493,493", "493,493,,,493,,,,,493,493,493,493,,,,,,,,,,,,,493,493,,493,493,493,493", "493,493,493,493,493,493,493,492,492,493,,492,,,,,,,,492,492,,492,492", "492,492,492,492,492,,,492,,,,,492,492,492,492,,,,,,492,,,,,,,492,492", ",492,492,492,492,492,492,492,492,492,492,492,607,607,492,,607,,,,,,", ",607,607,,607,607,607,607,607,607,607,,,607,,,,,607,607,607,607,,,,", ",,,,,,,,607,607,,607,607,607,607,607,607,607,607,607,607,607,195,195", "607,,195,,,,,,,,195,195,,195,195,195,195,195,195,195,,,195,,,,,195,195", "195,195,,,,,,,,,,,,,195,195,,195,195,195,195,195,195,195,195,195,195", "195,194,194,195,,194,,,,,,,,194,194,,194,194,194,194,194,194,194,,,194", ",,,,194,194,194,194,,,,,,194,,,,,,,194,194,,194,194,194,194,194,194", "194,194,194,194,194,608,608,194,,608,,,,,,,,608,608,,608,608,608,608", "608,608,608,,,608,,,,,608,608,608,608,,,,,,,,,,,,,608,608,,608,608,608", "608,608,608,608,608,608,608,608,484,484,608,,484,,,,,,,,484,484,,484", "484,484,484,484,484,484,,,484,,,,,484,484,484,484,,,,,,,,,,,,,484,484", ",484,484,484,484,484,484,484,484,484,484,484,483,483,484,,483,,,,,,", ",483,483,,483,483,483,483,483,483,483,,,483,,,,,483,483,483,483,,,,", ",483,,,,,,,483,483,,483,483,483,483,483,483,483,483,483,483,483,663", "663,483,,663,,,,,,,,663,663,,663,663,663,663,663,663,663,,,663,,,,,663", "663,663,663,,,,,,,,,,,,,663,663,,663,663,663,663,663,663,663,663,663", "663,663,415,415,663,,415,,,,,,,,415,415,,415,415,415,415,415,415,415", ",,415,,,,,415,415,415,415,,,,,,415,,,,,,,415,415,,415,415,415,415,415", "415,415,415,415,415,415,416,416,415,,416,,,,,,,,416,416,,416,416,416", "416,416,416,416,,,416,,,,,416,416,416,416,,,,,,,,,,,,,416,416,,416,416", "416,416,416,416,416,416,416,416,416,665,665,416,,665,,,,,,,,665,665", ",665,665,665,665,665,665,665,,,665,,,,,665,665,665,665,,,,,,665,,,,", ",,665,665,,665,665,665,665,665,665,665,665,665,665,665,,,665"];

      racc_action_check = arr = ((_a = ((_b = __opal.Object._scope.Array) == null ? __opal.cm("Array") : _b)).$new || $mm('new')).call(_a, 21316, nil);

      idx = 0;

      ((_a = clist).$each || $mm('each')).call(_a, (TMP_3 = function(str) {

        var self = TMP_3._s || this, TMP_4, _a, _b;
        if (str == null) str = nil;

        return ((_a = ((_b = str).$split || $mm('split')).call(_b, ",", -1)).$each || $mm('each')).call(_a, (TMP_4 = function(i) {

          var self = TMP_4._s || this, _a, _b;
          if (i == null) i = nil;

          if ((_a = ((_b = i)['$empty?'] || $mm('empty?')).call(_b)) === false || _a === nil) {
            ((_a = arr)['$[]='] || $mm('[]=')).call(_a, idx, ((_b = i).$to_i || $mm('to_i')).call(_b))
          };
          return idx = ((_a = idx)['$+'] || $mm('+')).call(_a, 1);
        }, TMP_4._s = self, TMP_4))
      }, TMP_3._s = Grammar, TMP_3));

      racc_action_pointer = [-2, 1165, nil, 289, nil, 983, 19655, 19435, 1039, 1025, 1000, 992, 1036, 367, -62, 122, nil, 1730, 1852, 1108, 1076, nil, 2218, 2346, 2474, 373, 69, 2816, 2944, nil, 3070, 3192, 3314, nil, 969, 325, 1026, 298, 3924, 4046, 4168, 948, -13, nil, nil, nil, nil, nil, nil, nil, 4530, nil, 4663, 4785, 4913, -1, 2878, 5285, 5407, nil, nil, 5529, 2291, 932, nil, 19984, nil, nil, nil, nil, nil, -41, nil, nil, nil, nil, nil, 868, 865, 19875, nil, nil, nil, 6523, nil, nil, 6651, nil, nil, nil, nil, nil, nil, nil, nil, nil, 12, nil, 6901, nil, nil, nil, 7023, 7145, 7267, 7389, 7511, nil, 657, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, 20202, 847, nil, 7998, 8120, 8242, 8364, 8486, 8608, 20792, 20733, 8979, 9101, 9223, nil, 248, 15, 847, 111, 756, 796, 10077, nil, nil, 10199, 10321, 10443, 10565, 10687, 10809, 10931, 11053, 11175, 11297, 11419, 11541, 11663, 11785, 11907, 12029, 12151, 12273, 12395, 12517, 12639, 12761, 12883, 13005, 13127, 13249, 13371, nil, nil, nil, 986, nil, 748, 747, nil, 13859, 775, 14103, nil, nil, nil, nil, 14225, nil, nil, 20261, 20320, 737, 14713, 14841, nil, nil, nil, nil, nil, nil, nil, 14969, 739, 15220, 732, 681, 642, 15708, 15830, 370, 395, 713, 396, 663, 620, 8, nil, 652, 521, nil, nil, 626, 666, 665, 495, nil, 652, nil, 17667, nil, 17789, -29, nil, 305, 318, 542, 394, 510, nil, 338, nil, nil, 344, 2939, nil, nil, 451, 446, 427, nil, nil, 417, nil, nil, nil, nil, nil, nil, nil, 412, nil, nil, 289, 482, 74, 66, 18155, 17911, 370, 246, 148, 587, nil, 17057, nil, 16935, 492, 163, 182, 387, 583, -7, 171, 369, nil, 584, nil, nil, 15464, nil, 318, nil, 248, nil, 105, 619, 278, nil, 883, -43, nil, 155, nil, nil, nil, nil, nil, nil, 864, nil, nil, nil, nil, nil, nil, 19765, nil, nil, nil, 19545, 999, 1044, nil, nil, 492, nil, 9955, 1043, nil, 1029, nil, nil, 864, 833, 579, 403, 8853, nil, nil, nil, 8725, 612, 7865, nil, 7755, 6395, nil, 1608, nil, nil, 21087, 21146, 6267, -29, 5901, 5041, 4412, 4168, 4290, 857, 683, 135, 524, 570, 735, 4656, 4785, 4664, 2602, 4046, 4412, 4481, 3188, 3436, 3558, 3680, 3802, 3924, 1049, 1171, 3314, 3070, 1480, 156, nil, 120, nil, nil, 19137, nil, 248, nil, nil, 19309, nil, nil, 19255, -47, nil, 1029, 983, 864, 955, 1041, nil, nil, 370, 132, -5, 976, nil, 944, 888, nil, nil, nil, 866, 492, 20969, 20910, 398, 864, nil, nil, 620, 742, 986, 20615, 20556, 620, 1108, 942, 880, 763, nil, 1230, nil, nil, 1352, nil, nil, nil, nil, nil, 1974, 2602, 680, nil, 2502, nil, 738, nil, nil, 504, 2724, nil, nil, 3436, 296, nil, nil, 3558, 103, 120, 67, 57, 3680, nil, nil, -2, 158, nil, 543, nil, 33, 9345, nil, 2910, nil, nil, nil, 3, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, 167, nil, nil, nil, 847, nil, nil, nil, nil, nil, 9711, 970, 9833, 573, 13493, 13981, 1003, nil, nil, nil, 14347, 978, nil, 14469, -44, 75, 15087, 15948, 646, 248, 16075, nil, 2768, nil, 16319, 555, nil, 571, 16563, nil, 551, nil, nil, nil, nil, nil, 16685, nil, 544, 528, 20674, 20851, 16807, 1352, 485, nil, nil, 420, 17423, 17545, nil, 3, nil, 892, 322, -24, 98, 201, 527, 142, 2346, 219, 223, 1, 322, 18521, nil, nil, nil, 235, 349, nil, 245, 253, nil, nil, 269, nil, 307, 580, 447, 475, nil, 513, nil, nil, nil, nil, nil, 524, nil, 529, 19015, 18765, 702, nil, 21028, 18887, 21205, nil, nil, 18643, 205, -25, 18399, 18277, 2419, 164, 519, 520, 521, nil, 515, nil, 20093, 572, 1022, 18033, nil, nil, nil, 2218, 603, 17301, 17179, nil, 2096, nil, 1974, nil, nil, 1852, nil, 1730, 16441, 16197, 15586, 107, 1230, nil, 674, 771, nil, nil, 672, nil, nil, 698, 701, 777, 775, 15342, nil, 712, 817, 333, nil, 821, nil, 14591, 713, 765, nil, nil, nil, nil, 932, nil, nil, nil, 20379, nil, 852, nil, nil, 855, 13737, 13615, nil, nil, 62, 39, 359, nil, 803, 800, 9589, -50, nil, nil, 933, 934, 826, nil, 2752, nil, 488, nil, nil, 9467, nil, nil, nil, nil, nil, nil, nil, 846, 835, nil, 742, 7633, nil, nil, nil, 886, 857, nil, nil, nil, 6779, nil, nil, -7, 6145, nil, 870, 911, nil, 6023, nil, 1001, 1002, 5779, 5657, nil, nil, 1022, nil, 5163, nil, nil, 955, 921, 936, 1058, 933, nil, nil, 3205, nil, nil, nil, 4290, nil, 3802, 304, 330, 1029, 331, nil, nil, 78, nil, nil, 205, 2096, nil, 1095, nil, 245, nil, nil, nil, 1608, 1109, 1480, 20438, 20497, 397, 864, nil, nil, nil, 1125, nil, 1010, 1134, nil, 1055, 86, 70, 93, 620, 131, nil, nil, nil, 742, nil];

      racc_action_default = [-492, -494, -1, -481, -4, -5, -494, -494, -494, -494, -494, -494, -494, -494, -251, -31, -32, -494, -494, -37, -39, -40, -262, -299, -300, -44, -229, -229, -229, -56, -492, -60, -65, -66, -494, -423, -494, -494, -494, -494, -494, -483, -211, -244, -245, -246, -247, -248, -249, -250, -471, -253, -494, -492, -492, -268, -492, -494, -494, -273, -276, -481, -494, -285, -291, -494, -301, -302, -368, -369, -370, -371, -372, -492, -375, -492, -492, -492, -492, -492, -402, -408, -409, -412, -413, -414, -415, -416, -417, -418, -419, -420, -421, -422, -425, -426, -494, -3, -482, -488, -489, -490, -494, -494, -494, -494, -494, -7, -494, -90, -91, -92, -93, -94, -95, -96, -99, -100, -101, -102, -103, -104, -105, -106, -107, -108, -109, -110, -111, -112, -113, -114, -115, -116, -117, -118, -119, -120, -121, -122, -123, -124, -125, -126, -127, -128, -129, -130, -131, -132, -133, -134, -135, -136, -137, -138, -139, -140, -141, -142, -143, -144, -145, -146, -147, -148, -149, -150, -151, -152, -153, -154, -155, -156, -157, -158, -159, -160, -161, -162, -163, -164, -165, -166, -167, -494, -12, -97, -492, -492, -494, -494, -494, -492, -494, -494, -494, -494, -494, -35, -494, -423, -494, -251, -494, -494, -492, -36, -203, -494, -494, -494, -494, -494, -494, -494, -494, -494, -494, -494, -494, -494, -494, -494, -494, -494, -494, -494, -494, -494, -494, -494, -494, -494, -494, -494, -339, -341, -41, -212, -222, -493, -493, -226, -494, -237, -494, -262, -299, -300, -465, -494, -42, -43, -494, -494, -48, -492, -494, -267, -344, -351, -353, -54, -349, -55, -494, -56, -492, -494, -494, -61, -63, -492, -70, -494, -494, -77, -265, -483, -494, -303, -350, -494, -64, -68, -258, -410, -411, -494, -188, -189, -204, -494, -484, -492, -483, -213, -485, -485, -494, -485, -494, -462, -485, -269, -270, -494, -494, -314, -315, -459, -459, -459, -331, -332, -445, -441, -442, -443, -444, -446, -451, -452, -454, -455, -456, -494, -38, -494, -494, -494, -494, -481, -494, -482, -494, -323, -494, -288, -494, -90, -91, -127, -128, -144, -149, -156, -159, -294, -494, -423, -460, -494, -373, -494, -388, -494, -390, -494, -494, -494, -380, -494, -494, -386, -494, -401, -403, -404, -405, -406, 867, -6, -491, -13, -14, -15, -16, -17, -494, -9, -10, -11, -494, -494, -494, -20, -28, -168, -237, -494, -494, -21, -29, -30, -22, -170, -494, -472, -473, -229, -346, -474, -475, -472, -229, -473, -348, -477, -478, -27, -177, -33, -34, -494, -494, -492, -258, -494, -494, -494, -178, -179, -180, -181, -182, -183, -184, -185, -190, -191, -192, -193, -194, -195, -196, -197, -198, -199, -200, -201, -202, -205, -206, -207, -208, -494, -492, -223, -494, -236, -224, -494, -234, -494, -238, -468, -229, -472, -473, -229, -492, -49, -494, -483, -483, -493, -222, -230, -231, -494, -492, -492, -494, -264, -494, -57, -256, -69, -62, -494, -492, -494, -494, -76, -494, -410, -411, -494, -494, -494, -494, -494, -209, -494, -360, -494, -494, -214, -487, -486, -215, -487, -260, -464, -261, -463, -311, -492, -492, -494, -313, -494, -327, -494, -329, -330, -494, -494, -453, -457, -492, -304, -305, -306, -492, -494, -494, -494, -494, -492, -355, -282, -86, -494, -88, -494, -251, -494, -494, -292, -440, -296, -479, -480, -483, -374, -389, -392, -393, -395, -376, -391, -377, -378, -379, -494, -382, -384, -385, -494, -407, -8, -98, -18, -19, -494, -243, -494, -259, -494, -494, -50, -220, -221, -345, -494, -52, -347, -494, -472, -473, -472, -473, -494, -168, -494, -335, -494, -337, -492, -493, -235, -239, -494, -466, -494, -467, -45, -342, -46, -343, -492, -216, -494, -494, -494, -494, -494, -37, -494, -228, -232, -494, -492, -492, -263, -57, -67, -494, -472, -473, -492, -476, -75, -494, -176, -186, -187, -494, -492, -492, -254, -255, -239, -494, -494, -312, -459, -459, -447, -458, -459, -333, -494, -334, -494, -492, -307, -492, -274, -308, -309, -310, -277, -494, -280, -494, -494, -494, -86, -87, -494, -492, -494, -286, -427, -494, -494, -494, -492, -492, -440, -494, -459, -459, -459, -439, -445, -449, -494, -494, -494, -492, -381, -383, -387, -169, -241, -494, -494, -24, -172, -25, -173, -51, -26, -174, -53, -175, -494, -494, -494, -259, -210, -336, -494, -494, -225, -240, -494, -217, -218, -492, -492, -483, -494, -494, -233, -494, -494, -71, -266, -492, -321, -492, -361, -492, -362, -363, -316, -317, -494, -325, -326, -328, -494, -258, -494, -318, -319, -494, -492, -492, -279, -281, -494, -494, -86, -89, -476, -494, -492, -494, -429, -289, -494, -494, -483, -431, -494, -435, -494, -437, -438, -494, -297, -461, -394, -397, -398, -399, -400, -494, -242, -23, -171, -494, -338, -340, -47, -494, -493, -352, -354, -2, -492, -367, -322, -494, -494, -365, -459, -257, -271, -494, -272, -494, -494, -494, -492, -283, -259, -494, -428, -492, -293, -295, -494, -459, -459, -459, -494, -450, -448, -440, -396, -219, -227, -494, -366, -492, -78, -494, -494, -85, -364, -324, -494, -275, -278, -492, -492, -287, -494, -430, -494, -433, -434, -436, -492, -360, -492, -494, -494, -84, -492, -356, -357, -358, -494, -290, -459, -494, -359, -494, -472, -473, -476, -83, -492, -284, -432, -298, -79, -320];

      clist = ["26,293,300,336,112,112,349,452,466,281,281,522,526,388,395,2,497,26", "26,530,368,463,26,26,26,299,304,672,314,631,26,256,263,265,314,199,675", "641,97,207,241,241,241,115,115,270,284,644,401,406,107,187,26,309,269", "814,662,26,26,739,796,26,724,112,240,240,240,260,264,596,296,267,301", "651,655,328,328,112,640,328,643,742,614,350,514,516,517,373,543,593", "329,330,593,295,333,379,334,539,26,541,331,35,26,26,26,26,26,677,458", "461,612,499,502,101,505,743,332,507,548,596,328,328,328,328,558,744", "368,600,660,814,602,35,274,274,591,375,376,377,378,357,359,833,398,366", "338,753,540,806,603,340,238,252,253,671,542,681,816,307,615,616,508", "306,469,666,639,299,351,675,271,352,380,101,186,448,472,473,848,659", "728,790,354,355,302,112,750,361,557,98,26,26,26,26,26,410,364,769,26", "26,26,35,683,684,759,385,386,810,26,35,392,392,305,387,393,396,656,413", "414,411,786,1,,270,,,,,,,,,,,,,,,,,677,486,,,,,,,,,593,,281,,,,,,498", "26,26,,,,,849,,644,26,,26,401,406,,866,26,,467,241,,,,314,14,,270,241", "641,480,,270,35,35,,476,,802,26,,481,793,468,240,841,,,,511,,35,240", "267,675,14,277,277,267,,281,,281,,686,260,,264,,,811,,812,,,26,26,,", ",,623,696,,,,,699,,,623,,,328,328,,,26,,,,709,,,716,,,,527,528,585,10", "529,35,,546,,274,35,855,,,112,14,,677,112,600,602,465,470,14,,299,12", ",757,758,474,,35,10,,,,,853,,,,573,,,,,578,734,735,410,,736,115,,,12", "115,592,,563,605,606,,564,801,,620,,,,,,,,351,,351,575,101,,,,579,762", "764,765,,,,299,729,,,,593,,714,715,599,,10,601,,,14,14,26,822,10,804", ",,,,,,,410,,,,,14,12,296,,410,,,,26,12,281,,575,,,575,,,,682,,,26,26", "847,,630,678,,,850,,623,,,26,,636,637,26,835,,,707,26,,,,,,648,,,26", "650,,,,,658,,819,14,,,,277,14,10,10,,670,,,314,854,,,,828,,,,,26,26", "10,,,14,26,12,12,,592,,838,839,840,,,,,,26,692,694,,,12,,697,,,,,26", ",,708,,,26,35,35,,752,,26,26,,711,538,351,538,767,35,,,863,35,,,720", "721,35,,,10,299,652,652,,10,,,,,678,,,,667,392,717,,,,,,,12,,26,410", "10,12,575,,,579,26,,,26,26,,,,782,747,328,112,,,,,26,12,328,,,,,26,35", "748,,,,,623,774,,754,,,35,,,,,,,,776,,,,35,35,,809,,,,,,,26,,,,,,,,", "410,783,,,,,789,,26,26,,,,,,,,,26,,575,575,,798,799,,,,,,,,,,281,,,35", "35,,,,,,755,756,,,,760,35,,26,678,,14,14,856,,,,26,,,,538,26,821,14", ",,26,14,,,,,14,,328,299,832,,,,,,26,,,,,35,,829,,,,26,,,,842,,,,26,", "410,35,35,,26,851,,,,,,35,,,,652,,,,861,,805,,,,,,,,14,,,,10,10,,,,", ",,14,,,,35,10,,,823,10,,,14,14,10,12,12,,35,,,,,35,,,,,12,,,,12,,,,", "12,,35,,,,,,,,,,,35,,,,,,,,35,,,,,,35,,,,14,14,,,,,10,,,,,,773,14,,", ",,10,,,,,,,,,,,12,10,10,,,,,,,,,,12,,,13,,,,,,,,,12,12,14,,,,,,200,200", ",,,200,200,200,,,,14,14,13,275,275,,,,,,14,,,,10,10,,,,,,,,,200,,,10", ",200,200,,,200,,,,12,12,,,,,,14,,,,826,,12,,,,,,,,14,,,,,14,,,,,,10", "13,,,,200,200,200,200,13,14,,,,,,,10,10,,,14,,12,,,,10,,14,,,,,,14,", ",,,12,12,,,,,,,,,12,,,,,,,,,,,10,,,,827,,,,,,,,,,10,,,,,10,,,,12,,,", ",,,13,13,200,200,200,10,,12,200,200,200,,12,,,208,10,,13,239,239,239", ",,10,,,,12,,10,,,,,290,291,292,,12,,,,,,,,12,,,239,239,,12,,,,,,,,,", ",,,,,,200,200,,,,,,,,200,,13,,,,275,13,,,,,,,,,,,297,303,,310,,,,,,", ",13,,,,,,,,,356,,358,358,362,365,358,,,,,,,,,,,,,,,,,,,,,200,200,,,", ",,537,,537,,,,,,,,,,,,,200,,,,,,,,,,,,,,,,,,,,,,389,239,397,239,,,412", ",,390,394,,,,,,,,,208,422,423,424,425,426,427,428,429,430,431,432,433", "434,435,436,437,438,439,440,441,442,443,444,445,446,447,,,,297,,,,,239", ",239,,,,,239,,454,,456,,239,239,,457,,,,,,239,,,,,,,,,,,,,,,,,,,,200", ",,,,,,494,,,,,,,,,,464,,,,,,,200,,,,,,,,,,,,,,13,13,,,,,,,,,646,,,13", ",,,13,,,,,13,,,,,,,,,200,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,200,200,,,,239", "200,,,,,,,,568,,,,,,13,,,,,,,,,,,239,13,412,586,397,,,200,,,,,,13,13", ",,,,,,,,,,,,,,,574,,,239,,,239,,239,,,,594,,,597,297,598,,,,,,,610,", ",,200,,,,,611,,239,200,,,13,13,,627,628,629,,,588,,,,,13,239,,,239,574", ",200,574,588,635,,,597,,,,,,588,588,,,,,,,,,297,,,,,,,,,,,,,13,,,,,", ",,,,,,,,,,,13,13,,,,,,,,688,13,239,,693,695,,,,,698,689,,700,,,,,,,705", ",,,,,,,239,,,,,,,13,,710,,824,,,239,,200,,,,,13,,594,,,13,,,,,,,,,,", "239,,,,,13,,,,727,,,,,,,13,,,,,,,,13,,,239,,,13,,239,,,,390,574,,,,", ",,,725,730,,,,,,,,,,,,239,777,,,725,,725,,,775,,693,695,698,,,,,,,297", ",,,,,,,239,,,,,,,,,390,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,574,574,,,,,239", ",,,788,,,,792,815,,,777,,,,,,,,,,,,,,,,,,,,,,239,,,,,,,,,635,,,,,,,", ",,,239,,,,,,,,,635,,,,,,,,,,,,,,239,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,", ",,725,,,,,,,,,,,297,,,,,,,,,,,,,,,,,,725"];

      racc_goto_table = arr = ((_a = ((_b = __opal.Object._scope.Array) == null ? __opal.cm("Array") : _b)).$new || $mm('new')).call(_a, 2089, nil);

      idx = 0;

      ((_a = clist).$each || $mm('each')).call(_a, (TMP_5 = function(str) {

        var self = TMP_5._s || this, TMP_6, _a, _b;
        if (str == null) str = nil;

        return ((_a = ((_b = str).$split || $mm('split')).call(_b, ",", -1)).$each || $mm('each')).call(_a, (TMP_6 = function(i) {

          var self = TMP_6._s || this, _a, _b;
          if (i == null) i = nil;

          if ((_a = ((_b = i)['$empty?'] || $mm('empty?')).call(_b)) === false || _a === nil) {
            ((_a = arr)['$[]='] || $mm('[]=')).call(_a, idx, ((_b = i).$to_i || $mm('to_i')).call(_b))
          };
          return idx = ((_a = idx)['$+'] || $mm('+')).call(_a, 1);
        }, TMP_6._s = self, TMP_6))
      }, TMP_5._s = Grammar, TMP_5));

      clist = ["35,48,20,76,45,45,44,55,30,49,49,72,72,22,22,2,3,35,35,75,44,33,35,35", "35,52,52,79,106,4,35,32,32,32,106,24,102,133,8,16,50,50,50,47,47,2,40", "107,31,31,12,12,35,100,37,134,42,35,35,73,101,35,5,45,27,27,27,53,53", "137,24,36,50,74,74,24,24,45,104,24,104,5,57,80,105,105,105,10,81,56", "14,14,56,82,14,10,8,43,35,43,83,41,35,35,35,35,35,104,31,31,56,51,51", "78,51,84,85,51,125,137,24,24,24,24,125,86,44,54,87,134,54,41,41,41,34", "14,14,14,14,122,122,88,20,122,89,90,91,92,34,93,29,29,29,94,95,96,97", "98,34,34,99,71,58,77,103,52,41,102,39,67,25,78,13,109,111,112,113,114", "115,116,120,121,68,45,42,123,124,11,35,35,35,35,35,45,126,127,35,35", "35,41,128,129,131,2,2,132,35,41,50,50,69,16,16,16,75,24,24,16,6,1,,2", ",,,,,,,,,,,,,,,,104,48,,,,,,,,,56,,49,,,,,,48,35,35,,,,,5,,107,35,,35", "31,31,,73,35,,50,50,,,,106,21,,2,50,133,40,,2,41,41,,37,,74,35,,37,104", "27,27,79,,,,100,,41,27,36,102,21,21,21,36,,49,,49,,125,53,,53,,,104", ",104,,,35,35,,,,,31,33,,,,,33,,,31,,,24,24,,,35,,,,55,,,30,,,,14,14", "20,15,8,41,,24,,41,41,4,,,45,21,,104,45,54,54,29,29,21,,52,18,,3,3,29", ",41,15,,,,,104,,,,32,,,,,32,105,105,45,,105,47,,,18,47,52,,12,48,48", ",12,72,,20,,,,,,,,41,,41,53,78,,,,53,105,105,105,,,,52,22,,,,56,,31", "31,32,,15,32,,,21,21,35,72,15,3,,,,,,,,45,,,,,21,18,24,,45,,,,35,18", "49,,53,,,53,,,,48,,,35,35,72,,24,106,,,75,,31,,,35,,2,2,35,3,,,76,35", ",,,,,2,,,35,2,,,,,2,,55,21,,,,21,21,15,15,,24,,,106,3,,,,105,,,,,35", "35,15,,,21,35,18,18,,52,,105,105,105,,,,,,35,16,16,,,18,,16,,,,,35,", ",2,,,35,41,41,,20,,35,35,,2,21,41,21,44,41,,,105,41,,,2,2,41,,,15,52", "78,78,,15,,,,,106,,,,78,50,27,,,,,,,18,,35,45,15,18,53,,,53,35,,,35", "35,,,,48,50,24,45,,,,,35,18,24,,,,,35,41,14,,,,,31,2,,14,,,41,,,,,,", ",16,,,,41,41,,48,,,,,,,35,,,,,,,,,45,50,,,,,2,,35,35,,,,,,,,,35,,53", "53,,2,2,,,,,,,,,,49,,,41,41,,,,,,78,78,,,,78,41,,35,106,,21,21,20,,", ",35,,,,21,35,2,21,,,35,21,,,,,21,,24,52,2,,,,,,35,,,,,41,,14,,,,35,", ",,2,,,,35,,45,41,41,,35,2,,,,,,41,,,,78,,,,2,,78,,,,,,,,21,,,,15,15", ",,,,,,21,,,,41,15,,,41,15,,,21,21,15,18,18,,41,,,,,41,,,,,18,,,,18,", ",,,18,,41,,,,,,,,,,,41,,,,,,,,41,,,,,,41,,,,21,21,,,,,15,,,,,,21,21", ",,,,15,,,,,,,,,,,18,15,15,,,,,,,,,,18,,,19,,,,,,,,,18,18,21,,,,,,19", "19,,,,19,19,19,,,,21,21,19,19,19,,,,,,21,,,,15,15,,,,,,,,,19,,,15,,19", "19,,,19,,,,18,18,,,,,,21,,,,21,,18,,,,,,,,21,,,,,21,,,,,,15,19,,,,19", "19,19,19,19,21,,,,,,,15,15,,,21,,18,,,,15,,21,,,,,,21,,,,,18,18,,,,", ",,,,18,,,,,,,,,,,15,,,,15,,,,,,,,,,15,,,,,15,,,,18,,,,,,,19,19,19,19", "19,15,,18,19,19,19,,18,,,26,15,,19,26,26,26,,,15,,,,18,,15,,,,,26,26", "26,,18,,,,,,,,18,,,26,26,,18,,,,,,,,,,,,,,,,19,19,,,,,,,,19,,19,,,,19", "19,,,,,,,,,,,9,9,,9,,,,,,,,19,,,,,,,,,9,,9,9,9,9,9,,,,,,,,,,,,,,,,,", ",,,19,19,,,,,,19,,19,,,,,,,,,,,,,19,,,,,,,,,,,,,,,,,,,,,,26,26,26,26", ",,26,,,23,23,,,,,,,,,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26", "26,26,26,26,26,26,26,26,26,26,26,,,,9,,,,,26,,26,,,,,26,,23,,23,,26", "26,,23,,,,,,26,,,,,,,,,,,,,,,,,,,,19,,,,,,,26,,,,,,,,,,9,,,,,,,19,,", ",,,,,,,,,,,19,19,,,,,,,,,19,,,19,,,,19,,,,,19,,,,,,,,,19,,,,,,,,,,,", ",,,,,,,,,,,,,,,,,,,19,19,,,,26,19,,,,,,,,23,,,,,,19,,,,,,,,,,,26,19", "26,26,26,,,19,,,,,,19,19,,,,,,,,,,,,,,,,9,,,26,,,26,,26,,,,23,,,23,9", "23,,,,,,,26,,,,19,,,,,23,,26,19,,,19,19,,26,26,26,,,9,,,,,19,26,,,26", "9,,19,9,9,23,,,23,,,,,,9,9,,,,,,,,,9,,,,,,,,,,,,,19,,,,,,,,,,,,,,,,", "19,19,,,,,,,,26,19,26,,26,26,,,,,26,23,,26,,,,,,,26,,,,,,,,26,,,,,,", "19,,23,,19,,,26,,19,,,,,19,,23,,,19,,,,,,,,,,,26,,,,,19,,,,23,,,,,,", "19,,,,,,,,19,,,26,,,19,,26,,,,23,9,,,,,,,,9,9,,,,,,,,,,,,26,26,,,9,", "9,,,23,,26,26,26,,,,,,,9,,,,,,,,26,,,,,,,,,23,,,,,,,,,,,,,,,,,,,,,,", ",,,,,,,,,,9,9,,,,,26,,,,9,,,,9,23,,,26,,,,,,,,,,,,,,,,,,,,,,26,,,,,", ",,,23,,,,,,,,,,,26,,,,,,,,,23,,,,,,,,,,,,,,26,,,,,,,,,,,,,,,,,,,,,,", ",,,,,,,,,,,,9,,,,,,,,,,,9,,,,,,,,,,,,,,,,,,9"];

      racc_goto_check = arr = ((_a = ((_b = __opal.Object._scope.Array) == null ? __opal.cm("Array") : _b)).$new || $mm('new')).call(_a, 2089, nil);

      idx = 0;

      ((_a = clist).$each || $mm('each')).call(_a, (TMP_7 = function(str) {

        var self = TMP_7._s || this, TMP_8, _a, _b;
        if (str == null) str = nil;

        return ((_a = ((_b = str).$split || $mm('split')).call(_b, ",", -1)).$each || $mm('each')).call(_a, (TMP_8 = function(i) {

          var self = TMP_8._s || this, _a, _b;
          if (i == null) i = nil;

          if ((_a = ((_b = i)['$empty?'] || $mm('empty?')).call(_b)) === false || _a === nil) {
            ((_a = arr)['$[]='] || $mm('[]=')).call(_a, idx, ((_b = i).$to_i || $mm('to_i')).call(_b))
          };
          return idx = ((_a = idx)['$+'] || $mm('+')).call(_a, 1);
        }, TMP_8._s = self, TMP_8))
      }, TMP_7._s = Grammar, TMP_7));

      racc_goto_pointer = [nil, 219, 15, -279, -467, -569, -506, nil, 35, 1227, -11, 184, 44, 165, 33, 367, 21, nil, 390, 996, -51, 281, -177, 1190, 18, 63, 1181, 42, nil, 128, -249, -146, 5, -235, -314, 0, 41, 24, nil, 137, 14, 101, -479, -241, -59, -2, nil, 37, -40, -22, 18, -187, -28, 41, -331, -235, -361, -389, -96, nil, nil, nil, nil, nil, nil, nil, nil, 104, 128, 155, nil, 105, -318, -589, -454, -315, -59, -376, 110, -515, 18, -262, 42, 41, -536, 56, -530, -405, -661, 81, -521, -193, -609, 85, -388, -195, -388, -611, 101, -147, -3, -681, -506, -349, -435, -227, -28, -468, nil, -63, nil, -87, -87, -656, -355, -454, -549, nil, nil, nil, 109, 108, 64, 108, -175, -237, 116, -488, -350, -350, nil, -471, -556, -476, -708, nil, nil, -384];

      racc_goto_default = [nil, nil, 496, nil, nil, 740, nil, 3, nil, 4, 5, 335, nil, nil, nil, 204, 16, 11, 205, 289, nil, 203, nil, 245, 15, nil, 19, 20, 21, nil, 25, 626, nil, nil, nil, 280, 29, nil, 31, 34, 33, 201, 536, nil, 114, 404, 113, 69, nil, 42, 298, nil, 242, 402, 576, 449, 243, nil, nil, 258, 451, 43, 44, 45, 46, 47, 48, 49, nil, 259, 55, nil, nil, nil, nil, nil, nil, nil, 523, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, 337, nil, 311, 312, 313, nil, 642, 315, 237, nil, 408, nil, nil, nil, nil, nil, nil, 68, 70, 71, 72, nil, nil, nil, nil, 553, nil, nil, nil, nil, 367, 674, 676, 321, 680, 324, 327, 250];

      racc_reduce_table = [0, 0, "racc_error", 1, 138, "_reduce_1", 4, 140, "_reduce_2", 2, 139, "_reduce_3", 1, 144, "_reduce_4", 1, 144, "_reduce_5", 3, 144, "_reduce_6", 0, 162, "_reduce_7", 4, 147, "_reduce_8", 3, 147, "_reduce_9", 3, 147, "_reduce_none", 3, 147, "_reduce_11", 2, 147, "_reduce_12", 3, 147, "_reduce_13", 3, 147, "_reduce_14", 3, 147, "_reduce_15", 3, 147, "_reduce_16", 3, 147, "_reduce_none", 4, 147, "_reduce_none", 4, 147, "_reduce_none", 3, 147, "_reduce_20", 3, 147, "_reduce_21", 3, 147, "_reduce_22", 6, 147, "_reduce_none", 5, 147, "_reduce_24", 5, 147, "_reduce_none", 5, 147, "_reduce_none", 3, 147, "_reduce_none", 3, 147, "_reduce_28", 3, 147, "_reduce_29", 3, 147, "_reduce_30", 1, 147, "_reduce_none", 1, 161, "_reduce_none", 3, 161, "_reduce_33", 3, 161, "_reduce_34", 2, 161, "_reduce_35", 2, 161, "_reduce_36", 1, 161, "_reduce_none", 1, 151, "_reduce_none", 1, 153, "_reduce_none", 1, 153, "_reduce_none", 2, 153, "_reduce_41", 2, 153, "_reduce_42", 2, 153, "_reduce_43", 1, 165, "_reduce_none", 4, 165, "_reduce_none", 4, 165, "_reduce_none", 4, 170, "_reduce_none", 2, 164, "_reduce_48", 3, 164, "_reduce_none", 4, 164, "_reduce_50", 5, 164, "_reduce_none", 4, 164, "_reduce_52", 5, 164, "_reduce_none", 2, 164, "_reduce_54", 2, 164, "_reduce_55", 1, 154, "_reduce_56", 3, 154, "_reduce_57", 1, 174, "_reduce_58", 3, 174, "_reduce_59", 1, 173, "_reduce_60", 2, 173, "_reduce_61", 3, 173, "_reduce_62", 2, 173, "_reduce_63", 2, 173, "_reduce_64", 1, 173, "_reduce_65", 1, 176, "_reduce_66", 3, 176, "_reduce_67", 2, 175, "_reduce_68", 3, 175, "_reduce_69", 1, 177, "_reduce_70", 4, 177, "_reduce_none", 3, 177, "_reduce_none", 3, 177, "_reduce_none", 3, 177, "_reduce_none", 3, 177, "_reduce_none", 2, 177, "_reduce_none", 1, 177, "_reduce_none", 1, 152, "_reduce_78", 4, 152, "_reduce_79", 3, 152, "_reduce_80", 3, 152, "_reduce_81", 3, 152, "_reduce_82", 3, 152, "_reduce_none", 2, 152, "_reduce_none", 1, 152, "_reduce_none", 1, 179, "_reduce_none", 2, 180, "_reduce_87", 1, 180, "_reduce_88", 3, 180, "_reduce_89", 1, 181, "_reduce_none", 1, 181, "_reduce_none", 1, 181, "_reduce_none", 1, 181, "_reduce_93", 1, 181, "_reduce_94", 1, 149, "_reduce_95", 1, 149, "_reduce_96", 1, 150, "_reduce_97", 3, 150, "_reduce_98", 1, 182, "_reduce_none", 1, 182, "_reduce_none", 1, 182, "_reduce_none", 1, 182, "_reduce_none", 1, 182, "_reduce_none", 1, 182, "_reduce_none", 1, 182, "_reduce_none", 1, 182, "_reduce_none", 1, 182, "_reduce_none", 1, 182, "_reduce_none", 1, 182, "_reduce_none", 1, 182, "_reduce_none", 1, 182, "_reduce_none", 1, 182, "_reduce_none", 1, 182, "_reduce_none", 1, 182, "_reduce_none", 1, 182, "_reduce_none", 1, 182, "_reduce_none", 1, 182, "_reduce_none", 1, 182, "_reduce_none", 1, 182, "_reduce_none", 1, 182, "_reduce_none", 1, 182, "_reduce_none", 1, 182, "_reduce_none", 1, 182, "_reduce_none", 1, 182, "_reduce_none", 1, 182, "_reduce_none", 1, 182, "_reduce_none", 1, 183, "_reduce_none", 1, 183, "_reduce_none", 1, 183, "_reduce_none", 1, 183, "_reduce_none", 1, 183, "_reduce_none", 1, 183, "_reduce_none", 1, 183, "_reduce_none", 1, 183, "_reduce_none", 1, 183, "_reduce_none", 1, 183, "_reduce_none", 1, 183, "_reduce_none", 1, 183, "_reduce_none", 1, 183, "_reduce_none", 1, 183, "_reduce_none", 1, 183, "_reduce_none", 1, 183, "_reduce_none", 1, 183, "_reduce_none", 1, 183, "_reduce_none", 1, 183, "_reduce_none", 1, 183, "_reduce_none", 1, 183, "_reduce_none", 1, 183, "_reduce_none", 1, 183, "_reduce_none", 1, 183, "_reduce_none", 1, 183, "_reduce_none", 1, 183, "_reduce_none", 1, 183, "_reduce_none", 1, 183, "_reduce_none", 1, 183, "_reduce_none", 1, 183, "_reduce_none", 1, 183, "_reduce_none", 1, 183, "_reduce_none", 1, 183, "_reduce_none", 1, 183, "_reduce_none", 1, 183, "_reduce_none", 1, 183, "_reduce_none", 1, 183, "_reduce_none", 1, 183, "_reduce_none", 1, 183, "_reduce_none", 1, 183, "_reduce_none", 1, 183, "_reduce_none", 3, 163, "_reduce_168", 5, 163, "_reduce_none", 3, 163, "_reduce_170", 6, 163, "_reduce_171", 5, 163, "_reduce_172", 5, 163, "_reduce_none", 5, 163, "_reduce_none", 5, 163, "_reduce_none", 4, 163, "_reduce_none", 3, 163, "_reduce_none", 3, 163, "_reduce_178", 3, 163, "_reduce_179", 3, 163, "_reduce_180", 3, 163, "_reduce_181", 3, 163, "_reduce_182", 3, 163, "_reduce_183", 3, 163, "_reduce_184", 3, 163, "_reduce_185", 4, 163, "_reduce_none", 4, 163, "_reduce_none", 2, 163, "_reduce_188", 2, 163, "_reduce_189", 3, 163, "_reduce_190", 3, 163, "_reduce_191", 3, 163, "_reduce_192", 3, 163, "_reduce_193", 3, 163, "_reduce_194", 3, 163, "_reduce_195", 3, 163, "_reduce_196", 3, 163, "_reduce_197", 3, 163, "_reduce_198", 3, 163, "_reduce_199", 3, 163, "_reduce_200", 3, 163, "_reduce_201", 3, 163, "_reduce_202", 2, 163, "_reduce_203", 2, 163, "_reduce_204", 3, 163, "_reduce_205", 3, 163, "_reduce_206", 3, 163, "_reduce_207", 3, 163, "_reduce_208", 3, 163, "_reduce_209", 5, 163, "_reduce_210", 1, 163, "_reduce_none", 1, 160, "_reduce_none", 1, 157, "_reduce_213", 2, 157, "_reduce_214", 2, 157, "_reduce_215", 3, 190, "_reduce_216", 4, 190, "_reduce_217", 4, 190, "_reduce_none", 6, 190, "_reduce_none", 1, 191, "_reduce_none", 1, 191, "_reduce_none", 1, 166, "_reduce_222", 2, 166, "_reduce_223", 2, 166, "_reduce_224", 4, 166, "_reduce_225", 1, 166, "_reduce_226", 4, 194, "_reduce_none", 1, 194, "_reduce_none", 0, 196, "_reduce_229", 2, 169, "_reduce_230", 1, 195, "_reduce_none", 2, 195, "_reduce_232", 3, 195, "_reduce_233", 2, 193, "_reduce_234", 2, 192, "_reduce_235", 1, 192, "_reduce_236", 1, 187, "_reduce_237", 2, 187, "_reduce_238", 3, 187, "_reduce_239", 4, 187, "_reduce_240", 3, 159, "_reduce_241", 4, 159, "_reduce_none", 2, 159, "_reduce_243", 1, 186, "_reduce_none", 1, 186, "_reduce_none", 1, 186, "_reduce_none", 1, 186, "_reduce_none", 1, 186, "_reduce_none", 1, 186, "_reduce_none", 1, 186, "_reduce_none", 1, 186, "_reduce_none", 1, 186, "_reduce_none", 0, 219, "_reduce_253", 4, 186, "_reduce_254", 4, 186, "_reduce_255", 3, 186, "_reduce_256", 3, 186, "_reduce_257", 2, 186, "_reduce_258", 4, 186, "_reduce_259", 3, 186, "_reduce_260", 3, 186, "_reduce_261", 1, 186, "_reduce_262", 4, 186, "_reduce_263", 3, 186, "_reduce_264", 1, 186, "_reduce_265", 5, 186, "_reduce_266", 2, 186, "_reduce_267", 1, 186, "_reduce_none", 2, 186, "_reduce_269", 2, 186, "_reduce_270", 6, 186, "_reduce_271", 6, 186, "_reduce_272", 0, 220, "_reduce_273", 0, 221, "_reduce_274", 7, 186, "_reduce_275", 0, 222, "_reduce_276", 0, 223, "_reduce_277", 7, 186, "_reduce_278", 5, 186, "_reduce_279", 4, 186, "_reduce_280", 5, 186, "_reduce_281", 0, 224, "_reduce_282", 0, 225, "_reduce_283", 9, 186, "_reduce_none", 0, 226, "_reduce_285", 0, 227, "_reduce_286", 7, 186, "_reduce_287", 0, 228, "_reduce_288", 0, 229, "_reduce_289", 8, 186, "_reduce_290", 0, 230, "_reduce_291", 0, 231, "_reduce_292", 6, 186, "_reduce_293", 0, 232, "_reduce_294", 6, 186, "_reduce_295", 0, 233, "_reduce_296", 0, 234, "_reduce_297", 9, 186, "_reduce_298", 1, 186, "_reduce_299", 1, 186, "_reduce_300", 1, 186, "_reduce_301", 1, 186, "_reduce_none", 1, 156, "_reduce_none", 1, 209, "_reduce_none", 1, 209, "_reduce_none", 1, 209, "_reduce_none", 2, 209, "_reduce_none", 1, 211, "_reduce_none", 1, 211, "_reduce_none", 1, 211, "_reduce_none", 2, 208, "_reduce_311", 3, 235, "_reduce_312", 2, 235, "_reduce_313", 1, 235, "_reduce_none", 1, 235, "_reduce_none", 3, 236, "_reduce_316", 3, 236, "_reduce_317", 1, 210, "_reduce_318", 0, 238, "_reduce_319", 6, 210, "_reduce_320", 1, 142, "_reduce_none", 2, 142, "_reduce_322", 1, 213, "_reduce_323", 6, 237, "_reduce_324", 4, 237, "_reduce_325", 4, 237, "_reduce_326", 2, 237, "_reduce_327", 4, 237, "_reduce_328", 2, 237, "_reduce_329", 2, 237, "_reduce_330", 1, 237, "_reduce_331", 1, 240, "_reduce_332", 3, 240, "_reduce_333", 3, 244, "_reduce_334", 1, 171, "_reduce_none", 2, 171, "_reduce_336", 1, 171, "_reduce_337", 3, 171, "_reduce_338", 0, 246, "_reduce_339", 5, 245, "_reduce_340", 2, 167, "_reduce_341", 4, 167, "_reduce_none", 4, 167, "_reduce_none", 2, 207, "_reduce_344", 4, 207, "_reduce_345", 3, 207, "_reduce_346", 4, 207, "_reduce_347", 3, 207, "_reduce_348", 2, 207, "_reduce_349", 1, 207, "_reduce_350", 0, 248, "_reduce_351", 5, 206, "_reduce_352", 0, 249, "_reduce_353", 5, 206, "_reduce_354", 0, 251, "_reduce_355", 6, 212, "_reduce_356", 1, 250, "_reduce_357", 1, 250, "_reduce_none", 6, 141, "_reduce_359", 0, 141, "_reduce_360", 1, 252, "_reduce_361", 1, 252, "_reduce_none", 1, 252, "_reduce_none", 2, 253, "_reduce_364", 1, 253, "_reduce_365", 2, 143, "_reduce_366", 1, 143, "_reduce_none", 1, 198, "_reduce_368", 1, 198, "_reduce_369", 1, 198, "_reduce_none", 1, 199, "_reduce_371", 1, 256, "_reduce_none", 2, 256, "_reduce_none", 3, 257, "_reduce_374", 1, 257, "_reduce_375", 3, 200, "_reduce_376", 3, 201, "_reduce_377", 3, 202, "_reduce_378", 3, 202, "_reduce_379", 1, 260, "_reduce_380", 3, 260, "_reduce_381", 1, 261, "_reduce_382", 2, 261, "_reduce_383", 3, 203, "_reduce_384", 3, 203, "_reduce_385", 1, 263, "_reduce_386", 3, 263, "_reduce_387", 1, 258, "_reduce_388", 2, 258, "_reduce_389", 1, 259, "_reduce_390", 2, 259, "_reduce_391", 1, 262, "_reduce_392", 0, 265, "_reduce_393", 3, 262, "_reduce_394", 0, 266, "_reduce_395", 4, 262, "_reduce_396", 1, 264, "_reduce_397", 1, 264, "_reduce_398", 1, 264, "_reduce_399", 1, 264, "_reduce_none", 2, 184, "_reduce_401", 1, 184, "_reduce_none", 1, 267, "_reduce_none", 1, 267, "_reduce_none", 1, 267, "_reduce_none", 1, 267, "_reduce_none", 3, 255, "_reduce_407", 1, 254, "_reduce_none", 1, 254, "_reduce_none", 2, 254, "_reduce_none", 2, 254, "_reduce_none", 1, 178, "_reduce_412", 1, 178, "_reduce_413", 1, 178, "_reduce_414", 1, 178, "_reduce_415", 1, 178, "_reduce_416", 1, 178, "_reduce_417", 1, 178, "_reduce_418", 1, 178, "_reduce_419", 1, 178, "_reduce_420", 1, 178, "_reduce_421", 1, 178, "_reduce_422", 1, 204, "_reduce_423", 1, 155, "_reduce_424", 1, 158, "_reduce_none", 1, 158, "_reduce_none", 1, 214, "_reduce_427", 3, 214, "_reduce_428", 2, 214, "_reduce_429", 4, 216, "_reduce_430", 2, 216, "_reduce_431", 6, 268, "_reduce_432", 4, 268, "_reduce_433", 4, 268, "_reduce_434", 2, 268, "_reduce_435", 4, 268, "_reduce_436", 2, 268, "_reduce_437", 2, 268, "_reduce_438", 1, 268, "_reduce_439", 0, 268, "_reduce_440", 1, 270, "_reduce_441", 1, 270, "_reduce_442", 1, 270, "_reduce_443", 1, 270, "_reduce_444", 1, 270, "_reduce_445", 1, 239, "_reduce_446", 3, 239, "_reduce_447", 3, 271, "_reduce_448", 1, 269, "_reduce_449", 3, 269, "_reduce_450", 1, 272, "_reduce_none", 1, 272, "_reduce_none", 2, 241, "_reduce_453", 1, 241, "_reduce_454", 1, 273, "_reduce_none", 1, 273, "_reduce_none", 2, 243, "_reduce_457", 2, 242, "_reduce_458", 0, 242, "_reduce_459", 1, 217, "_reduce_460", 4, 217, "_reduce_461", 1, 205, "_reduce_462", 2, 205, "_reduce_463", 2, 205, "_reduce_464", 1, 189, "_reduce_465", 3, 189, "_reduce_466", 3, 274, "_reduce_467", 2, 274, "_reduce_468", 1, 172, "_reduce_none", 1, 172, "_reduce_none", 1, 172, "_reduce_none", 1, 168, "_reduce_none", 1, 168, "_reduce_none", 1, 168, "_reduce_none", 1, 168, "_reduce_none", 1, 247, "_reduce_none", 1, 247, "_reduce_none", 1, 247, "_reduce_none", 1, 218, "_reduce_none", 1, 218, "_reduce_none", 0, 145, "_reduce_none", 1, 145, "_reduce_none", 0, 185, "_reduce_none", 1, 185, "_reduce_none", 0, 188, "_reduce_none", 1, 188, "_reduce_none", 1, 188, "_reduce_none", 1, 215, "_reduce_none", 1, 215, "_reduce_none", 1, 148, "_reduce_none", 2, 148, "_reduce_none", 0, 146, "_reduce_none", 0, 197, "_reduce_none"];

      racc_reduce_n = 494;

      racc_shift_n = 867;

      racc_token_table = __hash(false, 0, "error", 1, "CLASS", 2, "MODULE", 3, "DEF", 4, "UNDEF", 5, "BEGIN", 6, "RESCUE", 7, "ENSURE", 8, "END", 9, "IF", 10, "UNLESS", 11, "THEN", 12, "ELSIF", 13, "ELSE", 14, "CASE", 15, "WHEN", 16, "WHILE", 17, "UNTIL", 18, "FOR", 19, "BREAK", 20, "NEXT", 21, "REDO", 22, "RETRY", 23, "IN", 24, "DO", 25, "DO_COND", 26, "DO_BLOCK", 27, "RETURN", 28, "YIELD", 29, "SUPER", 30, "SELF", 31, "NIL", 32, "TRUE", 33, "FALSE", 34, "AND", 35, "OR", 36, "NOT", 37, "IF_MOD", 38, "UNLESS_MOD", 39, "WHILE_MOD", 40, "UNTIL_MOD", 41, "RESCUE_MOD", 42, "ALIAS", 43, "DEFINED", 44, "klBEGIN", 45, "klEND", 46, "LINE", 47, "FILE", 48, "IDENTIFIER", 49, "FID", 50, "GVAR", 51, "IVAR", 52, "CONSTANT", 53, "CVAR", 54, "NTH_REF", 55, "BACK_REF", 56, "STRING_CONTENT", 57, "INTEGER", 58, "FLOAT", 59, "REGEXP_END", 60, "+@", 61, "-@", 62, "-@NUM", 63, "**", 64, "<=>", 65, "==", 66, "===", 67, "!=", 68, ">=", 69, "<=", 70, "&&", 71, "||", 72, "=~", 73, "!~", 74, ".", 75, "..", 76, "...", 77, "[]", 78, "[]=", 79, "<<", 80, ">>", 81, "::", 82, "::@", 83, "OP_ASGN", 84, "=>", 85, "PAREN_BEG", 86, "(", 87, ")", 88, "tLPAREN_ARG", 89, "ARRAY_BEG", 90, "]", 91, "tLBRACE", 92, "tLBRACE_ARG", 93, "SPLAT", 94, "*", 95, "&@", 96, "&", 97, "~", 98, "%", 99, "/", 100, "+", 101, "-", 102, "<", 103, ">", 104, "|", 105, "!", 106, "^", 107, "LCURLY", 108, "}", 109, "BACK_REF2", 110, "SYMBOL_BEG", 111, "STRING_BEG", 112, "XSTRING_BEG", 113, "REGEXP_BEG", 114, "WORDS_BEG", 115, "AWORDS_BEG", 116, "STRING_DBEG", 117, "STRING_DVAR", 118, "STRING_END", 119, "STRING", 120, "SYMBOL", 121, "\\n", 122, "?", 123, ":", 124, ",", 125, "SPACE", 126, ";", 127, "LABEL", 128, "LAMBDA", 129, "LAMBEG", 130, "DO_LAMBDA", 131, "=", 132, "LOWEST", 133, "[@", 134, "[", 135, "{", 136);

      racc_nt_base = 137;

      racc_use_result_var = true;

      __scope.Racc_arg = [racc_action_table, racc_action_check, racc_action_default, racc_action_pointer, racc_goto_table, racc_goto_check, racc_goto_default, racc_goto_pointer, racc_nt_base, racc_reduce_table, racc_token_table, racc_shift_n, racc_reduce_n, racc_use_result_var];

      __scope.Racc_token_to_s_table = ["$end", "error", "CLASS", "MODULE", "DEF", "UNDEF", "BEGIN", "RESCUE", "ENSURE", "END", "IF", "UNLESS", "THEN", "ELSIF", "ELSE", "CASE", "WHEN", "WHILE", "UNTIL", "FOR", "BREAK", "NEXT", "REDO", "RETRY", "IN", "DO", "DO_COND", "DO_BLOCK", "RETURN", "YIELD", "SUPER", "SELF", "NIL", "TRUE", "FALSE", "AND", "OR", "NOT", "IF_MOD", "UNLESS_MOD", "WHILE_MOD", "UNTIL_MOD", "RESCUE_MOD", "ALIAS", "DEFINED", "klBEGIN", "klEND", "LINE", "FILE", "IDENTIFIER", "FID", "GVAR", "IVAR", "CONSTANT", "CVAR", "NTH_REF", "BACK_REF", "STRING_CONTENT", "INTEGER", "FLOAT", "REGEXP_END", "\"+@\"", "\"-@\"", "\"-@NUM\"", "\"**\"", "\"<=>\"", "\"==\"", "\"===\"", "\"!=\"", "\">=\"", "\"<=\"", "\"&&\"", "\"||\"", "\"=~\"", "\"!~\"", "\".\"", "\"..\"", "\"...\"", "\"[]\"", "\"[]=\"", "\"<<\"", "\">>\"", "\"::\"", "\"::@\"", "OP_ASGN", "\"=>\"", "PAREN_BEG", "\"(\"", "\")\"", "tLPAREN_ARG", "ARRAY_BEG", "\"]\"", "tLBRACE", "tLBRACE_ARG", "SPLAT", "\"*\"", "\"&@\"", "\"&\"", "\"~\"", "\"%\"", "\"/\"", "\"+\"", "\"-\"", "\"<\"", "\">\"", "\"|\"", "\"!\"", "\"^\"", "LCURLY", "\"}\"", "BACK_REF2", "SYMBOL_BEG", "STRING_BEG", "XSTRING_BEG", "REGEXP_BEG", "WORDS_BEG", "AWORDS_BEG", "STRING_DBEG", "STRING_DVAR", "STRING_END", "STRING", "SYMBOL", "\"\\\\n\"", "\"?\"", "\":\"", "\",\"", "SPACE", "\";\"", "LABEL", "LAMBDA", "LAMBEG", "DO_LAMBDA", "\"=\"", "LOWEST", "\"[@\"", "\"[\"", "\"{\"", "$start", "target", "compstmt", "bodystmt", "opt_rescue", "opt_else", "opt_ensure", "stmts", "opt_terms", "none", "stmt", "terms", "fitem", "undef_list", "expr_value", "lhs", "command_call", "mlhs", "var_lhs", "primary_value", "aref_args", "backref", "mrhs", "arg_value", "expr", "@1", "arg", "command", "block_command", "call_args", "block_call", "operation2", "command_args", "cmd_brace_block", "opt_block_var", "operation", "mlhs_basic", "mlhs_entry", "mlhs_head", "mlhs_item", "mlhs_node", "variable", "cname", "cpath", "fname", "op", "reswords", "symbol", "opt_nl", "primary", "args", "trailer", "assocs", "paren_args", "opt_paren_args", "opt_block_arg", "block_arg", "call_args2", "open_args", "@2", "none_block_pass", "literal", "strings", "xstring", "regexp", "words", "awords", "var_ref", "assoc_list", "brace_block", "method_call", "lambda", "then", "if_tail", "do", "case_body", "block_var", "superclass", "term", "f_arglist", "singleton", "dot_or_colon", "@3", "@4", "@5", "@6", "@7", "@8", "@9", "@10", "@11", "@12", "@13", "@14", "@15", "@16", "@17", "@18", "f_larglist", "lambda_body", "block_var_args", "@19", "f_arg", "f_block_optarg", "f_rest_arg", "opt_f_block_arg", "f_block_arg", "f_block_opt", "do_block", "@20", "operation3", "@21", "@22", "cases", "@23", "exc_list", "exc_var", "numeric", "dsym", "string", "string1", "string_contents", "xstring_contents", "word_list", "word", "string_content", "qword_list", "string_dvar", "@24", "@25", "sym", "f_args", "f_optarg", "f_norm_arg", "f_opt", "restarg_mark", "blkarg_mark", "assoc"];

      __scope.Racc_debug_parser = false;

      def.$_reduce_1 = function(val, _values, result) {
        var _a;
        result = ((_a = val)['$[]'] || $mm('[]')).call(_a, 0);
        return result;
      };

      def.$_reduce_2 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = this).$new_body || $mm('new_body')).call(_a, ((_b = val)['$[]'] || $mm('[]')).call(_b, 0), ((_b = val)['$[]'] || $mm('[]')).call(_b, 1), ((_b = val)['$[]'] || $mm('[]')).call(_b, 2), ((_b = val)['$[]'] || $mm('[]')).call(_b, 3));
        return result;
      };

      def.$_reduce_3 = function(val, _values, result) {
        var comp = nil, _a, _b, _c, _d;
        comp = ((_a = this).$new_compstmt || $mm('new_compstmt')).call(_a, ((_b = val)['$[]'] || $mm('[]')).call(_b, 0));
        if ((_a = (_b = ((_b = comp !== false && comp !== nil) ? ((_c = ((_d = comp)['$[]'] || $mm('[]')).call(_d, 0))['$=='] || $mm('==')).call(_c, "begin") : _b), _b !== false && _b !== nil ? ((_b = ((_c = comp).$size || $mm('size')).call(_c))['$=='] || $mm('==')).call(_b, 2) : _b)) !== false && _a !== nil) {
          result = ((_a = comp)['$[]'] || $mm('[]')).call(_a, 1);
          ((_a = result)['$line='] || $mm('line=')).call(_a, ((_b = comp).$line || $mm('line')).call(_b));
          } else {
          result = comp
        };
        return result;
      };

      def.$_reduce_4 = function(val, _values, result) {
        var _a;
        result = ((_a = this).$new_block || $mm('new_block')).call(_a);
        return result;
      };

      def.$_reduce_5 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = this).$new_block || $mm('new_block')).call(_a, ((_b = val)['$[]'] || $mm('[]')).call(_b, 0));
        return result;
      };

      def.$_reduce_6 = function(val, _values, result) {
        var _a, _b;
        ((_a = ((_b = val)['$[]'] || $mm('[]')).call(_b, 0))['$<<'] || $mm('<<')).call(_a, ((_b = val)['$[]'] || $mm('[]')).call(_b, 2));
        result = ((_a = val)['$[]'] || $mm('[]')).call(_a, 0);
        return result;
      };

      def.$_reduce_7 = function(val, _values, result) {
        
        this.lex_state = "expr_fname";
        return result;
      };

      def.$_reduce_8 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = this).$s || $mm('s')).call(_a, "alias", ((_b = val)['$[]'] || $mm('[]')).call(_b, 1), ((_b = val)['$[]'] || $mm('[]')).call(_b, 3));
        return result;
      };

      def.$_reduce_9 = function(val, _values, result) {
        var _a, _b, _c;
        result = ((_a = this).$s || $mm('s')).call(_a, "valias", ((_b = ((_c = val)['$[]'] || $mm('[]')).call(_c, 1)).$intern || $mm('intern')).call(_b), ((_b = ((_c = val)['$[]'] || $mm('[]')).call(_c, 2)).$intern || $mm('intern')).call(_b));
        return result;
      };

      def.$_reduce_11 = function(val, _values, result) {
        var _a, _b, _c;
        result = ((_a = this).$s || $mm('s')).call(_a, "valias", ((_b = ((_c = val)['$[]'] || $mm('[]')).call(_c, 1)).$intern || $mm('intern')).call(_b), ((_b = ((_c = val)['$[]'] || $mm('[]')).call(_c, 2)).$intern || $mm('intern')).call(_b));
        return result;
      };

      def.$_reduce_12 = function(val, _values, result) {
        var _a;
        result = ((_a = val)['$[]'] || $mm('[]')).call(_a, 1);
        return result;
      };

      def.$_reduce_13 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = this).$new_if || $mm('new_if')).call(_a, ((_b = val)['$[]'] || $mm('[]')).call(_b, 2), ((_b = val)['$[]'] || $mm('[]')).call(_b, 0), nil);
        return result;
      };

      def.$_reduce_14 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = this).$new_if || $mm('new_if')).call(_a, ((_b = val)['$[]'] || $mm('[]')).call(_b, 2), nil, ((_b = val)['$[]'] || $mm('[]')).call(_b, 0));
        return result;
      };

      def.$_reduce_15 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = this).$s || $mm('s')).call(_a, "while", ((_b = val)['$[]'] || $mm('[]')).call(_b, 2), ((_b = val)['$[]'] || $mm('[]')).call(_b, 0), true);
        return result;
      };

      def.$_reduce_16 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = this).$s || $mm('s')).call(_a, "until", ((_b = val)['$[]'] || $mm('[]')).call(_b, 2), ((_b = val)['$[]'] || $mm('[]')).call(_b, 0), true);
        return result;
      };

      def.$_reduce_20 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = this).$new_assign || $mm('new_assign')).call(_a, ((_b = val)['$[]'] || $mm('[]')).call(_b, 0), ((_b = val)['$[]'] || $mm('[]')).call(_b, 2));
        return result;
      };

      def.$_reduce_21 = function(val, _values, result) {
        var _a, _b, _c;
        result = ((_a = this).$s || $mm('s')).call(_a, "masgn", ((_b = val)['$[]'] || $mm('[]')).call(_b, 0), ((_b = this).$s || $mm('s')).call(_b, "to_ary", ((_c = val)['$[]'] || $mm('[]')).call(_c, 2)));
        return result;
      };

      def.$_reduce_22 = function(val, _values, result) {
        var _a, _b, _c;
        result = ((_a = this).$new_op_asgn || $mm('new_op_asgn')).call(_a, ((_b = ((_c = val)['$[]'] || $mm('[]')).call(_c, 1)).$intern || $mm('intern')).call(_b), ((_b = val)['$[]'] || $mm('[]')).call(_b, 0), ((_b = val)['$[]'] || $mm('[]')).call(_b, 2));
        return result;
      };

      def.$_reduce_24 = function(val, _values, result) {
        var _a, _b, _c;
        result = ((_a = this).$s || $mm('s')).call(_a, "op_asgn2", ((_b = val)['$[]'] || $mm('[]')).call(_b, 0), ((_b = ("" + (((_c = val)['$[]'] || $mm('[]')).call(_c, 2)) + "=")).$intern || $mm('intern')).call(_b), ((_b = ((_c = val)['$[]'] || $mm('[]')).call(_c, 3)).$intern || $mm('intern')).call(_b), ((_b = val)['$[]'] || $mm('[]')).call(_b, 4));
        return result;
      };

      def.$_reduce_28 = function(val, _values, result) {
        var _a, _b, _c;
        result = ((_a = this).$new_assign || $mm('new_assign')).call(_a, ((_b = val)['$[]'] || $mm('[]')).call(_b, 0), ((_b = this).$s || $mm('s')).call(_b, "svalue", ((_c = val)['$[]'] || $mm('[]')).call(_c, 2)));
        return result;
      };

      def.$_reduce_29 = function(val, _values, result) {
        var _a, _b, _c;
        result = ((_a = this).$s || $mm('s')).call(_a, "masgn", ((_b = val)['$[]'] || $mm('[]')).call(_b, 0), ((_b = this).$s || $mm('s')).call(_b, "to_ary", ((_c = val)['$[]'] || $mm('[]')).call(_c, 2)));
        return result;
      };

      def.$_reduce_30 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = this).$s || $mm('s')).call(_a, "masgn", ((_b = val)['$[]'] || $mm('[]')).call(_b, 0), ((_b = val)['$[]'] || $mm('[]')).call(_b, 2));
        return result;
      };

      def.$_reduce_33 = function(val, _values, result) {
        var _a, _b, _c;
        result = ((_a = this).$s || $mm('s')).call(_a, "and", ((_b = val)['$[]'] || $mm('[]')).call(_b, 0), ((_b = val)['$[]'] || $mm('[]')).call(_b, 2));
        ((_a = result)['$line='] || $mm('line=')).call(_a, ((_b = ((_c = val)['$[]'] || $mm('[]')).call(_c, 0)).$line || $mm('line')).call(_b));
        return result;
      };

      def.$_reduce_34 = function(val, _values, result) {
        var _a, _b, _c;
        result = ((_a = this).$s || $mm('s')).call(_a, "or", ((_b = val)['$[]'] || $mm('[]')).call(_b, 0), ((_b = val)['$[]'] || $mm('[]')).call(_b, 2));
        ((_a = result)['$line='] || $mm('line=')).call(_a, ((_b = ((_c = val)['$[]'] || $mm('[]')).call(_c, 0)).$line || $mm('line')).call(_b));
        return result;
      };

      def.$_reduce_35 = function(val, _values, result) {
        var _a, _b, _c;
        result = ((_a = this).$s || $mm('s')).call(_a, "not", ((_b = val)['$[]'] || $mm('[]')).call(_b, 1));
        ((_a = result)['$line='] || $mm('line=')).call(_a, ((_b = ((_c = val)['$[]'] || $mm('[]')).call(_c, 1)).$line || $mm('line')).call(_b));
        return result;
      };

      def.$_reduce_36 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = this).$s || $mm('s')).call(_a, "not", ((_b = val)['$[]'] || $mm('[]')).call(_b, 1));
        return result;
      };

      def.$_reduce_41 = function(val, _values, result) {
        var args = nil, _a, _b;
        args = ((_a = val)['$[]'] || $mm('[]')).call(_a, 1);
        if (((_a = ((_b = args).$size || $mm('size')).call(_b))['$=='] || $mm('==')).call(_a, 2)) {
          args = ((_a = args)['$[]'] || $mm('[]')).call(_a, 1)
        };
        result = ((_a = this).$s || $mm('s')).call(_a, "return", args);
        return result;
      };

      def.$_reduce_42 = function(val, _values, result) {
        var args = nil, _a, _b;
        args = ((_a = val)['$[]'] || $mm('[]')).call(_a, 1);
        if (((_a = ((_b = args).$size || $mm('size')).call(_b))['$=='] || $mm('==')).call(_a, 2)) {
          args = ((_a = args)['$[]'] || $mm('[]')).call(_a, 1)
        };
        result = ((_a = this).$s || $mm('s')).call(_a, "break", args);
        return result;
      };

      def.$_reduce_43 = function(val, _values, result) {
        var args = nil, _a, _b;
        args = ((_a = val)['$[]'] || $mm('[]')).call(_a, 1);
        if (((_a = ((_b = args).$size || $mm('size')).call(_b))['$=='] || $mm('==')).call(_a, 2)) {
          args = ((_a = args)['$[]'] || $mm('[]')).call(_a, 1)
        };
        result = ((_a = this).$s || $mm('s')).call(_a, "next", args);
        return result;
      };

      def.$_reduce_48 = function(val, _values, result) {
        var _a, _b, _c;
        result = ((_a = this).$new_call || $mm('new_call')).call(_a, nil, ((_b = ((_c = val)['$[]'] || $mm('[]')).call(_c, 0)).$intern || $mm('intern')).call(_b), ((_b = val)['$[]'] || $mm('[]')).call(_b, 1));
        return result;
      };

      def.$_reduce_50 = function(val, _values, result) {
        var _a, _b, _c;
        result = ((_a = this).$new_call || $mm('new_call')).call(_a, ((_b = val)['$[]'] || $mm('[]')).call(_b, 0), ((_b = ((_c = val)['$[]'] || $mm('[]')).call(_c, 2)).$intern || $mm('intern')).call(_b), ((_b = val)['$[]'] || $mm('[]')).call(_b, 3));
        return result;
      };

      def.$_reduce_52 = function(val, _values, result) {
        
        result = "result = ['call', val[0], val[2], val[3]];";
        return result;
      };

      def.$_reduce_54 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = this).$new_super || $mm('new_super')).call(_a, ((_b = val)['$[]'] || $mm('[]')).call(_b, 1));
        return result;
      };

      def.$_reduce_55 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = this).$new_yield || $mm('new_yield')).call(_a, ((_b = val)['$[]'] || $mm('[]')).call(_b, 1));
        return result;
      };

      def.$_reduce_56 = function(val, _values, result) {
        var _a;
        result = ((_a = val)['$[]'] || $mm('[]')).call(_a, 0);
        return result;
      };

      def.$_reduce_57 = function(val, _values, result) {
        var _a;
        result = ((_a = val)['$[]'] || $mm('[]')).call(_a, 1);
        return result;
      };

      def.$_reduce_58 = function(val, _values, result) {
        var _a;
        result = ((_a = val)['$[]'] || $mm('[]')).call(_a, 0);
        return result;
      };

      def.$_reduce_59 = function(val, _values, result) {
        var _a;
        result = ((_a = val)['$[]'] || $mm('[]')).call(_a, 1);
        return result;
      };

      def.$_reduce_60 = function(val, _values, result) {
        var _a;
        result = ((_a = val)['$[]'] || $mm('[]')).call(_a, 0);
        return result;
      };

      def.$_reduce_61 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = ((_b = val)['$[]'] || $mm('[]')).call(_b, 0))['$<<'] || $mm('<<')).call(_a, ((_b = val)['$[]'] || $mm('[]')).call(_b, 1));
        return result;
      };

      def.$_reduce_62 = function(val, _values, result) {
        var _a, _b, _c;
        result = ((_a = ((_b = val)['$[]'] || $mm('[]')).call(_b, 0))['$<<'] || $mm('<<')).call(_a, ((_b = this).$s || $mm('s')).call(_b, "splat", ((_c = val)['$[]'] || $mm('[]')).call(_c, 2)));
        return result;
      };

      def.$_reduce_63 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = ((_b = val)['$[]'] || $mm('[]')).call(_b, 0))['$<<'] || $mm('<<')).call(_a, ((_b = this).$s || $mm('s')).call(_b, "splat"));
        return result;
      };

      def.$_reduce_64 = function(val, _values, result) {
        var _a, _b, _c;
        result = ((_a = this).$s || $mm('s')).call(_a, "array", ((_b = this).$s || $mm('s')).call(_b, "splat", ((_c = val)['$[]'] || $mm('[]')).call(_c, 1)));
        return result;
      };

      def.$_reduce_65 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = this).$s || $mm('s')).call(_a, "array", ((_b = this).$s || $mm('s')).call(_b, "splat"));
        return result;
      };

      def.$_reduce_66 = function(val, _values, result) {
        var _a;
        result = ((_a = val)['$[]'] || $mm('[]')).call(_a, 0);
        return result;
      };

      def.$_reduce_67 = function(val, _values, result) {
        var _a;
        result = ((_a = val)['$[]'] || $mm('[]')).call(_a, 1);
        return result;
      };

      def.$_reduce_68 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = this).$s || $mm('s')).call(_a, "array", ((_b = val)['$[]'] || $mm('[]')).call(_b, 0));
        return result;
      };

      def.$_reduce_69 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = ((_b = val)['$[]'] || $mm('[]')).call(_b, 0))['$<<'] || $mm('<<')).call(_a, ((_b = val)['$[]'] || $mm('[]')).call(_b, 1));
        return result;
      };

      def.$_reduce_70 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = this).$new_assignable || $mm('new_assignable')).call(_a, ((_b = val)['$[]'] || $mm('[]')).call(_b, 0));
        return result;
      };

      def.$_reduce_78 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = this).$new_assignable || $mm('new_assignable')).call(_a, ((_b = val)['$[]'] || $mm('[]')).call(_b, 0));
        return result;
      };

      def.$_reduce_79 = function(val, _values, result) {
        var args = nil, _a, _b;
        args = ((_a = val)['$[]'] || $mm('[]')).call(_a, 2);
        if (((_a = ((_b = args)['$[]'] || $mm('[]')).call(_b, 0))['$=='] || $mm('==')).call(_a, "array")) {
          ((_a = args)['$[]='] || $mm('[]=')).call(_a, 0, "arglist")
        };
        result = ((_a = this).$s || $mm('s')).call(_a, "attrasgn", ((_b = val)['$[]'] || $mm('[]')).call(_b, 0), "[]=", args);
        return result;
      };

      def.$_reduce_80 = function(val, _values, result) {
        var _a, _b, _c;
        result = ((_a = this).$s || $mm('s')).call(_a, "attrasgn", ((_b = val)['$[]'] || $mm('[]')).call(_b, 0), ((_b = ("" + (((_c = val)['$[]'] || $mm('[]')).call(_c, 2)) + "=")).$intern || $mm('intern')).call(_b), ((_b = this).$s || $mm('s')).call(_b, "arglist"));
        return result;
      };

      def.$_reduce_81 = function(val, _values, result) {
        var _a, _b, _c;
        result = ((_a = this).$s || $mm('s')).call(_a, "attrasgn", ((_b = val)['$[]'] || $mm('[]')).call(_b, 0), ((_b = ("" + (((_c = val)['$[]'] || $mm('[]')).call(_c, 2)) + "=")).$intern || $mm('intern')).call(_b), ((_b = this).$s || $mm('s')).call(_b, "arglist"));
        return result;
      };

      def.$_reduce_82 = function(val, _values, result) {
        var _a, _b, _c;
        result = ((_a = this).$s || $mm('s')).call(_a, "attrasgn", ((_b = val)['$[]'] || $mm('[]')).call(_b, 0), ((_b = ("" + (((_c = val)['$[]'] || $mm('[]')).call(_c, 2)) + "=")).$intern || $mm('intern')).call(_b), ((_b = this).$s || $mm('s')).call(_b, "arglist"));
        return result;
      };

      def.$_reduce_87 = function(val, _values, result) {
        var _a, _b, _c;
        result = ((_a = this).$s || $mm('s')).call(_a, "colon3", ((_b = ((_c = val)['$[]'] || $mm('[]')).call(_c, 1)).$intern || $mm('intern')).call(_b));
        return result;
      };

      def.$_reduce_88 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = ((_b = val)['$[]'] || $mm('[]')).call(_b, 0)).$intern || $mm('intern')).call(_a);
        return result;
      };

      def.$_reduce_89 = function(val, _values, result) {
        var _a, _b, _c;
        result = ((_a = this).$s || $mm('s')).call(_a, "colon2", ((_b = val)['$[]'] || $mm('[]')).call(_b, 0), ((_b = ((_c = val)['$[]'] || $mm('[]')).call(_c, 2)).$intern || $mm('intern')).call(_b));
        return result;
      };

      def.$_reduce_93 = function(val, _values, result) {
        var _a;
        this.lex_state = "expr_end";
        result = ((_a = val)['$[]'] || $mm('[]')).call(_a, 0);
        return result;
      };

      def.$_reduce_94 = function(val, _values, result) {
        var _a;
        this.lex_state = "expr_end";
        result = ((_a = val)['$[]'] || $mm('[]')).call(_a, 0);
        return result;
      };

      def.$_reduce_95 = function(val, _values, result) {
        var _a, _b, _c;
        result = ((_a = this).$s || $mm('s')).call(_a, "lit", ((_b = ((_c = val)['$[]'] || $mm('[]')).call(_c, 0)).$intern || $mm('intern')).call(_b));
        return result;
      };

      def.$_reduce_96 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = this).$s || $mm('s')).call(_a, "lit", ((_b = val)['$[]'] || $mm('[]')).call(_b, 0));
        return result;
      };

      def.$_reduce_97 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = this).$s || $mm('s')).call(_a, "undef", ((_b = val)['$[]'] || $mm('[]')).call(_b, 0));
        return result;
      };

      def.$_reduce_98 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = ((_b = val)['$[]'] || $mm('[]')).call(_b, 0))['$<<'] || $mm('<<')).call(_a, ((_b = val)['$[]'] || $mm('[]')).call(_b, 2));
        return result;
      };

      def.$_reduce_168 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = this).$new_assign || $mm('new_assign')).call(_a, ((_b = val)['$[]'] || $mm('[]')).call(_b, 0), ((_b = val)['$[]'] || $mm('[]')).call(_b, 2));
        return result;
      };

      def.$_reduce_170 = function(val, _values, result) {
        var _a, _b, _c;
        result = ((_a = this).$new_op_asgn || $mm('new_op_asgn')).call(_a, ((_b = ((_c = val)['$[]'] || $mm('[]')).call(_c, 1)).$intern || $mm('intern')).call(_b), ((_b = val)['$[]'] || $mm('[]')).call(_b, 0), ((_b = val)['$[]'] || $mm('[]')).call(_b, 2));
        return result;
      };

      def.$_reduce_171 = function(val, _values, result) {
        var args = nil, _a, _b, _c;
        args = ((_a = val)['$[]'] || $mm('[]')).call(_a, 2);
        if (((_a = ((_b = args)['$[]'] || $mm('[]')).call(_b, 0))['$=='] || $mm('==')).call(_a, "array")) {
          ((_a = args)['$[]='] || $mm('[]=')).call(_a, 0, "arglist")
        };
        result = ((_a = this).$s || $mm('s')).call(_a, "op_asgn1", ((_b = val)['$[]'] || $mm('[]')).call(_b, 0), ((_b = val)['$[]'] || $mm('[]')).call(_b, 2), ((_b = ((_c = val)['$[]'] || $mm('[]')).call(_c, 4)).$intern || $mm('intern')).call(_b), ((_b = val)['$[]'] || $mm('[]')).call(_b, 5));
        ((_a = result)['$line='] || $mm('line=')).call(_a, ((_b = ((_c = val)['$[]'] || $mm('[]')).call(_c, 0)).$line || $mm('line')).call(_b));
        return result;
      };

      def.$_reduce_172 = function(val, _values, result) {
        var _a, _b, _c;
        result = ((_a = this).$s || $mm('s')).call(_a, "op_asgn2", ((_b = val)['$[]'] || $mm('[]')).call(_b, 0), ((_b = ("" + (((_c = val)['$[]'] || $mm('[]')).call(_c, 2)) + "=")).$intern || $mm('intern')).call(_b), ((_b = ((_c = val)['$[]'] || $mm('[]')).call(_c, 3)).$intern || $mm('intern')).call(_b), ((_b = val)['$[]'] || $mm('[]')).call(_b, 4));
        return result;
      };

      def.$_reduce_178 = function(val, _values, result) {
        var _a, _b, _c;
        result = ((_a = this).$s || $mm('s')).call(_a, "dot2", ((_b = val)['$[]'] || $mm('[]')).call(_b, 0), ((_b = val)['$[]'] || $mm('[]')).call(_b, 2));
        ((_a = result)['$line='] || $mm('line=')).call(_a, ((_b = ((_c = val)['$[]'] || $mm('[]')).call(_c, 0)).$line || $mm('line')).call(_b));
        return result;
      };

      def.$_reduce_179 = function(val, _values, result) {
        var _a, _b, _c;
        result = ((_a = this).$s || $mm('s')).call(_a, "dot3", ((_b = val)['$[]'] || $mm('[]')).call(_b, 0), ((_b = val)['$[]'] || $mm('[]')).call(_b, 2));
        ((_a = result)['$line='] || $mm('line=')).call(_a, ((_b = ((_c = val)['$[]'] || $mm('[]')).call(_c, 0)).$line || $mm('line')).call(_b));
        return result;
      };

      def.$_reduce_180 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = this).$s || $mm('s')).call(_a, "operator", "+", ((_b = val)['$[]'] || $mm('[]')).call(_b, 0), ((_b = val)['$[]'] || $mm('[]')).call(_b, 2));
        return result;
      };

      def.$_reduce_181 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = this).$s || $mm('s')).call(_a, "operator", "-", ((_b = val)['$[]'] || $mm('[]')).call(_b, 0), ((_b = val)['$[]'] || $mm('[]')).call(_b, 2));
        return result;
      };

      def.$_reduce_182 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = this).$s || $mm('s')).call(_a, "operator", "*", ((_b = val)['$[]'] || $mm('[]')).call(_b, 0), ((_b = val)['$[]'] || $mm('[]')).call(_b, 2));
        return result;
      };

      def.$_reduce_183 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = this).$s || $mm('s')).call(_a, "operator", "/", ((_b = val)['$[]'] || $mm('[]')).call(_b, 0), ((_b = val)['$[]'] || $mm('[]')).call(_b, 2));
        return result;
      };

      def.$_reduce_184 = function(val, _values, result) {
        var _a, _b, _c;
        result = ((_a = this).$new_call || $mm('new_call')).call(_a, ((_b = val)['$[]'] || $mm('[]')).call(_b, 0), "%", ((_b = this).$s || $mm('s')).call(_b, "arglist", ((_c = val)['$[]'] || $mm('[]')).call(_c, 2)));
        return result;
      };

      def.$_reduce_185 = function(val, _values, result) {
        var _a, _b, _c;
        result = ((_a = this).$new_call || $mm('new_call')).call(_a, ((_b = val)['$[]'] || $mm('[]')).call(_b, 0), "**", ((_b = this).$s || $mm('s')).call(_b, "arglist", ((_c = val)['$[]'] || $mm('[]')).call(_c, 2)));
        return result;
      };

      def.$_reduce_188 = function(val, _values, result) {
        var _a, _b, _c, _d, _e;
        result = ((_a = this).$new_call || $mm('new_call')).call(_a, ((_b = val)['$[]'] || $mm('[]')).call(_b, 1), "+@", ((_b = this).$s || $mm('s')).call(_b, "arglist"));
        if ((_a = ((_b = ((_c = ((_d = ((_e = val)['$[]'] || $mm('[]')).call(_e, 1))['$[]'] || $mm('[]')).call(_d, 0))['$=='] || $mm('==')).call(_c, "lit")) ? ((_c = ((_d = __scope.Numeric) == null ? __opal.cm("Numeric") : _d))['$==='] || $mm('===')).call(_c, ((_d = ((_e = val)['$[]'] || $mm('[]')).call(_e, 1))['$[]'] || $mm('[]')).call(_d, 1)) : _b)) !== false && _a !== nil) {
          result = ((_a = val)['$[]'] || $mm('[]')).call(_a, 1)
        };
        return result;
      };

      def.$_reduce_189 = function(val, _values, result) {
        var _a, _b, _c, _d, _e;
        result = ((_a = this).$new_call || $mm('new_call')).call(_a, ((_b = val)['$[]'] || $mm('[]')).call(_b, 1), "-@", ((_b = this).$s || $mm('s')).call(_b, "arglist"));
        if ((_a = ((_b = ((_c = ((_d = ((_e = val)['$[]'] || $mm('[]')).call(_e, 1))['$[]'] || $mm('[]')).call(_d, 0))['$=='] || $mm('==')).call(_c, "lit")) ? ((_c = ((_d = __scope.Numeric) == null ? __opal.cm("Numeric") : _d))['$==='] || $mm('===')).call(_c, ((_d = ((_e = val)['$[]'] || $mm('[]')).call(_e, 1))['$[]'] || $mm('[]')).call(_d, 1)) : _b)) !== false && _a !== nil) {
          ((_a = ((_b = val)['$[]'] || $mm('[]')).call(_b, 1))['$[]='] || $mm('[]=')).call(_a, 1, ((_b = ((_c = ((_d = val)['$[]'] || $mm('[]')).call(_d, 1))['$[]'] || $mm('[]')).call(_c, 1))['$-@'] || $mm('-@')).call(_b));
          result = ((_a = val)['$[]'] || $mm('[]')).call(_a, 1);
        };
        return result;
      };

      def.$_reduce_190 = function(val, _values, result) {
        var _a, _b, _c;
        result = ((_a = this).$new_call || $mm('new_call')).call(_a, ((_b = val)['$[]'] || $mm('[]')).call(_b, 0), "|", ((_b = this).$s || $mm('s')).call(_b, "arglist", ((_c = val)['$[]'] || $mm('[]')).call(_c, 2)));
        return result;
      };

      def.$_reduce_191 = function(val, _values, result) {
        var _a, _b, _c;
        result = ((_a = this).$new_call || $mm('new_call')).call(_a, ((_b = val)['$[]'] || $mm('[]')).call(_b, 0), "^", ((_b = this).$s || $mm('s')).call(_b, "arglist", ((_c = val)['$[]'] || $mm('[]')).call(_c, 2)));
        return result;
      };

      def.$_reduce_192 = function(val, _values, result) {
        var _a, _b, _c;
        result = ((_a = this).$new_call || $mm('new_call')).call(_a, ((_b = val)['$[]'] || $mm('[]')).call(_b, 0), "&", ((_b = this).$s || $mm('s')).call(_b, "arglist", ((_c = val)['$[]'] || $mm('[]')).call(_c, 2)));
        return result;
      };

      def.$_reduce_193 = function(val, _values, result) {
        var _a, _b, _c;
        result = ((_a = this).$new_call || $mm('new_call')).call(_a, ((_b = val)['$[]'] || $mm('[]')).call(_b, 0), "<=>", ((_b = this).$s || $mm('s')).call(_b, "arglist", ((_c = val)['$[]'] || $mm('[]')).call(_c, 2)));
        return result;
      };

      def.$_reduce_194 = function(val, _values, result) {
        var _a, _b, _c;
        result = ((_a = this).$new_call || $mm('new_call')).call(_a, ((_b = val)['$[]'] || $mm('[]')).call(_b, 0), ">", ((_b = this).$s || $mm('s')).call(_b, "arglist", ((_c = val)['$[]'] || $mm('[]')).call(_c, 2)));
        return result;
      };

      def.$_reduce_195 = function(val, _values, result) {
        var _a, _b, _c;
        result = ((_a = this).$new_call || $mm('new_call')).call(_a, ((_b = val)['$[]'] || $mm('[]')).call(_b, 0), ">=", ((_b = this).$s || $mm('s')).call(_b, "arglist", ((_c = val)['$[]'] || $mm('[]')).call(_c, 2)));
        return result;
      };

      def.$_reduce_196 = function(val, _values, result) {
        var _a, _b, _c;
        result = ((_a = this).$new_call || $mm('new_call')).call(_a, ((_b = val)['$[]'] || $mm('[]')).call(_b, 0), "<", ((_b = this).$s || $mm('s')).call(_b, "arglist", ((_c = val)['$[]'] || $mm('[]')).call(_c, 2)));
        return result;
      };

      def.$_reduce_197 = function(val, _values, result) {
        var _a, _b, _c;
        result = ((_a = this).$new_call || $mm('new_call')).call(_a, ((_b = val)['$[]'] || $mm('[]')).call(_b, 0), "<=", ((_b = this).$s || $mm('s')).call(_b, "arglist", ((_c = val)['$[]'] || $mm('[]')).call(_c, 2)));
        return result;
      };

      def.$_reduce_198 = function(val, _values, result) {
        var _a, _b, _c;
        result = ((_a = this).$new_call || $mm('new_call')).call(_a, ((_b = val)['$[]'] || $mm('[]')).call(_b, 0), "==", ((_b = this).$s || $mm('s')).call(_b, "arglist", ((_c = val)['$[]'] || $mm('[]')).call(_c, 2)));
        return result;
      };

      def.$_reduce_199 = function(val, _values, result) {
        var _a, _b, _c;
        result = ((_a = this).$new_call || $mm('new_call')).call(_a, ((_b = val)['$[]'] || $mm('[]')).call(_b, 0), "===", ((_b = this).$s || $mm('s')).call(_b, "arglist", ((_c = val)['$[]'] || $mm('[]')).call(_c, 2)));
        return result;
      };

      def.$_reduce_200 = function(val, _values, result) {
        var _a, _b, _c, _d;
        result = ((_a = this).$s || $mm('s')).call(_a, "not", ((_b = this).$new_call || $mm('new_call')).call(_b, ((_c = val)['$[]'] || $mm('[]')).call(_c, 0), "==", ((_c = this).$s || $mm('s')).call(_c, "arglist", ((_d = val)['$[]'] || $mm('[]')).call(_d, 2))));
        return result;
      };

      def.$_reduce_201 = function(val, _values, result) {
        var _a, _b, _c;
        result = ((_a = this).$new_call || $mm('new_call')).call(_a, ((_b = val)['$[]'] || $mm('[]')).call(_b, 0), "=~", ((_b = this).$s || $mm('s')).call(_b, "arglist", ((_c = val)['$[]'] || $mm('[]')).call(_c, 2)));
        return result;
      };

      def.$_reduce_202 = function(val, _values, result) {
        var _a, _b, _c, _d;
        result = ((_a = this).$s || $mm('s')).call(_a, "not", ((_b = this).$new_call || $mm('new_call')).call(_b, ((_c = val)['$[]'] || $mm('[]')).call(_c, 0), "=~", ((_c = this).$s || $mm('s')).call(_c, "arglist", ((_d = val)['$[]'] || $mm('[]')).call(_d, 2))));
        return result;
      };

      def.$_reduce_203 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = this).$s || $mm('s')).call(_a, "not", ((_b = val)['$[]'] || $mm('[]')).call(_b, 1));
        return result;
      };

      def.$_reduce_204 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = this).$new_call || $mm('new_call')).call(_a, ((_b = val)['$[]'] || $mm('[]')).call(_b, 1), "~", ((_b = this).$s || $mm('s')).call(_b, "arglist"));
        return result;
      };

      def.$_reduce_205 = function(val, _values, result) {
        var _a, _b, _c;
        result = ((_a = this).$new_call || $mm('new_call')).call(_a, ((_b = val)['$[]'] || $mm('[]')).call(_b, 0), "<<", ((_b = this).$s || $mm('s')).call(_b, "arglist", ((_c = val)['$[]'] || $mm('[]')).call(_c, 2)));
        return result;
      };

      def.$_reduce_206 = function(val, _values, result) {
        var _a, _b, _c;
        result = ((_a = this).$new_call || $mm('new_call')).call(_a, ((_b = val)['$[]'] || $mm('[]')).call(_b, 0), ">>", ((_b = this).$s || $mm('s')).call(_b, "arglist", ((_c = val)['$[]'] || $mm('[]')).call(_c, 2)));
        return result;
      };

      def.$_reduce_207 = function(val, _values, result) {
        var _a, _b, _c;
        result = ((_a = this).$s || $mm('s')).call(_a, "and", ((_b = val)['$[]'] || $mm('[]')).call(_b, 0), ((_b = val)['$[]'] || $mm('[]')).call(_b, 2));
        ((_a = result)['$line='] || $mm('line=')).call(_a, ((_b = ((_c = val)['$[]'] || $mm('[]')).call(_c, 0)).$line || $mm('line')).call(_b));
        return result;
      };

      def.$_reduce_208 = function(val, _values, result) {
        var _a, _b, _c;
        result = ((_a = this).$s || $mm('s')).call(_a, "or", ((_b = val)['$[]'] || $mm('[]')).call(_b, 0), ((_b = val)['$[]'] || $mm('[]')).call(_b, 2));
        ((_a = result)['$line='] || $mm('line=')).call(_a, ((_b = ((_c = val)['$[]'] || $mm('[]')).call(_c, 0)).$line || $mm('line')).call(_b));
        return result;
      };

      def.$_reduce_209 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = this).$s || $mm('s')).call(_a, "defined", ((_b = val)['$[]'] || $mm('[]')).call(_b, 2));
        return result;
      };

      def.$_reduce_210 = function(val, _values, result) {
        var _a, _b, _c;
        result = ((_a = this).$s || $mm('s')).call(_a, "if", ((_b = val)['$[]'] || $mm('[]')).call(_b, 0), ((_b = val)['$[]'] || $mm('[]')).call(_b, 2), ((_b = val)['$[]'] || $mm('[]')).call(_b, 4));
        ((_a = result)['$line='] || $mm('line=')).call(_a, ((_b = ((_c = val)['$[]'] || $mm('[]')).call(_c, 0)).$line || $mm('line')).call(_b));
        return result;
      };

      def.$_reduce_213 = function(val, _values, result) {
        
        result = nil;
        return result;
      };

      def.$_reduce_214 = function(val, _values, result) {
        var _a;
        result = ((_a = val)['$[]'] || $mm('[]')).call(_a, 0);
        return result;
      };

      def.$_reduce_215 = function(val, _values, result) {
        var _a, _b, _c;
        result = ((_a = this).$s || $mm('s')).call(_a, "array", ((_b = this).$s || $mm('s')).apply(_b, ["hash"].concat(((_c = val)['$[]'] || $mm('[]')).call(_c, 0))));
        return result;
      };

      def.$_reduce_216 = function(val, _values, result) {
        
        result = nil;
        return result;
      };

      def.$_reduce_217 = function(val, _values, result) {
        var _a;
        result = ((_a = val)['$[]'] || $mm('[]')).call(_a, 1);
        return result;
      };

      def.$_reduce_222 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = this).$s || $mm('s')).call(_a, "array", ((_b = val)['$[]'] || $mm('[]')).call(_b, 0));
        return result;
      };

      def.$_reduce_223 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = val)['$[]'] || $mm('[]')).call(_a, 0);
        ((_a = this).$add_block_pass || $mm('add_block_pass')).call(_a, ((_b = val)['$[]'] || $mm('[]')).call(_b, 0), ((_b = val)['$[]'] || $mm('[]')).call(_b, 1));
        return result;
      };

      def.$_reduce_224 = function(val, _values, result) {
        var _a, _b, _c;
        result = ((_a = this).$s || $mm('s')).call(_a, "arglist", ((_b = this).$s || $mm('s')).apply(_b, ["hash"].concat(((_c = val)['$[]'] || $mm('[]')).call(_c, 0))));
        ((_a = this).$add_block_pass || $mm('add_block_pass')).call(_a, result, ((_b = val)['$[]'] || $mm('[]')).call(_b, 1));
        return result;
      };

      def.$_reduce_225 = function(val, _values, result) {
        var _a, _b, _c;
        result = ((_a = val)['$[]'] || $mm('[]')).call(_a, 0);
        ((_a = result)['$<<'] || $mm('<<')).call(_a, ((_b = this).$s || $mm('s')).apply(_b, ["hash"].concat(((_c = val)['$[]'] || $mm('[]')).call(_c, 2))));
        return result;
      };

      def.$_reduce_226 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = this).$s || $mm('s')).call(_a, "arglist");
        ((_a = this).$add_block_pass || $mm('add_block_pass')).call(_a, result, ((_b = val)['$[]'] || $mm('[]')).call(_b, 0));
        return result;
      };

      def.$_reduce_229 = function(val, _values, result) {
        var _a;
        ((_a = this).$cmdarg_push || $mm('cmdarg_push')).call(_a, 1);
        return result;
      };

      def.$_reduce_230 = function(val, _values, result) {
        var _a;
        ((_a = this).$cmdarg_pop || $mm('cmdarg_pop')).call(_a);
        result = ((_a = val)['$[]'] || $mm('[]')).call(_a, 1);
        return result;
      };

      def.$_reduce_232 = function(val, _values, result) {
        
        result = nil;
        return result;
      };

      def.$_reduce_233 = function(val, _values, result) {
        var _a;
        result = ((_a = val)['$[]'] || $mm('[]')).call(_a, 1);
        return result;
      };

      def.$_reduce_234 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = this).$s || $mm('s')).call(_a, "block_pass", ((_b = val)['$[]'] || $mm('[]')).call(_b, 1));
        return result;
      };

      def.$_reduce_235 = function(val, _values, result) {
        var _a;
        result = ((_a = val)['$[]'] || $mm('[]')).call(_a, 1);
        return result;
      };

      def.$_reduce_236 = function(val, _values, result) {
        
        result = nil;
        return result;
      };

      def.$_reduce_237 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = this).$s || $mm('s')).call(_a, "array", ((_b = val)['$[]'] || $mm('[]')).call(_b, 0));
        return result;
      };

      def.$_reduce_238 = function(val, _values, result) {
        var _a, _b, _c;
        result = ((_a = this).$s || $mm('s')).call(_a, "array", ((_b = this).$s || $mm('s')).call(_b, "splat", ((_c = val)['$[]'] || $mm('[]')).call(_c, 1)));
        return result;
      };

      def.$_reduce_239 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = ((_b = val)['$[]'] || $mm('[]')).call(_b, 0))['$<<'] || $mm('<<')).call(_a, ((_b = val)['$[]'] || $mm('[]')).call(_b, 2));
        return result;
      };

      def.$_reduce_240 = function(val, _values, result) {
        var _a, _b, _c;
        result = ((_a = ((_b = val)['$[]'] || $mm('[]')).call(_b, 0))['$<<'] || $mm('<<')).call(_a, ((_b = this).$s || $mm('s')).call(_b, "splat", ((_c = val)['$[]'] || $mm('[]')).call(_c, 3)));
        return result;
      };

      def.$_reduce_241 = function(val, _values, result) {
        var _a, _b;
        ((_a = ((_b = val)['$[]'] || $mm('[]')).call(_b, 0))['$<<'] || $mm('<<')).call(_a, ((_b = val)['$[]'] || $mm('[]')).call(_b, 2));
        result = ((_a = val)['$[]'] || $mm('[]')).call(_a, 0);
        return result;
      };

      def.$_reduce_243 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = this).$s || $mm('s')).call(_a, "splat", ((_b = val)['$[]'] || $mm('[]')).call(_b, 1));
        return result;
      };

      def.$_reduce_253 = function(val, _values, result) {
        
        result = this.line;
        return result;
      };

      def.$_reduce_254 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = this).$s || $mm('s')).call(_a, "begin", ((_b = val)['$[]'] || $mm('[]')).call(_b, 2));
        ((_a = result)['$line='] || $mm('line=')).call(_a, ((_b = val)['$[]'] || $mm('[]')).call(_b, 1));
        return result;
      };

      def.$_reduce_255 = function(val, _values, result) {
        var _a;
        result = ((_a = val)['$[]'] || $mm('[]')).call(_a, 1);
        return result;
      };

      def.$_reduce_256 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = ((_b = val)['$[]'] || $mm('[]')).call(_b, 1)), _a !== false && _a !== nil ? _a : ((_b = this).$s || $mm('s')).call(_b, "nil"));
        return result;
      };

      def.$_reduce_257 = function(val, _values, result) {
        var _a, _b, _c;
        result = ((_a = this).$s || $mm('s')).call(_a, "colon2", ((_b = val)['$[]'] || $mm('[]')).call(_b, 0), ((_b = ((_c = val)['$[]'] || $mm('[]')).call(_c, 2)).$intern || $mm('intern')).call(_b));
        return result;
      };

      def.$_reduce_258 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = this).$s || $mm('s')).call(_a, "colon3", ((_b = val)['$[]'] || $mm('[]')).call(_b, 1));
        return result;
      };

      def.$_reduce_259 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = this).$new_call || $mm('new_call')).call(_a, ((_b = val)['$[]'] || $mm('[]')).call(_b, 0), "[]", ((_b = val)['$[]'] || $mm('[]')).call(_b, 2));
        return result;
      };

      def.$_reduce_260 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = ((_b = val)['$[]'] || $mm('[]')).call(_b, 1)), _a !== false && _a !== nil ? _a : ((_b = this).$s || $mm('s')).call(_b, "array"));
        return result;
      };

      def.$_reduce_261 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = this).$s || $mm('s')).apply(_a, ["hash"].concat(((_b = val)['$[]'] || $mm('[]')).call(_b, 1)));
        return result;
      };

      def.$_reduce_262 = function(val, _values, result) {
        var _a;
        result = ((_a = this).$s || $mm('s')).call(_a, "return");
        return result;
      };

      def.$_reduce_263 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = this).$new_yield || $mm('new_yield')).call(_a, ((_b = val)['$[]'] || $mm('[]')).call(_b, 2));
        return result;
      };

      def.$_reduce_264 = function(val, _values, result) {
        var _a;
        result = ((_a = this).$s || $mm('s')).call(_a, "yield");
        return result;
      };

      def.$_reduce_265 = function(val, _values, result) {
        var _a;
        result = ((_a = this).$s || $mm('s')).call(_a, "yield");
        return result;
      };

      def.$_reduce_266 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = this).$s || $mm('s')).call(_a, "defined", ((_b = val)['$[]'] || $mm('[]')).call(_b, 3));
        return result;
      };

      def.$_reduce_267 = function(val, _values, result) {
        var _a, _b, _c, _d;
        result = ((_a = val)['$[]'] || $mm('[]')).call(_a, 1);
        ((_a = result)['$[]='] || $mm('[]=')).call(_a, 1, ((_b = this).$new_call || $mm('new_call')).call(_b, nil, ((_c = ((_d = val)['$[]'] || $mm('[]')).call(_d, 0)).$intern || $mm('intern')).call(_c), ((_c = this).$s || $mm('s')).call(_c, "arglist")));
        return result;
      };

      def.$_reduce_269 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = val)['$[]'] || $mm('[]')).call(_a, 1);
        ((_a = result)['$[]='] || $mm('[]=')).call(_a, 1, ((_b = val)['$[]'] || $mm('[]')).call(_b, 0));
        return result;
      };

      def.$_reduce_270 = function(val, _values, result) {
        var _a;
        result = ((_a = val)['$[]'] || $mm('[]')).call(_a, 1);
        return result;
      };

      def.$_reduce_271 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = this).$new_if || $mm('new_if')).call(_a, ((_b = val)['$[]'] || $mm('[]')).call(_b, 1), ((_b = val)['$[]'] || $mm('[]')).call(_b, 3), ((_b = val)['$[]'] || $mm('[]')).call(_b, 4));
        return result;
      };

      def.$_reduce_272 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = this).$new_if || $mm('new_if')).call(_a, ((_b = val)['$[]'] || $mm('[]')).call(_b, 1), ((_b = val)['$[]'] || $mm('[]')).call(_b, 4), ((_b = val)['$[]'] || $mm('[]')).call(_b, 3));
        return result;
      };

      def.$_reduce_273 = function(val, _values, result) {
        var _a;
        ((_a = this).$cond_push || $mm('cond_push')).call(_a, 1);
        result = this.line;
        return result;
      };

      def.$_reduce_274 = function(val, _values, result) {
        var _a;
        ((_a = this).$cond_pop || $mm('cond_pop')).call(_a);
        return result;
      };

      def.$_reduce_275 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = this).$s || $mm('s')).call(_a, "while", ((_b = val)['$[]'] || $mm('[]')).call(_b, 2), ((_b = val)['$[]'] || $mm('[]')).call(_b, 5), true);
        ((_a = result)['$line='] || $mm('line=')).call(_a, ((_b = val)['$[]'] || $mm('[]')).call(_b, 1));
        return result;
      };

      def.$_reduce_276 = function(val, _values, result) {
        var _a;
        ((_a = this).$cond_push || $mm('cond_push')).call(_a, 1);
        result = this.line;
        return result;
      };

      def.$_reduce_277 = function(val, _values, result) {
        var _a;
        ((_a = this).$cond_pop || $mm('cond_pop')).call(_a);
        return result;
      };

      def.$_reduce_278 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = this).$s || $mm('s')).call(_a, "until", ((_b = val)['$[]'] || $mm('[]')).call(_b, 2), ((_b = val)['$[]'] || $mm('[]')).call(_b, 5), true);
        ((_a = result)['$line='] || $mm('line=')).call(_a, ((_b = val)['$[]'] || $mm('[]')).call(_b, 1));
        return result;
      };

      def.$_reduce_279 = function(val, _values, result) {
        var _a, _b, _c;
        result = ((_a = this).$s || $mm('s')).apply(_a, ["case", ((_b = val)['$[]'] || $mm('[]')).call(_b, 1)].concat(((_b = val)['$[]'] || $mm('[]')).call(_b, 3)));
        ((_a = result)['$line='] || $mm('line=')).call(_a, ((_b = ((_c = val)['$[]'] || $mm('[]')).call(_c, 1)).$line || $mm('line')).call(_b));
        return result;
      };

      def.$_reduce_280 = function(val, _values, result) {
        var _a, _b, _c;
        result = ((_a = this).$s || $mm('s')).apply(_a, ["case", nil].concat(((_b = val)['$[]'] || $mm('[]')).call(_b, 2)));
        ((_a = result)['$line='] || $mm('line=')).call(_a, ((_b = ((_c = val)['$[]'] || $mm('[]')).call(_c, 2)).$line || $mm('line')).call(_b));
        return result;
      };

      def.$_reduce_281 = function(val, _values, result) {
        var _a, _b, _c;
        result = ((_a = this).$s || $mm('s')).call(_a, "case", nil, ((_b = val)['$[]'] || $mm('[]')).call(_b, 3));
        ((_a = result)['$line='] || $mm('line=')).call(_a, ((_b = ((_c = val)['$[]'] || $mm('[]')).call(_c, 3)).$line || $mm('line')).call(_b));
        return result;
      };

      def.$_reduce_282 = function(val, _values, result) {
        
        result = "this.cond_push(1);";
        return result;
      };

      def.$_reduce_283 = function(val, _values, result) {
        
        result = "this.cond_pop();";
        return result;
      };

      def.$_reduce_285 = function(val, _values, result) {
        
        result = this.line;
        return result;
      };

      def.$_reduce_286 = function(val, _values, result) {
        
        return result;
      };

      def.$_reduce_287 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = this).$new_class || $mm('new_class')).call(_a, ((_b = val)['$[]'] || $mm('[]')).call(_b, 2), ((_b = val)['$[]'] || $mm('[]')).call(_b, 3), ((_b = val)['$[]'] || $mm('[]')).call(_b, 5));
        ((_a = result)['$line='] || $mm('line=')).call(_a, ((_b = val)['$[]'] || $mm('[]')).call(_b, 1));
        ((_a = result)['$end_line='] || $mm('end_line=')).call(_a, this.line);
        return result;
      };

      def.$_reduce_288 = function(val, _values, result) {
        
        result = this.line;
        return result;
      };

      def.$_reduce_289 = function(val, _values, result) {
        
        return result;
      };

      def.$_reduce_290 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = this).$new_sclass || $mm('new_sclass')).call(_a, ((_b = val)['$[]'] || $mm('[]')).call(_b, 3), ((_b = val)['$[]'] || $mm('[]')).call(_b, 6));
        ((_a = result)['$line='] || $mm('line=')).call(_a, ((_b = val)['$[]'] || $mm('[]')).call(_b, 2));
        return result;
      };

      def.$_reduce_291 = function(val, _values, result) {
        
        result = this.line;
        return result;
      };

      def.$_reduce_292 = function(val, _values, result) {
        
        return result;
      };

      def.$_reduce_293 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = this).$new_module || $mm('new_module')).call(_a, ((_b = val)['$[]'] || $mm('[]')).call(_b, 2), ((_b = val)['$[]'] || $mm('[]')).call(_b, 4));
        ((_a = result)['$line='] || $mm('line=')).call(_a, ((_b = val)['$[]'] || $mm('[]')).call(_b, 1));
        ((_a = result)['$end_line='] || $mm('end_line=')).call(_a, this.line);
        return result;
      };

      def.$_reduce_294 = function(val, _values, result) {
        var _a;
        result = this.scope_line;
        ((_a = this).$push_scope || $mm('push_scope')).call(_a);
        return result;
      };

      def.$_reduce_295 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = this).$new_defn || $mm('new_defn')).call(_a, ((_b = val)['$[]'] || $mm('[]')).call(_b, 2), ((_b = val)['$[]'] || $mm('[]')).call(_b, 1), ((_b = val)['$[]'] || $mm('[]')).call(_b, 3), ((_b = val)['$[]'] || $mm('[]')).call(_b, 4));
        ((_a = this).$pop_scope || $mm('pop_scope')).call(_a);
        return result;
      };

      def.$_reduce_296 = function(val, _values, result) {
        
        return result;
      };

      def.$_reduce_297 = function(val, _values, result) {
        var _a;
        result = this.scope_line;
        ((_a = this).$push_scope || $mm('push_scope')).call(_a);
        return result;
      };

      def.$_reduce_298 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = this).$new_defs || $mm('new_defs')).call(_a, ((_b = val)['$[]'] || $mm('[]')).call(_b, 5), ((_b = val)['$[]'] || $mm('[]')).call(_b, 1), ((_b = val)['$[]'] || $mm('[]')).call(_b, 4), ((_b = val)['$[]'] || $mm('[]')).call(_b, 6), ((_b = val)['$[]'] || $mm('[]')).call(_b, 7));
        ((_a = this).$pop_scope || $mm('pop_scope')).call(_a);
        return result;
      };

      def.$_reduce_299 = function(val, _values, result) {
        var _a;
        result = ((_a = this).$s || $mm('s')).call(_a, "break");
        return result;
      };

      def.$_reduce_300 = function(val, _values, result) {
        var _a;
        result = ((_a = this).$s || $mm('s')).call(_a, "next");
        return result;
      };

      def.$_reduce_301 = function(val, _values, result) {
        var _a;
        result = ((_a = this).$s || $mm('s')).call(_a, "redo");
        return result;
      };

      def.$_reduce_311 = function(val, _values, result) {
        var call = nil, _a, _b;
        call = ((_a = this).$new_call || $mm('new_call')).call(_a, nil, "lambda", ((_b = this).$s || $mm('s')).call(_b, "arglist"));
        result = ((_a = this).$new_iter || $mm('new_iter')).call(_a, call, ((_b = val)['$[]'] || $mm('[]')).call(_b, 0), ((_b = val)['$[]'] || $mm('[]')).call(_b, 1));
        return result;
      };

      def.$_reduce_312 = function(val, _values, result) {
        var _a;
        result = ((_a = val)['$[]'] || $mm('[]')).call(_a, 1);
        return result;
      };

      def.$_reduce_313 = function(val, _values, result) {
        
        result = nil;
        return result;
      };

      def.$_reduce_316 = function(val, _values, result) {
        var _a;
        result = ((_a = val)['$[]'] || $mm('[]')).call(_a, 1);
        return result;
      };

      def.$_reduce_317 = function(val, _values, result) {
        var _a;
        result = ((_a = val)['$[]'] || $mm('[]')).call(_a, 1);
        return result;
      };

      def.$_reduce_318 = function(val, _values, result) {
        var _a;
        result = ((_a = val)['$[]'] || $mm('[]')).call(_a, 0);
        return result;
      };

      def.$_reduce_319 = function(val, _values, result) {
        
        result = this.line;
        return result;
      };

      def.$_reduce_320 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = this).$s || $mm('s')).call(_a, "if", ((_b = val)['$[]'] || $mm('[]')).call(_b, 2), ((_b = val)['$[]'] || $mm('[]')).call(_b, 4), ((_b = val)['$[]'] || $mm('[]')).call(_b, 5));
        ((_a = result)['$line='] || $mm('line=')).call(_a, ((_b = val)['$[]'] || $mm('[]')).call(_b, 1));
        return result;
      };

      def.$_reduce_322 = function(val, _values, result) {
        var _a;
        result = ((_a = val)['$[]'] || $mm('[]')).call(_a, 1);
        return result;
      };

      def.$_reduce_323 = function(val, _values, result) {
        var _a;
        result = ((_a = val)['$[]'] || $mm('[]')).call(_a, 0);
        return result;
      };

      def.$_reduce_324 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = this).$new_block_args || $mm('new_block_args')).call(_a, ((_b = val)['$[]'] || $mm('[]')).call(_b, 0), ((_b = val)['$[]'] || $mm('[]')).call(_b, 2), ((_b = val)['$[]'] || $mm('[]')).call(_b, 4), ((_b = val)['$[]'] || $mm('[]')).call(_b, 5));
        return result;
      };

      def.$_reduce_325 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = this).$new_block_args || $mm('new_block_args')).call(_a, ((_b = val)['$[]'] || $mm('[]')).call(_b, 0), ((_b = val)['$[]'] || $mm('[]')).call(_b, 2), nil, ((_b = val)['$[]'] || $mm('[]')).call(_b, 3));
        return result;
      };

      def.$_reduce_326 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = this).$new_block_args || $mm('new_block_args')).call(_a, ((_b = val)['$[]'] || $mm('[]')).call(_b, 0), nil, ((_b = val)['$[]'] || $mm('[]')).call(_b, 2), ((_b = val)['$[]'] || $mm('[]')).call(_b, 3));
        return result;
      };

      def.$_reduce_327 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = this).$new_block_args || $mm('new_block_args')).call(_a, ((_b = val)['$[]'] || $mm('[]')).call(_b, 0), nil, nil, ((_b = val)['$[]'] || $mm('[]')).call(_b, 1));
        return result;
      };

      def.$_reduce_328 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = this).$new_block_args || $mm('new_block_args')).call(_a, nil, ((_b = val)['$[]'] || $mm('[]')).call(_b, 0), ((_b = val)['$[]'] || $mm('[]')).call(_b, 2), ((_b = val)['$[]'] || $mm('[]')).call(_b, 3));
        return result;
      };

      def.$_reduce_329 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = this).$new_block_args || $mm('new_block_args')).call(_a, nil, ((_b = val)['$[]'] || $mm('[]')).call(_b, 0), nil, ((_b = val)['$[]'] || $mm('[]')).call(_b, 1));
        return result;
      };

      def.$_reduce_330 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = this).$new_block_args || $mm('new_block_args')).call(_a, nil, nil, ((_b = val)['$[]'] || $mm('[]')).call(_b, 0), ((_b = val)['$[]'] || $mm('[]')).call(_b, 1));
        return result;
      };

      def.$_reduce_331 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = this).$new_block_args || $mm('new_block_args')).call(_a, nil, nil, nil, ((_b = val)['$[]'] || $mm('[]')).call(_b, 0));
        return result;
      };

      def.$_reduce_332 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = this).$s || $mm('s')).call(_a, "block", ((_b = val)['$[]'] || $mm('[]')).call(_b, 0));
        return result;
      };

      def.$_reduce_333 = function(val, _values, result) {
        var _a, _b;
        ((_a = ((_b = val)['$[]'] || $mm('[]')).call(_b, 0))['$<<'] || $mm('<<')).call(_a, ((_b = val)['$[]'] || $mm('[]')).call(_b, 2));
        result = ((_a = val)['$[]'] || $mm('[]')).call(_a, 0);
        return result;
      };

      def.$_reduce_334 = function(val, _values, result) {
        var _a, _b, _c, _d, _e;
        result = ((_a = this).$new_assign || $mm('new_assign')).call(_a, ((_b = this).$new_assignable || $mm('new_assignable')).call(_b, ((_c = this).$s || $mm('s')).call(_c, "identifier", ((_d = ((_e = val)['$[]'] || $mm('[]')).call(_e, 0)).$intern || $mm('intern')).call(_d))), ((_b = val)['$[]'] || $mm('[]')).call(_b, 2));
        return result;
      };

      def.$_reduce_336 = function(val, _values, result) {
        
        result = 0;
        return result;
      };

      def.$_reduce_337 = function(val, _values, result) {
        
        result = 0;
        return result;
      };

      def.$_reduce_338 = function(val, _values, result) {
        var _a;
        result = ((_a = val)['$[]'] || $mm('[]')).call(_a, 1);
        return result;
      };

      def.$_reduce_339 = function(val, _values, result) {
        var _a;
        ((_a = this).$push_scope || $mm('push_scope')).call(_a, "block");
        result = this.line;
        return result;
      };

      def.$_reduce_340 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = this).$new_iter || $mm('new_iter')).call(_a, nil, ((_b = val)['$[]'] || $mm('[]')).call(_b, 2), ((_b = val)['$[]'] || $mm('[]')).call(_b, 3));
        ((_a = result)['$line='] || $mm('line=')).call(_a, ((_b = val)['$[]'] || $mm('[]')).call(_b, 1));
        ((_a = this).$pop_scope || $mm('pop_scope')).call(_a);
        return result;
      };

      def.$_reduce_341 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = val)['$[]'] || $mm('[]')).call(_a, 1);
        ((_a = result)['$[]='] || $mm('[]=')).call(_a, 1, ((_b = val)['$[]'] || $mm('[]')).call(_b, 0));
        return result;
      };

      def.$_reduce_344 = function(val, _values, result) {
        var _a, _b, _c;
        result = ((_a = this).$new_call || $mm('new_call')).call(_a, nil, ((_b = ((_c = val)['$[]'] || $mm('[]')).call(_c, 0)).$intern || $mm('intern')).call(_b), ((_b = val)['$[]'] || $mm('[]')).call(_b, 1));
        return result;
      };

      def.$_reduce_345 = function(val, _values, result) {
        var _a, _b, _c;
        result = ((_a = this).$new_call || $mm('new_call')).call(_a, ((_b = val)['$[]'] || $mm('[]')).call(_b, 0), ((_b = ((_c = val)['$[]'] || $mm('[]')).call(_c, 2)).$intern || $mm('intern')).call(_b), ((_b = val)['$[]'] || $mm('[]')).call(_b, 3));
        return result;
      };

      def.$_reduce_346 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = this).$new_call || $mm('new_call')).call(_a, ((_b = val)['$[]'] || $mm('[]')).call(_b, 0), "call", ((_b = val)['$[]'] || $mm('[]')).call(_b, 2));
        return result;
      };

      def.$_reduce_347 = function(val, _values, result) {
        var _a, _b, _c;
        result = ((_a = this).$new_call || $mm('new_call')).call(_a, ((_b = val)['$[]'] || $mm('[]')).call(_b, 0), ((_b = ((_c = val)['$[]'] || $mm('[]')).call(_c, 2)).$intern || $mm('intern')).call(_b), ((_b = val)['$[]'] || $mm('[]')).call(_b, 3));
        return result;
      };

      def.$_reduce_348 = function(val, _values, result) {
        var _a, _b, _c;
        result = ((_a = this).$new_call || $mm('new_call')).call(_a, ((_b = val)['$[]'] || $mm('[]')).call(_b, 0), ((_b = ((_c = val)['$[]'] || $mm('[]')).call(_c, 2)).$intern || $mm('intern')).call(_b), ((_b = this).$s || $mm('s')).call(_b, "arglist"));
        return result;
      };

      def.$_reduce_349 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = this).$new_super || $mm('new_super')).call(_a, ((_b = val)['$[]'] || $mm('[]')).call(_b, 1));
        return result;
      };

      def.$_reduce_350 = function(val, _values, result) {
        var _a;
        result = ((_a = this).$s || $mm('s')).call(_a, "zsuper");
        return result;
      };

      def.$_reduce_351 = function(val, _values, result) {
        var _a;
        ((_a = this).$push_scope || $mm('push_scope')).call(_a, "block");
        result = this.line;
        return result;
      };

      def.$_reduce_352 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = this).$new_iter || $mm('new_iter')).call(_a, nil, ((_b = val)['$[]'] || $mm('[]')).call(_b, 2), ((_b = val)['$[]'] || $mm('[]')).call(_b, 3));
        ((_a = result)['$line='] || $mm('line=')).call(_a, ((_b = val)['$[]'] || $mm('[]')).call(_b, 1));
        ((_a = this).$pop_scope || $mm('pop_scope')).call(_a);
        return result;
      };

      def.$_reduce_353 = function(val, _values, result) {
        var _a;
        ((_a = this).$push_scope || $mm('push_scope')).call(_a, "block");
        result = this.line;
        return result;
      };

      def.$_reduce_354 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = this).$new_iter || $mm('new_iter')).call(_a, nil, ((_b = val)['$[]'] || $mm('[]')).call(_b, 2), ((_b = val)['$[]'] || $mm('[]')).call(_b, 3));
        ((_a = result)['$line='] || $mm('line=')).call(_a, ((_b = val)['$[]'] || $mm('[]')).call(_b, 1));
        ((_a = this).$pop_scope || $mm('pop_scope')).call(_a);
        return result;
      };

      def.$_reduce_355 = function(val, _values, result) {
        
        result = this.line;
        return result;
      };

      def.$_reduce_356 = function(val, _values, result) {
        var part = nil, _a, _b, _c;
        part = ((_a = this).$s || $mm('s')).call(_a, "when", ((_b = val)['$[]'] || $mm('[]')).call(_b, 2), ((_b = val)['$[]'] || $mm('[]')).call(_b, 4));
        ((_a = part)['$line='] || $mm('line=')).call(_a, ((_b = ((_c = val)['$[]'] || $mm('[]')).call(_c, 2)).$line || $mm('line')).call(_b));
        result = [part];
        if ((_a = ((_b = val)['$[]'] || $mm('[]')).call(_b, 5)) !== false && _a !== nil) {
          ((_a = result).$push || $mm('push')).apply(_a, [].concat(((_b = val)['$[]'] || $mm('[]')).call(_b, 5)))
        };
        return result;
      };

      def.$_reduce_357 = function(val, _values, result) {
        var _a;
        result = [((_a = val)['$[]'] || $mm('[]')).call(_a, 0)];
        return result;
      };

      def.$_reduce_359 = function(val, _values, result) {
        var exc = nil, _a, _b, _c, _d;
        exc = ((_a = ((_b = val)['$[]'] || $mm('[]')).call(_b, 1)), _a !== false && _a !== nil ? _a : ((_b = this).$s || $mm('s')).call(_b, "array"));
        if ((_a = ((_b = val)['$[]'] || $mm('[]')).call(_b, 2)) !== false && _a !== nil) {
          ((_a = exc)['$<<'] || $mm('<<')).call(_a, ((_b = this).$new_assign || $mm('new_assign')).call(_b, ((_c = val)['$[]'] || $mm('[]')).call(_c, 2), ((_c = this).$s || $mm('s')).call(_c, "gvar", ((_d = "$!").$intern || $mm('intern')).call(_d))))
        };
        result = [((_a = this).$s || $mm('s')).call(_a, "resbody", exc, ((_b = val)['$[]'] || $mm('[]')).call(_b, 4))];
        if ((_a = ((_b = val)['$[]'] || $mm('[]')).call(_b, 5)) !== false && _a !== nil) {
          ((_a = result).$push || $mm('push')).call(_a, ((_b = ((_c = val)['$[]'] || $mm('[]')).call(_c, 5)).$first || $mm('first')).call(_b))
        };
        return result;
      };

      def.$_reduce_360 = function(val, _values, result) {
        
        result = nil;
        return result;
      };

      def.$_reduce_361 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = this).$s || $mm('s')).call(_a, "array", ((_b = val)['$[]'] || $mm('[]')).call(_b, 0));
        return result;
      };

      def.$_reduce_364 = function(val, _values, result) {
        var _a;
        result = ((_a = val)['$[]'] || $mm('[]')).call(_a, 1);
        return result;
      };

      def.$_reduce_365 = function(val, _values, result) {
        
        result = nil;
        return result;
      };

      def.$_reduce_366 = function(val, _values, result) {
        var _a, _b, _c;
        result = (function() { if ((_a = ((_b = ((_c = val)['$[]'] || $mm('[]')).call(_c, 1))['$nil?'] || $mm('nil?')).call(_b)) !== false && _a !== nil) {
          return ((_a = this).$s || $mm('s')).call(_a, "nil")
          } else {
          return ((_a = val)['$[]'] || $mm('[]')).call(_a, 1)
        }; return nil; }).call(this);
        return result;
      };

      def.$_reduce_368 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = this).$s || $mm('s')).call(_a, "lit", ((_b = val)['$[]'] || $mm('[]')).call(_b, 0));
        return result;
      };

      def.$_reduce_369 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = this).$s || $mm('s')).call(_a, "lit", ((_b = val)['$[]'] || $mm('[]')).call(_b, 0));
        return result;
      };

      def.$_reduce_371 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = this).$new_str || $mm('new_str')).call(_a, ((_b = val)['$[]'] || $mm('[]')).call(_b, 0));
        return result;
      };

      def.$_reduce_374 = function(val, _values, result) {
        var _a;
        result = ((_a = val)['$[]'] || $mm('[]')).call(_a, 1);
        return result;
      };

      def.$_reduce_375 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = this).$s || $mm('s')).call(_a, "str", ((_b = val)['$[]'] || $mm('[]')).call(_b, 0));
        return result;
      };

      def.$_reduce_376 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = this).$new_xstr || $mm('new_xstr')).call(_a, ((_b = val)['$[]'] || $mm('[]')).call(_b, 1));
        return result;
      };

      def.$_reduce_377 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = this).$new_regexp || $mm('new_regexp')).call(_a, ((_b = val)['$[]'] || $mm('[]')).call(_b, 1), ((_b = val)['$[]'] || $mm('[]')).call(_b, 2));
        return result;
      };

      def.$_reduce_378 = function(val, _values, result) {
        var _a;
        result = ((_a = this).$s || $mm('s')).call(_a, "array");
        return result;
      };

      def.$_reduce_379 = function(val, _values, result) {
        var _a;
        result = ((_a = val)['$[]'] || $mm('[]')).call(_a, 1);
        return result;
      };

      def.$_reduce_380 = function(val, _values, result) {
        var _a;
        result = ((_a = this).$s || $mm('s')).call(_a, "array");
        return result;
      };

      def.$_reduce_381 = function(val, _values, result) {
        var part = nil, _a, _b;
        part = ((_a = val)['$[]'] || $mm('[]')).call(_a, 1);
        if (((_a = ((_b = part)['$[]'] || $mm('[]')).call(_b, 0))['$=='] || $mm('==')).call(_a, "evstr")) {
          part = ((_a = this).$s || $mm('s')).call(_a, "dstr", "", ((_b = val)['$[]'] || $mm('[]')).call(_b, 1))
        };
        result = ((_a = ((_b = val)['$[]'] || $mm('[]')).call(_b, 0))['$<<'] || $mm('<<')).call(_a, part);
        return result;
      };

      def.$_reduce_382 = function(val, _values, result) {
        var _a;
        result = ((_a = val)['$[]'] || $mm('[]')).call(_a, 0);
        return result;
      };

      def.$_reduce_383 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = ((_b = val)['$[]'] || $mm('[]')).call(_b, 0)).$concat || $mm('concat')).call(_a, [((_b = val)['$[]'] || $mm('[]')).call(_b, 1)]);
        return result;
      };

      def.$_reduce_384 = function(val, _values, result) {
        var _a;
        result = ((_a = this).$s || $mm('s')).call(_a, "array");
        return result;
      };

      def.$_reduce_385 = function(val, _values, result) {
        var _a;
        result = ((_a = val)['$[]'] || $mm('[]')).call(_a, 1);
        return result;
      };

      def.$_reduce_386 = function(val, _values, result) {
        var _a;
        result = ((_a = this).$s || $mm('s')).call(_a, "array");
        return result;
      };

      def.$_reduce_387 = function(val, _values, result) {
        var _a, _b, _c;
        result = ((_a = ((_b = val)['$[]'] || $mm('[]')).call(_b, 0))['$<<'] || $mm('<<')).call(_a, ((_b = this).$s || $mm('s')).call(_b, "str", ((_c = val)['$[]'] || $mm('[]')).call(_c, 1)));
        return result;
      };

      def.$_reduce_388 = function(val, _values, result) {
        
        result = nil;
        return result;
      };

      def.$_reduce_389 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = this).$str_append || $mm('str_append')).call(_a, ((_b = val)['$[]'] || $mm('[]')).call(_b, 0), ((_b = val)['$[]'] || $mm('[]')).call(_b, 1));
        return result;
      };

      def.$_reduce_390 = function(val, _values, result) {
        
        result = nil;
        return result;
      };

      def.$_reduce_391 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = this).$str_append || $mm('str_append')).call(_a, ((_b = val)['$[]'] || $mm('[]')).call(_b, 0), ((_b = val)['$[]'] || $mm('[]')).call(_b, 1));
        return result;
      };

      def.$_reduce_392 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = this).$s || $mm('s')).call(_a, "str", ((_b = val)['$[]'] || $mm('[]')).call(_b, 0));
        return result;
      };

      def.$_reduce_393 = function(val, _values, result) {
        
        result = this.string_parse;
        this.string_parse = nil;
        return result;
      };

      def.$_reduce_394 = function(val, _values, result) {
        var _a, _b;
        this.string_parse = ((_a = val)['$[]'] || $mm('[]')).call(_a, 1);
        result = ((_a = this).$s || $mm('s')).call(_a, "evstr", ((_b = val)['$[]'] || $mm('[]')).call(_b, 2));
        return result;
      };

      def.$_reduce_395 = function(val, _values, result) {
        var _a;
        ((_a = this).$cond_push || $mm('cond_push')).call(_a, 0);
        ((_a = this).$cmdarg_push || $mm('cmdarg_push')).call(_a, 0);
        result = this.string_parse;
        this.string_parse = nil;
        this.lex_state = "expr_beg";
        return result;
      };

      def.$_reduce_396 = function(val, _values, result) {
        var _a, _b;
        this.string_parse = ((_a = val)['$[]'] || $mm('[]')).call(_a, 1);
        ((_a = this).$cond_lexpop || $mm('cond_lexpop')).call(_a);
        ((_a = this).$cmdarg_lexpop || $mm('cmdarg_lexpop')).call(_a);
        result = ((_a = this).$s || $mm('s')).call(_a, "evstr", ((_b = val)['$[]'] || $mm('[]')).call(_b, 2));
        return result;
      };

      def.$_reduce_397 = function(val, _values, result) {
        var _a, _b, _c;
        result = ((_a = this).$s || $mm('s')).call(_a, "gvar", ((_b = ((_c = val)['$[]'] || $mm('[]')).call(_c, 0)).$intern || $mm('intern')).call(_b));
        return result;
      };

      def.$_reduce_398 = function(val, _values, result) {
        var _a, _b, _c;
        result = ((_a = this).$s || $mm('s')).call(_a, "ivar", ((_b = ((_c = val)['$[]'] || $mm('[]')).call(_c, 0)).$intern || $mm('intern')).call(_b));
        return result;
      };

      def.$_reduce_399 = function(val, _values, result) {
        var _a, _b, _c;
        result = ((_a = this).$s || $mm('s')).call(_a, "cvar", ((_b = ((_c = val)['$[]'] || $mm('[]')).call(_c, 0)).$intern || $mm('intern')).call(_b));
        return result;
      };

      def.$_reduce_401 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = ((_b = val)['$[]'] || $mm('[]')).call(_b, 1)).$intern || $mm('intern')).call(_a);
        this.lex_state = "expr_end";
        return result;
      };

      def.$_reduce_407 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = this).$new_dsym || $mm('new_dsym')).call(_a, ((_b = val)['$[]'] || $mm('[]')).call(_b, 1));
        return result;
      };

      def.$_reduce_412 = function(val, _values, result) {
        var _a, _b, _c;
        result = ((_a = this).$s || $mm('s')).call(_a, "identifier", ((_b = ((_c = val)['$[]'] || $mm('[]')).call(_c, 0)).$intern || $mm('intern')).call(_b));
        return result;
      };

      def.$_reduce_413 = function(val, _values, result) {
        var _a, _b, _c;
        result = ((_a = this).$s || $mm('s')).call(_a, "ivar", ((_b = ((_c = val)['$[]'] || $mm('[]')).call(_c, 0)).$intern || $mm('intern')).call(_b));
        return result;
      };

      def.$_reduce_414 = function(val, _values, result) {
        var _a, _b, _c;
        result = ((_a = this).$s || $mm('s')).call(_a, "gvar", ((_b = ((_c = val)['$[]'] || $mm('[]')).call(_c, 0)).$intern || $mm('intern')).call(_b));
        return result;
      };

      def.$_reduce_415 = function(val, _values, result) {
        var _a, _b, _c;
        result = ((_a = this).$s || $mm('s')).call(_a, "const", ((_b = ((_c = val)['$[]'] || $mm('[]')).call(_c, 0)).$intern || $mm('intern')).call(_b));
        return result;
      };

      def.$_reduce_416 = function(val, _values, result) {
        var _a, _b, _c;
        result = ((_a = this).$s || $mm('s')).call(_a, "cvar", ((_b = ((_c = val)['$[]'] || $mm('[]')).call(_c, 0)).$intern || $mm('intern')).call(_b));
        return result;
      };

      def.$_reduce_417 = function(val, _values, result) {
        var _a;
        result = ((_a = this).$s || $mm('s')).call(_a, "nil");
        return result;
      };

      def.$_reduce_418 = function(val, _values, result) {
        var _a;
        result = ((_a = this).$s || $mm('s')).call(_a, "self");
        return result;
      };

      def.$_reduce_419 = function(val, _values, result) {
        var _a;
        result = ((_a = this).$s || $mm('s')).call(_a, "true");
        return result;
      };

      def.$_reduce_420 = function(val, _values, result) {
        var _a;
        result = ((_a = this).$s || $mm('s')).call(_a, "false");
        return result;
      };

      def.$_reduce_421 = function(val, _values, result) {
        var _a;
        result = ((_a = this).$s || $mm('s')).call(_a, "str", this.file);
        return result;
      };

      def.$_reduce_422 = function(val, _values, result) {
        var _a;
        result = ((_a = this).$s || $mm('s')).call(_a, "lit", this.line);
        return result;
      };

      def.$_reduce_423 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = this).$new_var_ref || $mm('new_var_ref')).call(_a, ((_b = val)['$[]'] || $mm('[]')).call(_b, 0));
        return result;
      };

      def.$_reduce_424 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = this).$new_assignable || $mm('new_assignable')).call(_a, ((_b = val)['$[]'] || $mm('[]')).call(_b, 0));
        return result;
      };

      def.$_reduce_427 = function(val, _values, result) {
        
        result = nil;
        return result;
      };

      def.$_reduce_428 = function(val, _values, result) {
        var _a;
        result = ((_a = val)['$[]'] || $mm('[]')).call(_a, 1);
        return result;
      };

      def.$_reduce_429 = function(val, _values, result) {
        
        result = nil;
        return result;
      };

      def.$_reduce_430 = function(val, _values, result) {
        var _a;
        result = ((_a = val)['$[]'] || $mm('[]')).call(_a, 1);
        return result;
      };

      def.$_reduce_431 = function(val, _values, result) {
        var _a;
        result = ((_a = val)['$[]'] || $mm('[]')).call(_a, 0);
        return result;
      };

      def.$_reduce_432 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = this).$new_args || $mm('new_args')).call(_a, ((_b = val)['$[]'] || $mm('[]')).call(_b, 0), ((_b = val)['$[]'] || $mm('[]')).call(_b, 2), ((_b = val)['$[]'] || $mm('[]')).call(_b, 4), ((_b = val)['$[]'] || $mm('[]')).call(_b, 5));
        return result;
      };

      def.$_reduce_433 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = this).$new_args || $mm('new_args')).call(_a, ((_b = val)['$[]'] || $mm('[]')).call(_b, 0), ((_b = val)['$[]'] || $mm('[]')).call(_b, 2), nil, ((_b = val)['$[]'] || $mm('[]')).call(_b, 3));
        return result;
      };

      def.$_reduce_434 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = this).$new_args || $mm('new_args')).call(_a, ((_b = val)['$[]'] || $mm('[]')).call(_b, 0), nil, ((_b = val)['$[]'] || $mm('[]')).call(_b, 2), ((_b = val)['$[]'] || $mm('[]')).call(_b, 3));
        return result;
      };

      def.$_reduce_435 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = this).$new_args || $mm('new_args')).call(_a, ((_b = val)['$[]'] || $mm('[]')).call(_b, 0), nil, nil, ((_b = val)['$[]'] || $mm('[]')).call(_b, 1));
        return result;
      };

      def.$_reduce_436 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = this).$new_args || $mm('new_args')).call(_a, nil, ((_b = val)['$[]'] || $mm('[]')).call(_b, 0), ((_b = val)['$[]'] || $mm('[]')).call(_b, 2), ((_b = val)['$[]'] || $mm('[]')).call(_b, 3));
        return result;
      };

      def.$_reduce_437 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = this).$new_args || $mm('new_args')).call(_a, nil, ((_b = val)['$[]'] || $mm('[]')).call(_b, 0), nil, ((_b = val)['$[]'] || $mm('[]')).call(_b, 1));
        return result;
      };

      def.$_reduce_438 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = this).$new_args || $mm('new_args')).call(_a, nil, nil, ((_b = val)['$[]'] || $mm('[]')).call(_b, 0), ((_b = val)['$[]'] || $mm('[]')).call(_b, 1));
        return result;
      };

      def.$_reduce_439 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = this).$new_args || $mm('new_args')).call(_a, nil, nil, nil, ((_b = val)['$[]'] || $mm('[]')).call(_b, 0));
        return result;
      };

      def.$_reduce_440 = function(val, _values, result) {
        var _a;
        result = ((_a = this).$s || $mm('s')).call(_a, "args");
        return result;
      };

      def.$_reduce_441 = function(val, _values, result) {
        var _a;
        ((_a = this).$raise || $mm('raise')).call(_a, "formal argument cannot be a constant");
        return result;
      };

      def.$_reduce_442 = function(val, _values, result) {
        var _a;
        ((_a = this).$raise || $mm('raise')).call(_a, "formal argument cannot be an instance variable");
        return result;
      };

      def.$_reduce_443 = function(val, _values, result) {
        var _a;
        ((_a = this).$raise || $mm('raise')).call(_a, "formal argument cannot be a class variable");
        return result;
      };

      def.$_reduce_444 = function(val, _values, result) {
        var _a;
        ((_a = this).$raise || $mm('raise')).call(_a, "formal argument cannot be a global variable");
        return result;
      };

      def.$_reduce_445 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = ((_b = val)['$[]'] || $mm('[]')).call(_b, 0)).$intern || $mm('intern')).call(_a);
        ((_a = this.scope).$add_local || $mm('add_local')).call(_a, result);
        return result;
      };

      def.$_reduce_446 = function(val, _values, result) {
        var _a;
        result = [((_a = val)['$[]'] || $mm('[]')).call(_a, 0)];
        return result;
      };

      def.$_reduce_447 = function(val, _values, result) {
        var _a, _b;
        ((_a = ((_b = val)['$[]'] || $mm('[]')).call(_b, 0))['$<<'] || $mm('<<')).call(_a, ((_b = val)['$[]'] || $mm('[]')).call(_b, 2));
        result = ((_a = val)['$[]'] || $mm('[]')).call(_a, 0);
        return result;
      };

      def.$_reduce_448 = function(val, _values, result) {
        var _a, _b, _c, _d, _e;
        result = ((_a = this).$new_assign || $mm('new_assign')).call(_a, ((_b = this).$new_assignable || $mm('new_assignable')).call(_b, ((_c = this).$s || $mm('s')).call(_c, "identifier", ((_d = ((_e = val)['$[]'] || $mm('[]')).call(_e, 0)).$intern || $mm('intern')).call(_d))), ((_b = val)['$[]'] || $mm('[]')).call(_b, 2));
        return result;
      };

      def.$_reduce_449 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = this).$s || $mm('s')).call(_a, "block", ((_b = val)['$[]'] || $mm('[]')).call(_b, 0));
        return result;
      };

      def.$_reduce_450 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = val)['$[]'] || $mm('[]')).call(_a, 0);
        ((_a = ((_b = val)['$[]'] || $mm('[]')).call(_b, 0))['$<<'] || $mm('<<')).call(_a, ((_b = val)['$[]'] || $mm('[]')).call(_b, 2));
        return result;
      };

      def.$_reduce_453 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = ("*" + (((_b = val)['$[]'] || $mm('[]')).call(_b, 1)))).$intern || $mm('intern')).call(_a);
        return result;
      };

      def.$_reduce_454 = function(val, _values, result) {
        
        result = "*";
        return result;
      };

      def.$_reduce_457 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = ("&" + (((_b = val)['$[]'] || $mm('[]')).call(_b, 1)))).$intern || $mm('intern')).call(_a);
        return result;
      };

      def.$_reduce_458 = function(val, _values, result) {
        var _a;
        result = ((_a = val)['$[]'] || $mm('[]')).call(_a, 1);
        return result;
      };

      def.$_reduce_459 = function(val, _values, result) {
        
        result = nil;
        return result;
      };

      def.$_reduce_460 = function(val, _values, result) {
        var _a;
        result = ((_a = val)['$[]'] || $mm('[]')).call(_a, 0);
        return result;
      };

      def.$_reduce_461 = function(val, _values, result) {
        var _a;
        result = ((_a = val)['$[]'] || $mm('[]')).call(_a, 1);
        return result;
      };

      def.$_reduce_462 = function(val, _values, result) {
        
        result = [];
        return result;
      };

      def.$_reduce_463 = function(val, _values, result) {
        var _a;
        result = ((_a = val)['$[]'] || $mm('[]')).call(_a, 0);
        return result;
      };

      def.$_reduce_464 = function(val, _values, result) {
        var _a;
        ((_a = this).$raise || $mm('raise')).call(_a, "unsupported assoc list type (" + (this.line_number) + ")");
        return result;
      };

      def.$_reduce_465 = function(val, _values, result) {
        var _a;
        result = ((_a = val)['$[]'] || $mm('[]')).call(_a, 0);
        return result;
      };

      def.$_reduce_466 = function(val, _values, result) {
        var _a, _b;
        result = ((_a = ((_b = val)['$[]'] || $mm('[]')).call(_b, 0)).$push || $mm('push')).apply(_a, [].concat(((_b = val)['$[]'] || $mm('[]')).call(_b, 2)));
        return result;
      };

      def.$_reduce_467 = function(val, _values, result) {
        var _a;
        result = [((_a = val)['$[]'] || $mm('[]')).call(_a, 0), ((_a = val)['$[]'] || $mm('[]')).call(_a, 2)];
        return result;
      };

      def.$_reduce_468 = function(val, _values, result) {
        var _a, _b, _c;
        result = [((_a = this).$s || $mm('s')).call(_a, "lit", ((_b = ((_c = val)['$[]'] || $mm('[]')).call(_c, 0)).$intern || $mm('intern')).call(_b)), ((_a = val)['$[]'] || $mm('[]')).call(_a, 1)];
        return result;
      };

      def.$_reduce_none = function(val, _values, result) {
        var _a;
        return ((_a = val)['$[]'] || $mm('[]')).call(_a, 0);
      };

      return nil;
    })(Opal, ((_a = (((_b = __scope.Racc) == null ? __opal.cm("Racc") : _b))._scope.Parser) == null ? __opal.cm("Parser") : _a))
    
  })(self);
})(Opal);

  (function(__opal) {
  var self = __opal.top, __scope = __opal, nil = __opal.nil, $mm = __opal.mm, __breaker = __opal.breaker, __slice = __opal.slice, __klass = __opal.klass, __module = __opal.module, __range = __opal.range, __hash2 = __opal.hash2;
  (function(__base, __super){
    function Array() {};
    Array = __klass(__base, __super, "Array", Array);

    var def = Array.prototype, __scope = Array._scope;
    def.line = def.end_line = nil;

    def.$line = function() {
      
      return this.line
    }, 
    def['$line='] = function(val) {
      
      return this.line = val
    }, nil;

    return def.$end_line = function() {
      
      return this.end_line
    }, 
    def['$end_line='] = function(val) {
      
      return this.end_line = val
    }, nil;
  })(self, null);
  return (function(__base){
    function Opal() {};
    Opal = __module(__base, "Opal", Opal);
    var def = Opal.prototype, __scope = Opal._scope, _a, _b;

    (function(__base, __super){
      function Grammar() {};
      Grammar = __klass(__base, __super, "Grammar", Grammar);

      var def = Grammar.prototype, __scope = Grammar._scope;
      def.line = def.file = def.scopes = def.scope = def.cond = def.cmdarg = def.string_parse = def.scanner = def.lex_state = def.start_of_lambda = nil;

      def.$line = function() {
        
        return this.line
      }, nil;

      def.$initialize = function() {
        
        this.lex_state = "expr_beg";
        this.cond = 0;
        this.cmdarg = 0;
        this.line = 1;
        this.scopes = [];
        return this.string_parse_stack = [];
      };

      def.$s = function(parts) {
        var sexp = nil, _a, _b;parts = __slice.call(arguments, 0);
        sexp = ((_a = ((_b = __scope.Array) == null ? __opal.cm("Array") : _b)).$new || $mm('new')).call(_a, parts);
        ((_a = sexp)['$line='] || $mm('line=')).call(_a, this.line);
        return sexp;
      };

      def.$parse = function(source, file) {
        var result = nil, _a, _b;if (file == null) {
          file = "(string)"
        }
        this.file = file;
        this.scanner = ((_a = ((_b = __scope.StringScanner) == null ? __opal.cm("StringScanner") : _b)).$new || $mm('new')).call(_a, source);
        ((_a = this).$push_scope || $mm('push_scope')).call(_a);
        result = ((_a = this).$do_parse || $mm('do_parse')).call(_a);
        ((_a = this).$pop_scope || $mm('pop_scope')).call(_a);
        return result;
      };

      def.$on_error = function(t, val, vstack) {
        var _a, _b;
        return ((_a = this).$raise || $mm('raise')).call(_a, "parse error on value " + (((_b = val).$inspect || $mm('inspect')).call(_b)) + " :" + (this.file) + ":" + (this.line));
      };

      (function(__base, __super){
        function LexerScope() {};
        LexerScope = __klass(__base, __super, "LexerScope", LexerScope);

        var def = LexerScope.prototype, __scope = LexerScope._scope;
        def.locals = def.parent = def.block = nil;

        def.$locals = function() {
          
          return this.locals
        }, nil;

        def.$parent = function() {
          
          return this.parent
        }, 
        def['$parent='] = function(val) {
          
          return this.parent = val
        }, nil;

        def.$initialize = function(type) {
          var _a;
          this.block = ((_a = type)['$=='] || $mm('==')).call(_a, "block");
          this.locals = [];
          return this.parent = nil;
        };

        def.$add_local = function(local) {
          var _a;
          return ((_a = this.locals)['$<<'] || $mm('<<')).call(_a, local);
        };

        def['$has_local?'] = function(local) {
          var _a, _b;
          if ((_a = ((_b = this.locals)['$include?'] || $mm('include?')).call(_b, local)) !== false && _a !== nil) {
            return true
          };
          if ((_a = (_b = this.parent, _b !== false && _b !== nil ? this.block : _b)) !== false && _a !== nil) {
            return ((_a = this.parent)['$has_local?'] || $mm('has_local?')).call(_a, local)
          };
          return false;
        };

        return nil;
      })(Grammar, null);

      def.$push_scope = function(type) {
        var top = nil, scope = nil, _a, _b;if (type == null) {
          type = nil
        }
        top = ((_a = this.scopes).$last || $mm('last')).call(_a);
        scope = ((_a = ((_b = __scope.LexerScope) == null ? __opal.cm("LexerScope") : _b)).$new || $mm('new')).call(_a, type);
        ((_a = scope)['$parent='] || $mm('parent=')).call(_a, top);
        ((_a = this.scopes)['$<<'] || $mm('<<')).call(_a, scope);
        return this.scope = scope;
      };

      def.$pop_scope = function() {
        var _a;
        ((_a = this.scopes).$pop || $mm('pop')).call(_a);
        return this.scope = ((_a = this.scopes).$last || $mm('last')).call(_a);
      };

      def.$new_block = function(stmt) {
        var s = nil, _a;if (stmt == null) {
          stmt = nil
        }
        s = ((_a = this).$s || $mm('s')).call(_a, "block");
        if (stmt !== false && stmt !== nil) {
          ((_a = s)['$<<'] || $mm('<<')).call(_a, stmt)
        };
        return s;
      };

      def.$new_compstmt = function(block) {
        var _a, _b, _c;
        if (((_a = ((_b = block).$size || $mm('size')).call(_b))['$=='] || $mm('==')).call(_a, 1)) {
          return nil
          } else {
          if (((_a = ((_b = block).$size || $mm('size')).call(_b))['$=='] || $mm('==')).call(_a, 2)) {
            return ((_a = block)['$[]'] || $mm('[]')).call(_a, 1)
            } else {
            ((_a = block)['$line='] || $mm('line=')).call(_a, ((_b = ((_c = block)['$[]'] || $mm('[]')).call(_c, 1)).$line || $mm('line')).call(_b));
            return block;
          }
        };
      };

      def.$new_body = function(compstmt, res, els, ens) {
        var s = nil, _a, _b, TMP_1;
        s = ((_a = compstmt), _a !== false && _a !== nil ? _a : ((_b = this).$s || $mm('s')).call(_b, "block"));
        if (compstmt !== false && compstmt !== nil) {
          ((_a = s)['$line='] || $mm('line=')).call(_a, ((_b = compstmt).$line || $mm('line')).call(_b))
        };
        if (res !== false && res !== nil) {
          s = ((_a = this).$s || $mm('s')).call(_a, "rescue", s);
          ((_a = res).$each || $mm('each')).call(_a, (TMP_1 = function(r) {

            var self = TMP_1._s || this, _a;
            if (r == null) r = nil;

            return ((_a = s)['$<<'] || $mm('<<')).call(_a, r)
          }, TMP_1._s = this, TMP_1));
          if (els !== false && els !== nil) {
            ((_a = s)['$<<'] || $mm('<<')).call(_a, els)
          };
        };
        if (ens !== false && ens !== nil) {
          return ((_a = this).$s || $mm('s')).call(_a, "ensure", s, ens)
          } else {
          return s
        };
      };

      def.$new_defn = function(line, name, args, body) {
        var scope = nil, s = nil, _a, _b, _c, _d;
        if ((_a = (_b = ((_c = ((_d = body)['$[]'] || $mm('[]')).call(_d, 0))['$=='] || $mm('==')).call(_c, "block"), (_b === nil || _b === false))) !== false && _a !== nil) {
          body = ((_a = this).$s || $mm('s')).call(_a, "block", body)
        };
        scope = ((_a = this).$s || $mm('s')).call(_a, "scope", body);
        if (((_a = ((_b = body).$size || $mm('size')).call(_b))['$=='] || $mm('==')).call(_a, 1)) {
          ((_a = body)['$<<'] || $mm('<<')).call(_a, ((_b = this).$s || $mm('s')).call(_b, "nil"))
        };
        ((_a = scope)['$line='] || $mm('line=')).call(_a, ((_b = body).$line || $mm('line')).call(_b));
        ((_a = args)['$line='] || $mm('line=')).call(_a, line);
        s = ((_a = this).$s || $mm('s')).call(_a, "defn", ((_b = name).$to_sym || $mm('to_sym')).call(_b), args, scope);
        ((_a = s)['$line='] || $mm('line=')).call(_a, line);
        ((_a = s)['$end_line='] || $mm('end_line=')).call(_a, this.line);
        return s;
      };

      def.$new_defs = function(line, recv, name, args, body) {
        var scope = nil, s = nil, _a, _b;
        scope = ((_a = this).$s || $mm('s')).call(_a, "scope", body);
        ((_a = scope)['$line='] || $mm('line=')).call(_a, ((_b = body).$line || $mm('line')).call(_b));
        s = ((_a = this).$s || $mm('s')).call(_a, "defs", recv, ((_b = name).$to_sym || $mm('to_sym')).call(_b), args, scope);
        ((_a = s)['$line='] || $mm('line=')).call(_a, line);
        ((_a = s)['$end_line='] || $mm('end_line=')).call(_a, this.line);
        return s;
      };

      def.$new_class = function(path, sup, body) {
        var scope = nil, s = nil, _a, _b, _c;
        scope = ((_a = this).$s || $mm('s')).call(_a, "scope");
        if ((_a = ((_b = ((_c = body).$size || $mm('size')).call(_c))['$=='] || $mm('==')).call(_b, 1)) === false || _a === nil) {
          ((_a = scope)['$<<'] || $mm('<<')).call(_a, body)
        };
        ((_a = scope)['$line='] || $mm('line=')).call(_a, ((_b = body).$line || $mm('line')).call(_b));
        s = ((_a = this).$s || $mm('s')).call(_a, "class", path, sup, scope);
        return s;
      };

      def.$new_sclass = function(expr, body) {
        var scope = nil, s = nil, _a, _b;
        scope = ((_a = this).$s || $mm('s')).call(_a, "scope");
        ((_a = scope)['$<<'] || $mm('<<')).call(_a, body);
        ((_a = scope)['$line='] || $mm('line=')).call(_a, ((_b = body).$line || $mm('line')).call(_b));
        s = ((_a = this).$s || $mm('s')).call(_a, "sclass", expr, scope);
        return s;
      };

      def.$new_module = function(path, body) {
        var scope = nil, s = nil, _a, _b, _c;
        scope = ((_a = this).$s || $mm('s')).call(_a, "scope");
        if ((_a = ((_b = ((_c = body).$size || $mm('size')).call(_c))['$=='] || $mm('==')).call(_b, 1)) === false || _a === nil) {
          ((_a = scope)['$<<'] || $mm('<<')).call(_a, body)
        };
        ((_a = scope)['$line='] || $mm('line=')).call(_a, ((_b = body).$line || $mm('line')).call(_b));
        s = ((_a = this).$s || $mm('s')).call(_a, "module", path, scope);
        return s;
      };

      def.$new_iter = function(call, args, body) {
        var s = nil, _a;
        s = ((_a = this).$s || $mm('s')).call(_a, "iter", call, args);
        if (body !== false && body !== nil) {
          ((_a = s)['$<<'] || $mm('<<')).call(_a, body)
        };
        ((_a = s)['$end_line='] || $mm('end_line=')).call(_a, this.line);
        return s;
      };

      def.$new_if = function(expr, stmt, tail) {
        var s = nil, _a, _b;
        s = ((_a = this).$s || $mm('s')).call(_a, "if", expr, stmt, tail);
        ((_a = s)['$line='] || $mm('line=')).call(_a, ((_b = expr).$line || $mm('line')).call(_b));
        ((_a = s)['$end_line='] || $mm('end_line=')).call(_a, this.line);
        return s;
      };

      def.$new_args = function(norm, opt, rest, block) {
        var res = nil, rest_str = nil, _a, TMP_2, TMP_3, _b, _c, _d;
        res = ((_a = this).$s || $mm('s')).call(_a, "args");
        if (norm !== false && norm !== nil) {
          ((_a = norm).$each || $mm('each')).call(_a, (TMP_2 = function(arg) {

            var self = TMP_2._s || this, _a;
            if (self.scope == null) self.scope = nil;

            if (arg == null) arg = nil;

            ((_a = self.scope).$add_local || $mm('add_local')).call(_a, arg);
            return ((_a = res)['$<<'] || $mm('<<')).call(_a, arg);
          }, TMP_2._s = this, TMP_2))
        };
        if (opt !== false && opt !== nil) {
          ((_a = ((_b = opt)['$[]'] || $mm('[]')).call(_b, __range(1, -1, false))).$each || $mm('each')).call(_a, (TMP_3 = function(_opt) {

            var self = TMP_3._s || this, _a, _b;
            if (_opt == null) _opt = nil;

            return ((_a = res)['$<<'] || $mm('<<')).call(_a, ((_b = _opt)['$[]'] || $mm('[]')).call(_b, 1))
          }, TMP_3._s = this, TMP_3))
        };
        if (rest !== false && rest !== nil) {
          ((_a = res)['$<<'] || $mm('<<')).call(_a, rest);
          rest_str = ((_a = ((_b = rest).$to_s || $mm('to_s')).call(_b))['$[]'] || $mm('[]')).call(_a, __range(1, -1, false));
          if ((_a = ((_b = rest_str)['$empty?'] || $mm('empty?')).call(_b)) === false || _a === nil) {
            ((_a = this.scope).$add_local || $mm('add_local')).call(_a, ((_b = rest_str).$to_sym || $mm('to_sym')).call(_b))
          };
        };
        if (block !== false && block !== nil) {
          ((_a = res)['$<<'] || $mm('<<')).call(_a, block);
          ((_a = this.scope).$add_local || $mm('add_local')).call(_a, ((_b = ((_c = ((_d = block).$to_s || $mm('to_s')).call(_d))['$[]'] || $mm('[]')).call(_c, __range(1, -1, false))).$to_sym || $mm('to_sym')).call(_b));
        };
        if (opt !== false && opt !== nil) {
          ((_a = res)['$<<'] || $mm('<<')).call(_a, opt)
        };
        return res;
      };

      def.$new_block_args = function(norm, opt, rest, block) {
        var res = nil, r = nil, b = nil, _a, TMP_4, TMP_5, _b, _c, _d;
        res = ((_a = this).$s || $mm('s')).call(_a, "array");
        if (norm !== false && norm !== nil) {
          ((_a = norm).$each || $mm('each')).call(_a, (TMP_4 = function(arg) {

            var self = TMP_4._s || this, _a, _b;
            if (self.scope == null) self.scope = nil;

            if (arg == null) arg = nil;

            ((_a = self.scope).$add_local || $mm('add_local')).call(_a, arg);
            return ((_a = res)['$<<'] || $mm('<<')).call(_a, ((_b = self).$s || $mm('s')).call(_b, "lasgn", arg));
          }, TMP_4._s = this, TMP_4))
        };
        if (opt !== false && opt !== nil) {
          ((_a = ((_b = opt)['$[]'] || $mm('[]')).call(_b, __range(1, -1, false))).$each || $mm('each')).call(_a, (TMP_5 = function(_opt) {

            var self = TMP_5._s || this, _a, _b, _c;
            if (_opt == null) _opt = nil;

            return ((_a = res)['$<<'] || $mm('<<')).call(_a, ((_b = self).$s || $mm('s')).call(_b, "lasgn", ((_c = _opt)['$[]'] || $mm('[]')).call(_c, 1)))
          }, TMP_5._s = this, TMP_5))
        };
        if (rest !== false && rest !== nil) {
          r = ((_a = ((_b = ((_c = rest).$to_s || $mm('to_s')).call(_c))['$[]'] || $mm('[]')).call(_b, __range(1, -1, false))).$to_sym || $mm('to_sym')).call(_a);
          ((_a = res)['$<<'] || $mm('<<')).call(_a, ((_b = this).$s || $mm('s')).call(_b, "splat", ((_c = this).$s || $mm('s')).call(_c, "lasgn", r)));
          ((_a = this.scope).$add_local || $mm('add_local')).call(_a, r);
        };
        if (block !== false && block !== nil) {
          b = ((_a = ((_b = ((_c = block).$to_s || $mm('to_s')).call(_c))['$[]'] || $mm('[]')).call(_b, __range(1, -1, false))).$to_sym || $mm('to_sym')).call(_a);
          ((_a = res)['$<<'] || $mm('<<')).call(_a, ((_b = this).$s || $mm('s')).call(_b, "block_pass", ((_c = this).$s || $mm('s')).call(_c, "lasgn", b)));
          ((_a = this.scope).$add_local || $mm('add_local')).call(_a, b);
        };
        if (opt !== false && opt !== nil) {
          ((_a = res)['$<<'] || $mm('<<')).call(_a, opt)
        };
        if ((_a = ((_b = ((_c = ((_d = res).$size || $mm('size')).call(_d))['$=='] || $mm('==')).call(_c, 2)) ? norm : _b)) !== false && _a !== nil) {
          return ((_a = res)['$[]'] || $mm('[]')).call(_a, 1)
          } else {
          return ((_a = this).$s || $mm('s')).call(_a, "masgn", res)
        };
      };

      def.$new_call = function(recv, meth, args) {
        var call = nil, _a, _b, _c;if (args == null) {
          args = nil
        }
        call = ((_a = this).$s || $mm('s')).call(_a, "call", recv, meth);
        if ((_a = args) === false || _a === nil) {
          args = ((_a = this).$s || $mm('s')).call(_a, "arglist")
        };
        if (((_a = ((_b = args)['$[]'] || $mm('[]')).call(_b, 0))['$=='] || $mm('==')).call(_a, "array")) {
          ((_a = args)['$[]='] || $mm('[]=')).call(_a, 0, "arglist")
        };
        ((_a = call)['$<<'] || $mm('<<')).call(_a, args);
        if (recv !== false && recv !== nil) {
          ((_a = call)['$line='] || $mm('line=')).call(_a, ((_b = recv).$line || $mm('line')).call(_b))
          } else {
          if ((_a = ((_b = args)['$[]'] || $mm('[]')).call(_b, 1)) !== false && _a !== nil) {
            ((_a = call)['$line='] || $mm('line=')).call(_a, ((_b = ((_c = args)['$[]'] || $mm('[]')).call(_c, 1)).$line || $mm('line')).call(_b))
          }
        };
        if (((_a = ((_b = args).$length || $mm('length')).call(_b))['$=='] || $mm('==')).call(_a, 1)) {
          ((_a = args)['$line='] || $mm('line=')).call(_a, ((_b = call).$line || $mm('line')).call(_b))
          } else {
          ((_a = args)['$line='] || $mm('line=')).call(_a, ((_b = ((_c = args)['$[]'] || $mm('[]')).call(_c, 1)).$line || $mm('line')).call(_b))
        };
        return call;
      };

      def.$add_block_pass = function(arglist, block) {
        var _a;
        if (block !== false && block !== nil) {
          ((_a = arglist)['$<<'] || $mm('<<')).call(_a, block)
        };
        return arglist;
      };

      def.$new_op_asgn = function(op, lhs, rhs) {
        var $case = nil, result = nil, _a, _b, _c;
        $case = op;if (((_a = "||")['$==='] || $mm('===')).call(_a, $case)) {
        result = ((_a = this).$s || $mm('s')).call(_a, "op_asgn_or", ((_b = this).$new_gettable || $mm('new_gettable')).call(_b, lhs));
        ((_a = result)['$<<'] || $mm('<<')).call(_a, ((_b = lhs)['$<<'] || $mm('<<')).call(_b, rhs));
        }
        else if (((_a = "&&")['$==='] || $mm('===')).call(_a, $case)) {
        result = ((_a = this).$s || $mm('s')).call(_a, "op_asgn_and", ((_b = this).$new_gettable || $mm('new_gettable')).call(_b, lhs));
        ((_a = result)['$<<'] || $mm('<<')).call(_a, ((_b = lhs)['$<<'] || $mm('<<')).call(_b, rhs));
        }
        else {result = lhs;
        ((_a = result)['$<<'] || $mm('<<')).call(_a, ((_b = this).$new_call || $mm('new_call')).call(_b, ((_c = this).$new_gettable || $mm('new_gettable')).call(_c, lhs), op, ((_c = this).$s || $mm('s')).call(_c, "arglist", rhs)));};
        ((_a = result)['$line='] || $mm('line=')).call(_a, ((_b = lhs).$line || $mm('line')).call(_b));
        return result;
      };

      def.$new_assign = function(lhs, rhs) {
        var $case = nil, _a, _b;
        return (function() { $case = ((_a = lhs)['$[]'] || $mm('[]')).call(_a, 0);if (((_a = "iasgn")['$==='] || $mm('===')).call(_a, $case) || ((_a = "cdecl")['$==='] || $mm('===')).call(_a, $case) || ((_a = "lasgn")['$==='] || $mm('===')).call(_a, $case) || ((_a = "gasgn")['$==='] || $mm('===')).call(_a, $case) || ((_a = "cvdecl")['$==='] || $mm('===')).call(_a, $case)) {
        ((_a = lhs)['$<<'] || $mm('<<')).call(_a, rhs);
        return lhs;
        }
        else if (((_a = "call")['$==='] || $mm('===')).call(_a, $case) || ((_a = "attrasgn")['$==='] || $mm('===')).call(_a, $case)) {
        ((_a = ((_b = lhs).$last || $mm('last')).call(_b))['$<<'] || $mm('<<')).call(_a, rhs);
        return lhs;
        }
        else {return ((_a = this).$raise || $mm('raise')).call(_a, "Bad lhs for new_assign: " + (((_b = lhs)['$[]'] || $mm('[]')).call(_b, 0)))} }).call(this);
      };

      def.$new_assignable = function(ref) {
        var $case = nil, _a, _b, _c;
        $case = ((_a = ref)['$[]'] || $mm('[]')).call(_a, 0);if (((_a = "ivar")['$==='] || $mm('===')).call(_a, $case)) {
        ((_a = ref)['$[]='] || $mm('[]=')).call(_a, 0, "iasgn")
        }
        else if (((_a = "const")['$==='] || $mm('===')).call(_a, $case)) {
        ((_a = ref)['$[]='] || $mm('[]=')).call(_a, 0, "cdecl")
        }
        else if (((_a = "identifier")['$==='] || $mm('===')).call(_a, $case)) {
        if ((_a = ((_b = this.scope)['$has_local?'] || $mm('has_local?')).call(_b, ((_c = ref)['$[]'] || $mm('[]')).call(_c, 1))) === false || _a === nil) {
          ((_a = this.scope).$add_local || $mm('add_local')).call(_a, ((_b = ref)['$[]'] || $mm('[]')).call(_b, 1))
        };
        ((_a = ref)['$[]='] || $mm('[]=')).call(_a, 0, "lasgn");
        }
        else if (((_a = "gvar")['$==='] || $mm('===')).call(_a, $case)) {
        ((_a = ref)['$[]='] || $mm('[]=')).call(_a, 0, "gasgn")
        }
        else if (((_a = "cvar")['$==='] || $mm('===')).call(_a, $case)) {
        ((_a = ref)['$[]='] || $mm('[]=')).call(_a, 0, "cvdecl")
        }
        else {((_a = this).$raise || $mm('raise')).call(_a, "Bad new_assignable type: " + (((_b = ref)['$[]'] || $mm('[]')).call(_b, 0)))};
        return ref;
      };

      def.$new_gettable = function(ref) {
        var res = nil, $case = nil, _a, _b;
        res = (function() { $case = ((_a = ref)['$[]'] || $mm('[]')).call(_a, 0);if (((_a = "lasgn")['$==='] || $mm('===')).call(_a, $case)) {
        return ((_a = this).$s || $mm('s')).call(_a, "lvar", ((_b = ref)['$[]'] || $mm('[]')).call(_b, 1))
        }
        else if (((_a = "iasgn")['$==='] || $mm('===')).call(_a, $case)) {
        return ((_a = this).$s || $mm('s')).call(_a, "ivar", ((_b = ref)['$[]'] || $mm('[]')).call(_b, 1))
        }
        else if (((_a = "gasgn")['$==='] || $mm('===')).call(_a, $case)) {
        return ((_a = this).$s || $mm('s')).call(_a, "gvar", ((_b = ref)['$[]'] || $mm('[]')).call(_b, 1))
        }
        else if (((_a = "cvdecl")['$==='] || $mm('===')).call(_a, $case)) {
        return ((_a = this).$s || $mm('s')).call(_a, "cvar", ((_b = ref)['$[]'] || $mm('[]')).call(_b, 1))
        }
        else {return ((_a = this).$raise || $mm('raise')).call(_a, "Bad new_gettable ref: " + (((_b = ref)['$[]'] || $mm('[]')).call(_b, 0)))} }).call(this);
        ((_a = res)['$line='] || $mm('line=')).call(_a, ((_b = ref).$line || $mm('line')).call(_b));
        return res;
      };

      def.$new_var_ref = function(ref) {
        var $case = nil, _a, _b, _c;
        return (function() { $case = ((_a = ref)['$[]'] || $mm('[]')).call(_a, 0);if (((_a = "self")['$==='] || $mm('===')).call(_a, $case) || ((_a = "nil")['$==='] || $mm('===')).call(_a, $case) || ((_a = "true")['$==='] || $mm('===')).call(_a, $case) || ((_a = "false")['$==='] || $mm('===')).call(_a, $case) || ((_a = "line")['$==='] || $mm('===')).call(_a, $case) || ((_a = "file")['$==='] || $mm('===')).call(_a, $case)) {
        return ref
        }
        else if (((_a = "const")['$==='] || $mm('===')).call(_a, $case)) {
        return ref
        }
        else if (((_a = "ivar")['$==='] || $mm('===')).call(_a, $case) || ((_a = "gvar")['$==='] || $mm('===')).call(_a, $case) || ((_a = "cvar")['$==='] || $mm('===')).call(_a, $case)) {
        return ref
        }
        else if (((_a = "lit")['$==='] || $mm('===')).call(_a, $case)) {
        return ref
        }
        else if (((_a = "str")['$==='] || $mm('===')).call(_a, $case)) {
        return ref
        }
        else if (((_a = "identifier")['$==='] || $mm('===')).call(_a, $case)) {
        if ((_a = ((_b = this.scope)['$has_local?'] || $mm('has_local?')).call(_b, ((_c = ref)['$[]'] || $mm('[]')).call(_c, 1))) !== false && _a !== nil) {
          return ((_a = this).$s || $mm('s')).call(_a, "lvar", ((_b = ref)['$[]'] || $mm('[]')).call(_b, 1))
          } else {
          return ((_a = this).$s || $mm('s')).call(_a, "call", nil, ((_b = ref)['$[]'] || $mm('[]')).call(_b, 1), ((_b = this).$s || $mm('s')).call(_b, "arglist"))
        }
        }
        else {return ((_a = this).$raise || $mm('raise')).call(_a, "Bad var_ref type: " + (((_b = ref)['$[]'] || $mm('[]')).call(_b, 0)))} }).call(this);
      };

      def.$new_super = function(args) {
        var _a, _b, _c;
        args = ((_a = ((_b = args), _b !== false && _b !== nil ? _b : ((_c = this).$s || $mm('s')).call(_c, "arglist")))['$[]'] || $mm('[]')).call(_a, __range(1, -1, false));
        return ((_a = this).$s || $mm('s')).apply(_a, ["super"].concat(args));
      };

      def.$new_yield = function(args) {
        var _a, _b, _c;
        args = ((_a = ((_b = args), _b !== false && _b !== nil ? _b : ((_c = this).$s || $mm('s')).call(_c, "arglist")))['$[]'] || $mm('[]')).call(_a, __range(1, -1, false));
        return ((_a = this).$s || $mm('s')).apply(_a, ["yield"].concat(args));
      };

      def.$new_xstr = function(str) {
        var $case = nil, _a;
        if ((_a = str) === false || _a === nil) {
          return ((_a = this).$s || $mm('s')).call(_a, "xstr", "")
        };
        $case = ((_a = str)['$[]'] || $mm('[]')).call(_a, 0);if (((_a = "str")['$==='] || $mm('===')).call(_a, $case)) {
        ((_a = str)['$[]='] || $mm('[]=')).call(_a, 0, "xstr")
        }
        else if (((_a = "dstr")['$==='] || $mm('===')).call(_a, $case)) {
        ((_a = str)['$[]='] || $mm('[]=')).call(_a, 0, "dxstr")
        }
        else if (((_a = "evstr")['$==='] || $mm('===')).call(_a, $case)) {
        str = ((_a = this).$s || $mm('s')).call(_a, "dxstr", "", str)
        };
        return str;
      };

      def.$new_dsym = function(str) {
        var $case = nil, _a, _b, _c;
        if ((_a = str) === false || _a === nil) {
          return ((_a = this).$s || $mm('s')).call(_a, "nil")
        };
        $case = ((_a = str)['$[]'] || $mm('[]')).call(_a, 0);if (((_a = "str")['$==='] || $mm('===')).call(_a, $case)) {
        ((_a = str)['$[]='] || $mm('[]=')).call(_a, 0, "lit");
        ((_a = str)['$[]='] || $mm('[]=')).call(_a, 1, ((_b = ((_c = str)['$[]'] || $mm('[]')).call(_c, 1)).$to_sym || $mm('to_sym')).call(_b));
        }
        else if (((_a = "dstr")['$==='] || $mm('===')).call(_a, $case)) {
        ((_a = str)['$[]='] || $mm('[]=')).call(_a, 0, "dsym")
        };
        return str;
      };

      def.$new_str = function(str) {
        var _a, _b, _c, _d;
        if ((_a = str) === false || _a === nil) {
          return ((_a = this).$s || $mm('s')).call(_a, "str", "")
        };
        if ((_a = (_b = ((_b = ((_c = ((_d = str).$size || $mm('size')).call(_d))['$=='] || $mm('==')).call(_c, 3)) ? ((_c = ((_d = str)['$[]'] || $mm('[]')).call(_d, 1))['$=='] || $mm('==')).call(_c, "") : _b), _b !== false && _b !== nil ? ((_b = ((_c = str)['$[]'] || $mm('[]')).call(_c, 0))['$=='] || $mm('==')).call(_b, "str") : _b)) !== false && _a !== nil) {
          return ((_a = str)['$[]'] || $mm('[]')).call(_a, 2)
          } else {
          if ((_a = ((_b = ((_c = ((_d = str)['$[]'] || $mm('[]')).call(_d, 0))['$=='] || $mm('==')).call(_c, "str")) ? ((_c = ((_d = str).$size || $mm('size')).call(_d))['$>'] || $mm('>')).call(_c, 3) : _b)) !== false && _a !== nil) {
            ((_a = str)['$[]='] || $mm('[]=')).call(_a, 0, "dstr");
            return str;
            } else {
            if (((_a = ((_b = str)['$[]'] || $mm('[]')).call(_b, 0))['$=='] || $mm('==')).call(_a, "evstr")) {
              return ((_a = this).$s || $mm('s')).call(_a, "dstr", "", str)
              } else {
              return str
            }
          }
        };
      };

      def.$new_regexp = function(reg, ending) {
        var $case = nil, res = nil, _a, _b, _c;
        if ((_a = reg) === false || _a === nil) {
          return ((_a = this).$s || $mm('s')).call(_a, "lit", /^/)
        };
        return (function() { $case = ((_a = reg)['$[]'] || $mm('[]')).call(_a, 0);if (((_a = "str")['$==='] || $mm('===')).call(_a, $case)) {
        return ((_a = this).$s || $mm('s')).call(_a, "lit", ((_b = ((_c = __scope.Regexp) == null ? __opal.cm("Regexp") : _c)).$new || $mm('new')).call(_b, ((_c = reg)['$[]'] || $mm('[]')).call(_c, 1), ending))
        }
        else if (((_a = "evstr")['$==='] || $mm('===')).call(_a, $case)) {
        return res = ((_a = this).$s || $mm('s')).call(_a, "dregx", "", reg)
        }
        else if (((_a = "dstr")['$==='] || $mm('===')).call(_a, $case)) {
        ((_a = reg)['$[]='] || $mm('[]=')).call(_a, 0, "dregx");
        return reg;
        }
        else {return nil} }).call(this);
      };

      def.$str_append = function(str, str2) {
        var _a, _b;
        if ((_a = str) === false || _a === nil) {
          return str2
        };
        if ((_a = str2) === false || _a === nil) {
          return str
        };
        if (((_a = ((_b = str).$first || $mm('first')).call(_b))['$=='] || $mm('==')).call(_a, "evstr")) {
          str = ((_a = this).$s || $mm('s')).call(_a, "dstr", "", str)
          } else {
          if (((_a = ((_b = str).$first || $mm('first')).call(_b))['$=='] || $mm('==')).call(_a, "str")) {
            str = ((_a = this).$s || $mm('s')).call(_a, "dstr", ((_b = str)['$[]'] || $mm('[]')).call(_b, 1))
          }
        };
        ((_a = str)['$<<'] || $mm('<<')).call(_a, str2);
        return str;
      };

      def.$cond_push = function(n) {
        var _a, _b;
        return this.cond = ((_a = ((_b = this.cond)['$<<'] || $mm('<<')).call(_b, 1))['$|'] || $mm('|')).call(_a, ((_b = n)['$&'] || $mm('&')).call(_b, 1));
      };

      def.$cond_pop = function() {
        var _a;
        return this.cond = ((_a = this.cond)['$>>'] || $mm('>>')).call(_a, 1);
      };

      def.$cond_lexpop = function() {
        var _a, _b;
        return this.cond = ((_a = ((_b = this.cond)['$>>'] || $mm('>>')).call(_b, 1))['$|'] || $mm('|')).call(_a, ((_b = this.cond)['$&'] || $mm('&')).call(_b, 1));
      };

      def['$cond?'] = function() {
        var _a, _b, _c;
        return (_a = ((_b = ((_c = this.cond)['$&'] || $mm('&')).call(_c, 1))['$=='] || $mm('==')).call(_b, 0), (_a === nil || _a === false));
      };

      def.$cmdarg_push = function(n) {
        var _a, _b;
        return this.cmdarg = ((_a = ((_b = this.cmdarg)['$<<'] || $mm('<<')).call(_b, 1))['$|'] || $mm('|')).call(_a, ((_b = n)['$&'] || $mm('&')).call(_b, 1));
      };

      def.$cmdarg_pop = function() {
        var _a;
        return this.cmdarg = ((_a = this.cmdarg)['$>>'] || $mm('>>')).call(_a, 1);
      };

      def.$cmdarg_lexpop = function() {
        var _a, _b;
        return this.cmdarg = ((_a = ((_b = this.cmdarg)['$>>'] || $mm('>>')).call(_b, 1))['$|'] || $mm('|')).call(_a, ((_b = this.cmdarg)['$&'] || $mm('&')).call(_b, 1));
      };

      def['$cmdarg?'] = function() {
        var _a, _b, _c;
        return (_a = ((_b = ((_c = this.cmdarg)['$&'] || $mm('&')).call(_c, 1))['$=='] || $mm('==')).call(_b, 0), (_a === nil || _a === false));
      };

      def.$next_string_token = function() {
        var str_parse = nil, scanner = nil, space = nil, interpolate = nil, words = nil, str_buffer = nil, result = nil, complete_str = nil, _a, _b, _c, _d, _e;
        str_parse = this.string_parse;
        scanner = this.scanner;
        space = false;
        interpolate = ((_a = str_parse)['$[]'] || $mm('[]')).call(_a, "interpolate");
        words = ((_a = ["w", "W"])['$include?'] || $mm('include?')).call(_a, ((_b = str_parse)['$[]'] || $mm('[]')).call(_b, "beg"));
        if ((_a = (_b = ((_b = ["w", "W"])['$include?'] || $mm('include?')).call(_b, ((_c = str_parse)['$[]'] || $mm('[]')).call(_c, "beg")), _b !== false && _b !== nil ? ((_b = scanner).$scan || $mm('scan')).call(_b, /\s+/) : _b)) !== false && _a !== nil) {
          space = true
        };
        str_buffer = [];
        if ((_a = ((_b = scanner).$scan || $mm('scan')).call(_b, ((_c = ((_d = __scope.Regexp) == null ? __opal.cm("Regexp") : _d)).$new || $mm('new')).call(_c, ((_d = ((_e = __scope.Regexp) == null ? __opal.cm("Regexp") : _e)).$escape || $mm('escape')).call(_d, ((_e = str_parse)['$[]'] || $mm('[]')).call(_e, "end"))))) !== false && _a !== nil) {
          if ((_a = ((_b = words !== false && words !== nil) ? (_c = ((_d = str_parse)['$[]'] || $mm('[]')).call(_d, "done_last_space"), (_c === nil || _c === false)) : _b)) !== false && _a !== nil) {
            ((_a = str_parse)['$[]='] || $mm('[]=')).call(_a, "done_last_space", true);
            (_a = scanner, ((_b = _a)['$pos='] || $mm('pos=')).call(_b, ((_c = ((_d = _a).$pos || $mm('pos')).call(_d))['$-'] || $mm('-')).call(_c, 1)));
            return ["SPACE", " "];
          };
          this.string_parse = nil;
          if ((_a = ((_b = str_parse)['$[]'] || $mm('[]')).call(_b, "balance")) !== false && _a !== nil) {
            if (((_a = ((_b = str_parse)['$[]'] || $mm('[]')).call(_b, "nesting"))['$=='] || $mm('==')).call(_a, 0)) {
              this.lex_state = "expr_end";
              return ["STRING_END", ((_a = scanner).$matched || $mm('matched')).call(_a)];
              } else {
              ((_a = str_buffer)['$<<'] || $mm('<<')).call(_a, ((_b = scanner).$matched || $mm('matched')).call(_b));
              'FIXME(op_asgn1)';
              this.string_parse = str_parse;
            }
            } else {
            if ((_a = ((_b = ["\"", "'"])['$include?'] || $mm('include?')).call(_b, ((_c = str_parse)['$[]'] || $mm('[]')).call(_c, "beg"))) !== false && _a !== nil) {
              this.lex_state = "expr_end";
              return ["STRING_END", ((_a = scanner).$matched || $mm('matched')).call(_a)];
              } else {
              if (((_a = ((_b = str_parse)['$[]'] || $mm('[]')).call(_b, "beg"))['$=='] || $mm('==')).call(_a, "`")) {
                this.lex_state = "expr_end";
                return ["STRING_END", ((_a = scanner).$matched || $mm('matched')).call(_a)];
                } else {
                if (((_a = ((_b = str_parse)['$[]'] || $mm('[]')).call(_b, "beg"))['$=='] || $mm('==')).call(_a, "/")) {
                  result = ((_a = scanner).$scan || $mm('scan')).call(_a, /\w+/);
                  this.lex_state = "expr_end";
                  return ["REGEXP_END", result];
                  } else {
                  this.lex_state = "expr_end";
                  return ["STRING_END", ((_a = scanner).$matched || $mm('matched')).call(_a)];
                }
              }
            }
          };
        };
        if (space !== false && space !== nil) {
          return ["SPACE", " "]
        };
        if ((_a = (_b = ((_b = str_parse)['$[]'] || $mm('[]')).call(_b, "balance"), _b !== false && _b !== nil ? ((_b = scanner).$scan || $mm('scan')).call(_b, ((_c = ((_d = __scope.Regexp) == null ? __opal.cm("Regexp") : _d)).$new || $mm('new')).call(_c, ((_d = ((_e = __scope.Regexp) == null ? __opal.cm("Regexp") : _e)).$escape || $mm('escape')).call(_d, ((_e = str_parse)['$[]'] || $mm('[]')).call(_e, "beg")))) : _b)) !== false && _a !== nil) {
          ((_a = str_buffer)['$<<'] || $mm('<<')).call(_a, ((_b = scanner).$matched || $mm('matched')).call(_b));
          'FIXME(op_asgn1)';
          } else {
          if ((_a = ((_b = scanner).$check || $mm('check')).call(_b, /#[@$]/)) !== false && _a !== nil) {
            ((_a = scanner).$scan || $mm('scan')).call(_a, /#/);
            if (interpolate !== false && interpolate !== nil) {
              return ["STRING_DVAR", ((_a = scanner).$matched || $mm('matched')).call(_a)]
              } else {
              ((_a = str_buffer)['$<<'] || $mm('<<')).call(_a, ((_b = scanner).$matched || $mm('matched')).call(_b))
            };
            } else {
            if ((_a = ((_b = scanner).$scan || $mm('scan')).call(_b, /#\{/)) !== false && _a !== nil) {
              if (interpolate !== false && interpolate !== nil) {
                return ["STRING_DBEG", ((_a = scanner).$matched || $mm('matched')).call(_a)]
                } else {
                ((_a = str_buffer)['$<<'] || $mm('<<')).call(_a, ((_b = scanner).$matched || $mm('matched')).call(_b))
              }
              } else {
              if ((_a = ((_b = scanner).$scan || $mm('scan')).call(_b, /\#/)) !== false && _a !== nil) {
                ((_a = str_buffer)['$<<'] || $mm('<<')).call(_a, "#")
              }
            }
          }
        };
        ((_a = this).$add_string_content || $mm('add_string_content')).call(_a, str_buffer, str_parse);
        complete_str = ((_a = str_buffer).$join || $mm('join')).call(_a, "");
        this.line = ((_a = this.line)['$+'] || $mm('+')).call(_a, ((_b = complete_str).$count || $mm('count')).call(_b, "\n"));
        return ["STRING_CONTENT", complete_str];
      };

      def.$add_string_content = function(str_buffer, str_parse) {
        var scanner = nil, end_str_re = nil, interpolate = nil, words = nil, c = nil, handled = nil, reg = nil, _a, _b, _c, _d, _e, _f;
        scanner = this.scanner;
        end_str_re = ((_a = ((_b = __scope.Regexp) == null ? __opal.cm("Regexp") : _b)).$new || $mm('new')).call(_a, ((_b = ((_c = __scope.Regexp) == null ? __opal.cm("Regexp") : _c)).$escape || $mm('escape')).call(_b, ((_c = str_parse)['$[]'] || $mm('[]')).call(_c, "end")));
        interpolate = ((_a = str_parse)['$[]'] || $mm('[]')).call(_a, "interpolate");
        words = ((_a = ["W", "w"])['$include?'] || $mm('include?')).call(_a, ((_b = str_parse)['$[]'] || $mm('[]')).call(_b, "beg"));
        while (!((_b = ((_c = scanner)['$eos?'] || $mm('eos?')).call(_c)) !== false && _b !== nil)) {c = nil;
        handled = true;
        if ((_b = ((_c = scanner).$check || $mm('check')).call(_c, end_str_re)) !== false && _b !== nil) {
          if ((_b = (_c = ((_c = str_parse)['$[]'] || $mm('[]')).call(_c, "balance"), _c !== false && _c !== nil ? (_c = ((_d = ((_e = str_parse)['$[]'] || $mm('[]')).call(_e, "nesting"))['$=='] || $mm('==')).call(_d, 0), (_c === nil || _c === false)) : _c)) !== false && _b !== nil) {
            ((_b = scanner).$scan || $mm('scan')).call(_b, end_str_re);
            c = ((_b = scanner).$matched || $mm('matched')).call(_b);
            'FIXME(op_asgn1)';
            } else {
            break;
          }
          } else {
          if ((_b = (_c = ((_c = str_parse)['$[]'] || $mm('[]')).call(_c, "balance"), _c !== false && _c !== nil ? ((_c = scanner).$scan || $mm('scan')).call(_c, ((_d = ((_e = __scope.Regexp) == null ? __opal.cm("Regexp") : _e)).$new || $mm('new')).call(_d, ((_e = ((_f = __scope.Regexp) == null ? __opal.cm("Regexp") : _f)).$escape || $mm('escape')).call(_e, ((_f = str_parse)['$[]'] || $mm('[]')).call(_f, "beg")))) : _c)) !== false && _b !== nil) {
            'FIXME(op_asgn1)';
            c = ((_b = scanner).$matched || $mm('matched')).call(_b);
            } else {
            if ((_b = ((_c = words !== false && words !== nil) ? ((_d = scanner).$scan || $mm('scan')).call(_d, /\s/) : _c)) !== false && _b !== nil) {
              (_b = scanner, ((_c = _b)['$pos='] || $mm('pos=')).call(_c, ((_d = ((_e = _b).$pos || $mm('pos')).call(_e))['$-'] || $mm('-')).call(_d, 1)));
              break;;
              } else {
              if ((_b = ((_c = interpolate !== false && interpolate !== nil) ? ((_d = scanner).$check || $mm('check')).call(_d, /#(?=[\$\@\{])/) : _c)) !== false && _b !== nil) {
                break;
                } else {
                if ((_b = ((_c = scanner).$scan || $mm('scan')).call(_c, /\\/)) !== false && _b !== nil) {
                  if ((_b = ((_c = str_parse)['$[]'] || $mm('[]')).call(_c, "regexp")) !== false && _b !== nil) {
                    if ((_b = ((_c = scanner).$scan || $mm('scan')).call(_c, /(.)/)) !== false && _b !== nil) {
                      c = (_b = "\\", _c = ((_d = scanner).$matched || $mm('matched')).call(_d), typeof(_b) === 'number' ? _b + _c : _b['$+'](_c))
                    }
                    } else {
                    c = (function() { if ((_b = ((_c = scanner).$scan || $mm('scan')).call(_c, /n/)) !== false && _b !== nil) {
                      return "\n"
                      } else {
                      if ((_b = ((_c = scanner).$scan || $mm('scan')).call(_c, /r/)) !== false && _b !== nil) {
                        return "\r"
                        } else {
                        if ((_b = ((_c = scanner).$scan || $mm('scan')).call(_c, /\n/)) !== false && _b !== nil) {
                          return "\n"
                          } else {
                          ((_b = scanner).$scan || $mm('scan')).call(_b, /./);
                          return ((_b = scanner).$matched || $mm('matched')).call(_b);
                        }
                      }
                    }; return nil; }).call(this)
                  }
                  } else {
                  handled = false
                }
              }
            }
          }
        };
        if ((_b = handled) === false || _b === nil) {
          reg = (function() { if (words !== false && words !== nil) {
            return ((_b = ((_c = __scope.Regexp) == null ? __opal.cm("Regexp") : _c)).$new || $mm('new')).call(_b, "[^" + (((_c = ((_d = __scope.Regexp) == null ? __opal.cm("Regexp") : _d)).$escape || $mm('escape')).call(_c, ((_d = str_parse)['$[]'] || $mm('[]')).call(_d, "end"))) + "#0\n \\\\]+|.")
            } else {
            if ((_b = ((_c = str_parse)['$[]'] || $mm('[]')).call(_c, "balance")) !== false && _b !== nil) {
              return ((_b = ((_c = __scope.Regexp) == null ? __opal.cm("Regexp") : _c)).$new || $mm('new')).call(_b, "[^" + (((_c = ((_d = __scope.Regexp) == null ? __opal.cm("Regexp") : _d)).$escape || $mm('escape')).call(_c, ((_d = str_parse)['$[]'] || $mm('[]')).call(_d, "end"))) + (((_c = ((_d = __scope.Regexp) == null ? __opal.cm("Regexp") : _d)).$escape || $mm('escape')).call(_c, ((_d = str_parse)['$[]'] || $mm('[]')).call(_d, "beg"))) + "#0\\\\]+|.")
              } else {
              return ((_b = ((_c = __scope.Regexp) == null ? __opal.cm("Regexp") : _c)).$new || $mm('new')).call(_b, "[^" + (((_c = ((_d = __scope.Regexp) == null ? __opal.cm("Regexp") : _d)).$escape || $mm('escape')).call(_c, ((_d = str_parse)['$[]'] || $mm('[]')).call(_d, "end"))) + "#0\\\\]+|.")
            }
          }; return nil; }).call(this);
          ((_b = scanner).$scan || $mm('scan')).call(_b, reg);
          c = ((_b = scanner).$matched || $mm('matched')).call(_b);
        };
        ((_b = c), _b !== false && _b !== nil ? _b : c = ((_c = scanner).$matched || $mm('matched')).call(_c));
        ((_b = str_buffer)['$<<'] || $mm('<<')).call(_b, c);};
        if ((_a = ((_b = scanner)['$eos?'] || $mm('eos?')).call(_b)) !== false && _a !== nil) {
          return ((_a = this).$raise || $mm('raise')).call(_a, "reached EOF while in string")
          } else {
          return nil
        };
      };

      def.$next_token = function() {
        var scanner = nil, space_seen = nil, cmd_start = nil, c = nil, start_word = nil, end_word = nil, interpolate = nil, result = nil, heredoc = nil, sign = nil, matched = nil, $case = nil, _a, _b, _c, _d, _e;
        if ((_a = this.string_parse) !== false && _a !== nil) {
          return ((_a = this).$next_string_token || $mm('next_string_token')).call(_a)
        };
        scanner = this.scanner;
        space_seen = false;
        cmd_start = false;
        c = "";
        while ((_b = true) !== false && _b !== nil){if ((_b = ((_c = scanner).$scan || $mm('scan')).call(_c, /\ |\t|\r/)) !== false && _b !== nil) {
          space_seen = true;
          continue;;
          } else {
          if ((_b = ((_c = scanner).$scan || $mm('scan')).call(_c, /(\n|#)/)) !== false && _b !== nil) {
            c = ((_b = scanner).$matched || $mm('matched')).call(_b);
            if (((_b = c)['$=='] || $mm('==')).call(_b, "#")) {
              ((_b = scanner).$scan || $mm('scan')).call(_b, /(.*)/)
              } else {
              this.line = ((_b = this.line)['$+'] || $mm('+')).call(_b, 1)
            };
            ((_b = scanner).$scan || $mm('scan')).call(_b, /(\n+)/);
            if ((_b = ((_c = scanner).$matched || $mm('matched')).call(_c)) !== false && _b !== nil) {
              this.line = ((_b = this.line)['$+'] || $mm('+')).call(_b, ((_c = ((_d = scanner).$matched || $mm('matched')).call(_d)).$length || $mm('length')).call(_c))
            };
            if ((_b = ((_c = ["expr_beg", "expr_dot"])['$include?'] || $mm('include?')).call(_c, this.lex_state)) !== false && _b !== nil) {
              continue;
            };
            cmd_start = true;
            this.lex_state = "expr_beg";
            return ["\\n", "\\n"];
            } else {
            if ((_b = ((_c = scanner).$scan || $mm('scan')).call(_c, /\;/)) !== false && _b !== nil) {
              this.lex_state = "expr_beg";
              return [";", ";"];
              } else {
              if ((_b = ((_c = scanner).$scan || $mm('scan')).call(_c, /\"/)) !== false && _b !== nil) {
                this.string_parse = __hash2(["beg", "end", "interpolate"], {"beg": "\"", "end": "\"", "interpolate": true});
                return ["STRING_BEG", ((_b = scanner).$matched || $mm('matched')).call(_b)];
                } else {
                if ((_b = ((_c = scanner).$scan || $mm('scan')).call(_c, /\'/)) !== false && _b !== nil) {
                  this.string_parse = __hash2(["beg", "end"], {"beg": "'", "end": "'"});
                  return ["STRING_BEG", ((_b = scanner).$matched || $mm('matched')).call(_b)];
                  } else {
                  if ((_b = ((_c = scanner).$scan || $mm('scan')).call(_c, /\`/)) !== false && _b !== nil) {
                    this.string_parse = __hash2(["beg", "end", "interpolate"], {"beg": "`", "end": "`", "interpolate": true});
                    return ["XSTRING_BEG", ((_b = scanner).$matched || $mm('matched')).call(_b)];
                    } else {
                    if ((_b = ((_c = scanner).$scan || $mm('scan')).call(_c, /\%W/)) !== false && _b !== nil) {
                      start_word = ((_b = scanner).$scan || $mm('scan')).call(_b, /./);
                      end_word = ((_b = ((_c = __hash2(["(", "[", "{"], {"(": ")", "[": "]", "{": "}"}))['$[]'] || $mm('[]')).call(_c, start_word)), _b !== false && _b !== nil ? _b : start_word);
                      this.string_parse = __hash2(["beg", "end", "interpolate"], {"beg": "W", "end": end_word, "interpolate": true});
                      ((_b = scanner).$scan || $mm('scan')).call(_b, /\s*/);
                      return ["WORDS_BEG", ((_b = scanner).$matched || $mm('matched')).call(_b)];
                      } else {
                      if ((_b = ((_c = scanner).$scan || $mm('scan')).call(_c, /\%w/)) !== false && _b !== nil) {
                        start_word = ((_b = scanner).$scan || $mm('scan')).call(_b, /./);
                        end_word = ((_b = ((_c = __hash2(["(", "[", "{"], {"(": ")", "[": "]", "{": "}"}))['$[]'] || $mm('[]')).call(_c, start_word)), _b !== false && _b !== nil ? _b : start_word);
                        this.string_parse = __hash2(["beg", "end"], {"beg": "w", "end": end_word});
                        ((_b = scanner).$scan || $mm('scan')).call(_b, /\s*/);
                        return ["AWORDS_BEG", ((_b = scanner).$matched || $mm('matched')).call(_b)];
                        } else {
                        if ((_b = ((_c = scanner).$scan || $mm('scan')).call(_c, /\%[Qq]/)) !== false && _b !== nil) {
                          interpolate = ((_b = ((_c = scanner).$matched || $mm('matched')).call(_c))['$end_with?'] || $mm('end_with?')).call(_b, "Q");
                          start_word = ((_b = scanner).$scan || $mm('scan')).call(_b, /./);
                          end_word = ((_b = ((_c = __hash2(["(", "[", "{"], {"(": ")", "[": "]", "{": "}"}))['$[]'] || $mm('[]')).call(_c, start_word)), _b !== false && _b !== nil ? _b : start_word);
                          this.string_parse = __hash2(["beg", "end", "balance", "nesting", "interpolate"], {"beg": start_word, "end": end_word, "balance": true, "nesting": 0, "interpolate": interpolate});
                          return ["STRING_BEG", ((_b = scanner).$matched || $mm('matched')).call(_b)];
                          } else {
                          if ((_b = ((_c = scanner).$scan || $mm('scan')).call(_c, /\%x/)) !== false && _b !== nil) {
                            start_word = ((_b = scanner).$scan || $mm('scan')).call(_b, /./);
                            end_word = ((_b = ((_c = __hash2(["(", "[", "{"], {"(": ")", "[": "]", "{": "}"}))['$[]'] || $mm('[]')).call(_c, start_word)), _b !== false && _b !== nil ? _b : start_word);
                            this.string_parse = __hash2(["beg", "end", "balance", "nesting", "interpolate"], {"beg": start_word, "end": end_word, "balance": true, "nesting": 0, "interpolate": true});
                            return ["XSTRING_BEG", ((_b = scanner).$matched || $mm('matched')).call(_b)];
                            } else {
                            if ((_b = ((_c = scanner).$scan || $mm('scan')).call(_c, /\//)) !== false && _b !== nil) {
                              if ((_b = ((_c = ["expr_beg", "expr_mid"])['$include?'] || $mm('include?')).call(_c, this.lex_state)) !== false && _b !== nil) {
                                this.string_parse = __hash2(["beg", "end", "interpolate", "regexp"], {"beg": "/", "end": "/", "interpolate": true, "regexp": true});
                                return ["REGEXP_BEG", ((_b = scanner).$matched || $mm('matched')).call(_b)];
                                } else {
                                if ((_b = ((_c = scanner).$scan || $mm('scan')).call(_c, /\=/)) !== false && _b !== nil) {
                                  this.lex_state = "expr_beg";
                                  return ["OP_ASGN", "/"];
                                  } else {
                                  if (((_b = this.lex_state)['$=='] || $mm('==')).call(_b, "expr_fname")) {
                                    this.lex_state = "expr_end"
                                    } else {
                                    if ((_b = ((_c = ((_d = this.lex_state)['$=='] || $mm('==')).call(_d, "expr_cmdarg")), _c !== false && _c !== nil ? _c : ((_d = this.lex_state)['$=='] || $mm('==')).call(_d, "expr_arg"))) !== false && _b !== nil) {
                                      if ((_b = (_c = (_c = ((_d = scanner).$check || $mm('check')).call(_d, /\s/), (_c === nil || _c === false)), _c !== false && _c !== nil ? space_seen : _c)) !== false && _b !== nil) {
                                        this.string_parse = __hash2(["beg", "end", "interpolate", "regexp"], {"beg": "/", "end": "/", "interpolate": true, "regexp": true});
                                        return ["REGEXP_BEG", ((_b = scanner).$matched || $mm('matched')).call(_b)];
                                      }
                                      } else {
                                      this.lex_state = "expr_beg"
                                    }
                                  }
                                }
                              };
                              return ["/", "/"];
                              } else {
                              if ((_b = ((_c = scanner).$scan || $mm('scan')).call(_c, /\%/)) !== false && _b !== nil) {
                                if ((_b = ((_c = scanner).$scan || $mm('scan')).call(_c, /\=/)) !== false && _b !== nil) {
                                  this.lex_state = "expr_beg";
                                  return ["OP_ASGN", "%"];
                                };
                                this.lex_state = (function() { if (((_b = this.lex_state)['$=='] || $mm('==')).call(_b, "expr_fname")) {
                                  return "expr_end"
                                  } else {
                                  return "expr_beg"
                                }; return nil; }).call(this);
                                return ["%", "%"];
                                } else {
                                if ((_b = ((_c = scanner).$scan || $mm('scan')).call(_c, /\(/)) !== false && _b !== nil) {
                                  result = ((_b = scanner).$matched || $mm('matched')).call(_b);
                                  if ((_b = ((_c = ["expr_beg", "expr_mid"])['$include?'] || $mm('include?')).call(_c, this.lex_state)) !== false && _b !== nil) {
                                    result = "PAREN_BEG"
                                    } else {
                                    if ((_b = ((_c = space_seen !== false && space_seen !== nil) ? ((_d = ["expr_arg", "expr_cmdarg"])['$include?'] || $mm('include?')).call(_d, this.lex_state) : _c)) !== false && _b !== nil) {
                                      result = "tLPAREN_ARG"
                                      } else {
                                      result = "("
                                    }
                                  };
                                  this.lex_state = "expr_beg";
                                  ((_b = this).$cond_push || $mm('cond_push')).call(_b, 0);
                                  ((_b = this).$cmdarg_push || $mm('cmdarg_push')).call(_b, 0);
                                  return [result, ((_b = scanner).$matched || $mm('matched')).call(_b)];
                                  } else {
                                  if ((_b = ((_c = scanner).$scan || $mm('scan')).call(_c, /\)/)) !== false && _b !== nil) {
                                    ((_b = this).$cond_lexpop || $mm('cond_lexpop')).call(_b);
                                    ((_b = this).$cmdarg_lexpop || $mm('cmdarg_lexpop')).call(_b);
                                    this.lex_state = "expr_end";
                                    return [")", ((_b = scanner).$matched || $mm('matched')).call(_b)];
                                    } else {
                                    if ((_b = ((_c = scanner).$scan || $mm('scan')).call(_c, /\[/)) !== false && _b !== nil) {
                                      result = ((_b = scanner).$matched || $mm('matched')).call(_b);
                                      if ((_b = ((_c = ["expr_fname", "expr_dot"])['$include?'] || $mm('include?')).call(_c, this.lex_state)) !== false && _b !== nil) {
                                        this.lex_state = "expr_arg";
                                        if ((_b = ((_c = scanner).$scan || $mm('scan')).call(_c, /\]=/)) !== false && _b !== nil) {
                                          return ["[]=", "[]="]
                                          } else {
                                          if ((_b = ((_c = scanner).$scan || $mm('scan')).call(_c, /\]/)) !== false && _b !== nil) {
                                            return ["[]", "[]"]
                                            } else {
                                            ((_b = this).$raise || $mm('raise')).call(_b, "Unexpected '[' token")
                                          }
                                        };
                                        } else {
                                        if ((_b = ((_c = ((_d = ["expr_beg", "expr_mid"])['$include?'] || $mm('include?')).call(_d, this.lex_state)), _c !== false && _c !== nil ? _c : space_seen)) !== false && _b !== nil) {
                                          this.lex_state = "expr_beg";
                                          ((_b = this).$cond_push || $mm('cond_push')).call(_b, 0);
                                          ((_b = this).$cmdarg_push || $mm('cmdarg_push')).call(_b, 0);
                                          return ["[", ((_b = scanner).$matched || $mm('matched')).call(_b)];
                                          } else {
                                          this.lex_state = "expr_beg";
                                          ((_b = this).$cond_push || $mm('cond_push')).call(_b, 0);
                                          ((_b = this).$cmdarg_push || $mm('cmdarg_push')).call(_b, 0);
                                          return ["[@", ((_b = scanner).$matched || $mm('matched')).call(_b)];
                                        }
                                      };
                                      } else {
                                      if ((_b = ((_c = scanner).$scan || $mm('scan')).call(_c, /\]/)) !== false && _b !== nil) {
                                        ((_b = this).$cond_lexpop || $mm('cond_lexpop')).call(_b);
                                        ((_b = this).$cmdarg_lexpop || $mm('cmdarg_lexpop')).call(_b);
                                        this.lex_state = "expr_end";
                                        return ["]", ((_b = scanner).$matched || $mm('matched')).call(_b)];
                                        } else {
                                        if ((_b = ((_c = scanner).$scan || $mm('scan')).call(_c, /\}/)) !== false && _b !== nil) {
                                          ((_b = this).$cond_lexpop || $mm('cond_lexpop')).call(_b);
                                          ((_b = this).$cmdarg_lexpop || $mm('cmdarg_lexpop')).call(_b);
                                          this.lex_state = "expr_end";
                                          return ["}", ((_b = scanner).$matched || $mm('matched')).call(_b)];
                                          } else {
                                          if ((_b = ((_c = scanner).$scan || $mm('scan')).call(_c, /\.\.\./)) !== false && _b !== nil) {
                                            this.lex_state = "expr_beg";
                                            return ["...", ((_b = scanner).$matched || $mm('matched')).call(_b)];
                                            } else {
                                            if ((_b = ((_c = scanner).$scan || $mm('scan')).call(_c, /\.\./)) !== false && _b !== nil) {
                                              this.lex_state = "expr_beg";
                                              return ["..", ((_b = scanner).$matched || $mm('matched')).call(_b)];
                                              } else {
                                              if ((_b = ((_c = scanner).$scan || $mm('scan')).call(_c, /\./)) !== false && _b !== nil) {
                                                if ((_b = ((_c = this.lex_state)['$=='] || $mm('==')).call(_c, "expr_fname")) === false || _b === nil) {
                                                  this.lex_state = "expr_dot"
                                                };
                                                return [".", ((_b = scanner).$matched || $mm('matched')).call(_b)];
                                                } else {
                                                if ((_b = ((_c = scanner).$scan || $mm('scan')).call(_c, /\*\*\=/)) !== false && _b !== nil) {
                                                  this.lex_state = "expr_beg";
                                                  return ["OP_ASGN", "**"];
                                                  } else {
                                                  if ((_b = ((_c = scanner).$scan || $mm('scan')).call(_c, /\*\*/)) !== false && _b !== nil) {
                                                    return ["**", "**"]
                                                    } else {
                                                    if ((_b = ((_c = scanner).$scan || $mm('scan')).call(_c, /\*\=/)) !== false && _b !== nil) {
                                                      this.lex_state = "expr_beg";
                                                      return ["OP_ASGN", "*"];
                                                      } else {
                                                      if ((_b = ((_c = scanner).$scan || $mm('scan')).call(_c, /\*/)) !== false && _b !== nil) {
                                                        result = ((_b = scanner).$matched || $mm('matched')).call(_b);
                                                        if (((_b = this.lex_state)['$=='] || $mm('==')).call(_b, "expr_fname")) {
                                                          this.lex_state = "expr_end";
                                                          return ["*", result];
                                                          } else {
                                                          if ((_b = ((_c = space_seen !== false && space_seen !== nil) ? ((_d = scanner).$check || $mm('check')).call(_d, /\S/) : _c)) !== false && _b !== nil) {
                                                            this.lex_state = "expr_beg";
                                                            return ["SPLAT", result];
                                                            } else {
                                                            if ((_b = ((_c = ["expr_beg", "expr_mid"])['$include?'] || $mm('include?')).call(_c, this.lex_state)) !== false && _b !== nil) {
                                                              this.lex_state = "expr_beg";
                                                              return ["SPLAT", result];
                                                              } else {
                                                              this.lex_state = "expr_beg";
                                                              return ["*", result];
                                                            }
                                                          }
                                                        };
                                                        } else {
                                                        if ((_b = ((_c = scanner).$scan || $mm('scan')).call(_c, /\:\:/)) !== false && _b !== nil) {
                                                          if ((_b = ((_c = ["expr_beg", "expr_mid", "expr_class"])['$include?'] || $mm('include?')).call(_c, this.lex_state)) !== false && _b !== nil) {
                                                            this.lex_state = "expr_beg";
                                                            return ["::@", ((_b = scanner).$matched || $mm('matched')).call(_b)];
                                                          };
                                                          this.lex_state = "expr_dot";
                                                          return ["::", ((_b = scanner).$matched || $mm('matched')).call(_b)];
                                                          } else {
                                                          if ((_b = ((_c = scanner).$scan || $mm('scan')).call(_c, /\:/)) !== false && _b !== nil) {
                                                            if ((_b = ((_c = ((_d = ["expr_end", "expr_endarg"])['$include?'] || $mm('include?')).call(_d, this.lex_state)), _c !== false && _c !== nil ? _c : ((_d = scanner).$check || $mm('check')).call(_d, /\s/))) !== false && _b !== nil) {
                                                              if ((_b = ((_c = scanner).$check || $mm('check')).call(_c, /\w/)) === false || _b === nil) {
                                                                this.lex_state = "expr_beg";
                                                                return [":", ":"];
                                                              };
                                                              this.lex_state = "expr_fname";
                                                              return ["SYMBOL_BEG", ":"];
                                                            };
                                                            if ((_b = ((_c = scanner).$scan || $mm('scan')).call(_c, /\'/)) !== false && _b !== nil) {
                                                              this.string_parse = __hash2(["beg", "end"], {"beg": "'", "end": "'"})
                                                              } else {
                                                              if ((_b = ((_c = scanner).$scan || $mm('scan')).call(_c, /\"/)) !== false && _b !== nil) {
                                                                this.string_parse = __hash2(["beg", "end", "interpolate"], {"beg": "\"", "end": "\"", "interpolate": true})
                                                              }
                                                            };
                                                            this.lex_state = "expr_fname";
                                                            return ["SYMBOL_BEG", ":"];
                                                            } else {
                                                            if ((_b = ((_c = scanner).$check || $mm('check')).call(_c, /\|/)) !== false && _b !== nil) {
                                                              if ((_b = ((_c = scanner).$scan || $mm('scan')).call(_c, /\|\|\=/)) !== false && _b !== nil) {
                                                                this.lex_state = "expr_beg";
                                                                return ["OP_ASGN", "||"];
                                                                } else {
                                                                if ((_b = ((_c = scanner).$scan || $mm('scan')).call(_c, /\|\|/)) !== false && _b !== nil) {
                                                                  this.lex_state = "expr_beg";
                                                                  return ["||", "||"];
                                                                  } else {
                                                                  if ((_b = ((_c = scanner).$scan || $mm('scan')).call(_c, /\|\=/)) !== false && _b !== nil) {
                                                                    this.lex_state = "expr_beg";
                                                                    return ["OP_ASGN", "|"];
                                                                    } else {
                                                                    if ((_b = ((_c = scanner).$scan || $mm('scan')).call(_c, /\|/)) !== false && _b !== nil) {
                                                                      if (((_b = this.lex_state)['$=='] || $mm('==')).call(_b, "expr_fname")) {
                                                                        this.lex_state = "expr_end";
                                                                        return ["|", ((_b = scanner).$matched || $mm('matched')).call(_b)];
                                                                        } else {
                                                                        this.lex_state = "expr_beg";
                                                                        return ["|", ((_b = scanner).$matched || $mm('matched')).call(_b)];
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                              } else {
                                                              if ((_b = ((_c = scanner).$scan || $mm('scan')).call(_c, /\^\=/)) !== false && _b !== nil) {
                                                                this.lex_state = "exor_beg";
                                                                return ["OP_ASGN", "^"];
                                                                } else {
                                                                if ((_b = ((_c = scanner).$scan || $mm('scan')).call(_c, /\^/)) !== false && _b !== nil) {
                                                                  if (((_b = this.lex_state)['$=='] || $mm('==')).call(_b, "expr_fname")) {
                                                                    this.lex_state = "expr_end";
                                                                    return ["^", ((_b = scanner).$matched || $mm('matched')).call(_b)];
                                                                  };
                                                                  this.lex_state = "expr_beg";
                                                                  return ["^", ((_b = scanner).$matched || $mm('matched')).call(_b)];
                                                                  } else {
                                                                  if ((_b = ((_c = scanner).$check || $mm('check')).call(_c, /\&/)) !== false && _b !== nil) {
                                                                    if ((_b = ((_c = scanner).$scan || $mm('scan')).call(_c, /\&\&\=/)) !== false && _b !== nil) {
                                                                      this.lex_state = "expr_beg";
                                                                      return ["OP_ASGN", "&&"];
                                                                      } else {
                                                                      if ((_b = ((_c = scanner).$scan || $mm('scan')).call(_c, /\&\&/)) !== false && _b !== nil) {
                                                                        this.lex_state = "expr_beg";
                                                                        return ["&&", ((_b = scanner).$matched || $mm('matched')).call(_b)];
                                                                        } else {
                                                                        if ((_b = ((_c = scanner).$scan || $mm('scan')).call(_c, /\&\=/)) !== false && _b !== nil) {
                                                                          this.lex_state = "expr_beg";
                                                                          return ["OP_ASGN", "&"];
                                                                          } else {
                                                                          if ((_b = ((_c = scanner).$scan || $mm('scan')).call(_c, /\&/)) !== false && _b !== nil) {
                                                                            if ((_b = (_c = ((_c = space_seen !== false && space_seen !== nil) ? (_d = ((_e = scanner).$check || $mm('check')).call(_e, /\s/), (_d === nil || _d === false)) : _c), _c !== false && _c !== nil ? ((_c = ((_d = this.lex_state)['$=='] || $mm('==')).call(_d, "expr_cmdarg")), _c !== false && _c !== nil ? _c : ((_d = this.lex_state)['$=='] || $mm('==')).call(_d, "expr_arg")) : _c)) !== false && _b !== nil) {
                                                                              return ["&@", "&"]
                                                                              } else {
                                                                              if ((_b = ((_c = ["expr_beg", "expr_mid"])['$include?'] || $mm('include?')).call(_c, this.lex_state)) !== false && _b !== nil) {
                                                                                return ["&@", "&"]
                                                                                } else {
                                                                                return ["&", "&"]
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                    } else {
                                                                    if ((_b = ((_c = scanner).$check || $mm('check')).call(_c, /\</)) !== false && _b !== nil) {
                                                                      if ((_b = ((_c = scanner).$scan || $mm('scan')).call(_c, /\<\<\=/)) !== false && _b !== nil) {
                                                                        this.lex_state = "expr_beg";
                                                                        return ["OP_ASGN", "<<"];
                                                                        } else {
                                                                        if ((_b = ((_c = scanner).$scan || $mm('scan')).call(_c, /\<\</)) !== false && _b !== nil) {
                                                                          if (((_b = this.lex_state)['$=='] || $mm('==')).call(_b, "expr_fname")) {
                                                                            this.lex_state = "expr_end";
                                                                            return ["<<", "<<"];
                                                                            } else {
                                                                            if ((_b = (_c = (_c = ((_d = ["expr_end", "expr_dot", "expr_endarg", "expr_class"])['$include?'] || $mm('include?')).call(_d, this.lex_state), (_c === nil || _c === false)), _c !== false && _c !== nil ? space_seen : _c)) !== false && _b !== nil) {
                                                                              if ((_b = ((_c = scanner).$scan || $mm('scan')).call(_c, /(-?)(\w+)/)) !== false && _b !== nil) {
                                                                                heredoc = ((_b = scanner)['$[]'] || $mm('[]')).call(_b, 2);
                                                                                ((_b = scanner).$scan || $mm('scan')).call(_b, /.*\n/);
                                                                                this.string_parse = __hash2(["beg", "end", "interpolate"], {"beg": heredoc, "end": heredoc, "interpolate": true});
                                                                                return ["STRING_BEG", heredoc];
                                                                              };
                                                                              this.lex_state = "expr_beg";
                                                                              return ["<<", "<<"];
                                                                            }
                                                                          };
                                                                          this.lex_state = "expr_beg";
                                                                          return ["<<", "<<"];
                                                                          } else {
                                                                          if ((_b = ((_c = scanner).$scan || $mm('scan')).call(_c, /\<\=\>/)) !== false && _b !== nil) {
                                                                            if (((_b = this.lex_state)['$=='] || $mm('==')).call(_b, "expr_fname")) {
                                                                              this.lex_state = "expr_end"
                                                                              } else {
                                                                              this.lex_state = "expr_beg"
                                                                            };
                                                                            return ["<=>", "<=>"];
                                                                            } else {
                                                                            if ((_b = ((_c = scanner).$scan || $mm('scan')).call(_c, /\<\=/)) !== false && _b !== nil) {
                                                                              if (((_b = this.lex_state)['$=='] || $mm('==')).call(_b, "expr_fname")) {
                                                                                this.lex_state = "expr_end"
                                                                                } else {
                                                                                this.lex_state = "expr_beg"
                                                                              };
                                                                              return ["<=", "<="];
                                                                              } else {
                                                                              if ((_b = ((_c = scanner).$scan || $mm('scan')).call(_c, /\</)) !== false && _b !== nil) {
                                                                                if (((_b = this.lex_state)['$=='] || $mm('==')).call(_b, "expr_fname")) {
                                                                                  this.lex_state = "expr_end"
                                                                                  } else {
                                                                                  this.lex_state = "expr_beg"
                                                                                };
                                                                                return ["<", "<"];
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                      } else {
                                                                      if ((_b = ((_c = scanner).$check || $mm('check')).call(_c, /\>/)) !== false && _b !== nil) {
                                                                        if ((_b = ((_c = scanner).$scan || $mm('scan')).call(_c, /\>\>\=/)) !== false && _b !== nil) {
                                                                          return ["OP_ASGN", ">>"]
                                                                          } else {
                                                                          if ((_b = ((_c = scanner).$scan || $mm('scan')).call(_c, /\>\>/)) !== false && _b !== nil) {
                                                                            return [">>", ">>"]
                                                                            } else {
                                                                            if ((_b = ((_c = scanner).$scan || $mm('scan')).call(_c, /\>\=/)) !== false && _b !== nil) {
                                                                              if (((_b = this.lex_state)['$=='] || $mm('==')).call(_b, "expr_fname")) {
                                                                                this.lex_state = "expr_end"
                                                                                } else {
                                                                                this.lex_state = "expr_beg"
                                                                              };
                                                                              return [">=", ((_b = scanner).$matched || $mm('matched')).call(_b)];
                                                                              } else {
                                                                              if ((_b = ((_c = scanner).$scan || $mm('scan')).call(_c, /\>/)) !== false && _b !== nil) {
                                                                                if (((_b = this.lex_state)['$=='] || $mm('==')).call(_b, "expr_fname")) {
                                                                                  this.lex_state = "expr_arg"
                                                                                  } else {
                                                                                  this.lex_state = "expr_beg"
                                                                                };
                                                                                return [">", ">"];
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                        } else {
                                                                        if ((_b = ((_c = scanner).$scan || $mm('scan')).call(_c, /->/)) !== false && _b !== nil) {
                                                                          this.lex_state = "expr_end";
                                                                          this.start_of_lambda = true;
                                                                          return ["LAMBDA", ((_b = scanner).$matched || $mm('matched')).call(_b)];
                                                                          } else {
                                                                          if ((_b = ((_c = scanner).$scan || $mm('scan')).call(_c, /[+-]/)) !== false && _b !== nil) {
                                                                            result = ((_b = scanner).$matched || $mm('matched')).call(_b);
                                                                            sign = (_b = result, _c = "@", typeof(_b) === 'number' ? _b + _c : _b['$+'](_c));
                                                                            if ((_b = ((_c = ((_d = this.lex_state)['$=='] || $mm('==')).call(_d, "expr_beg")), _c !== false && _c !== nil ? _c : ((_d = this.lex_state)['$=='] || $mm('==')).call(_d, "expr_mid"))) !== false && _b !== nil) {
                                                                              this.lex_state = "expr_mid";
                                                                              return [sign, sign];
                                                                              } else {
                                                                              if (((_b = this.lex_state)['$=='] || $mm('==')).call(_b, "expr_fname")) {
                                                                                this.lex_state = "expr_end";
                                                                                if ((_b = ((_c = scanner).$scan || $mm('scan')).call(_c, /@/)) !== false && _b !== nil) {
                                                                                  return ["IDENTIFIER", (_b = result, _c = ((_d = scanner).$matched || $mm('matched')).call(_d), typeof(_b) === 'number' ? _b + _c : _b['$+'](_c))]
                                                                                };
                                                                                return [result, result];
                                                                              }
                                                                            };
                                                                            if ((_b = ((_c = scanner).$scan || $mm('scan')).call(_c, /\=/)) !== false && _b !== nil) {
                                                                              this.lex_state = "expr_beg";
                                                                              return ["OP_ASGN", result];
                                                                            };
                                                                            if ((_b = ((_c = ((_d = this.lex_state)['$=='] || $mm('==')).call(_d, "expr_cmdarg")), _c !== false && _c !== nil ? _c : ((_d = this.lex_state)['$=='] || $mm('==')).call(_d, "expr_arg"))) !== false && _b !== nil) {
                                                                              if ((_b = (_c = (_c = ((_d = scanner).$check || $mm('check')).call(_d, /\s/), (_c === nil || _c === false)), _c !== false && _c !== nil ? space_seen : _c)) !== false && _b !== nil) {
                                                                                this.lex_state = "expr_mid";
                                                                                return [sign, sign];
                                                                              }
                                                                            };
                                                                            this.lex_state = "expr_beg";
                                                                            return [result, result];
                                                                            } else {
                                                                            if ((_b = ((_c = scanner).$scan || $mm('scan')).call(_c, /\?/)) !== false && _b !== nil) {
                                                                              if ((_b = ((_c = ["expr_end", "expr_endarg", "expr_arg"])['$include?'] || $mm('include?')).call(_c, this.lex_state)) !== false && _b !== nil) {
                                                                                this.lex_state = "expr_beg";
                                                                                return ["?", ((_b = scanner).$matched || $mm('matched')).call(_b)];
                                                                              };
                                                                              if ((_b = ((_c = scanner).$check || $mm('check')).call(_c, /\ |\t|\r/)) === false || _b === nil) {
                                                                                this.lex_state = "expr_end";
                                                                                return ["STRING", ((_b = scanner).$scan || $mm('scan')).call(_b, /./)];
                                                                              };
                                                                              this.lex_state = "expr_beg";
                                                                              return ["?", ((_b = scanner).$matched || $mm('matched')).call(_b)];
                                                                              } else {
                                                                              if ((_b = ((_c = scanner).$scan || $mm('scan')).call(_c, /\=\=\=/)) !== false && _b !== nil) {
                                                                                if (((_b = this.lex_state)['$=='] || $mm('==')).call(_b, "expr_fname")) {
                                                                                  this.lex_state = "expr_end";
                                                                                  return ["===", "==="];
                                                                                };
                                                                                this.lex_state = "expr_beg";
                                                                                return ["===", "==="];
                                                                                } else {
                                                                                if ((_b = ((_c = scanner).$scan || $mm('scan')).call(_c, /\=\=/)) !== false && _b !== nil) {
                                                                                  if (((_b = this.lex_state)['$=='] || $mm('==')).call(_b, "expr_fname")) {
                                                                                    this.lex_state = "expr_end";
                                                                                    return ["==", "=="];
                                                                                  };
                                                                                  this.lex_state = "expr_beg";
                                                                                  return ["==", "=="];
                                                                                  } else {
                                                                                  if ((_b = ((_c = scanner).$scan || $mm('scan')).call(_c, /\=\~/)) !== false && _b !== nil) {
                                                                                    if (((_b = this.lex_state)['$=='] || $mm('==')).call(_b, "expr_fname")) {
                                                                                      this.lex_state = "expr_end";
                                                                                      return ["=~", "=~"];
                                                                                    };
                                                                                    this.lex_state = "expr_beg";
                                                                                    return ["=~", "=~"];
                                                                                    } else {
                                                                                    if ((_b = ((_c = scanner).$scan || $mm('scan')).call(_c, /\=\>/)) !== false && _b !== nil) {
                                                                                      this.lex_state = "expr_beg";
                                                                                      return ["=>", "=>"];
                                                                                      } else {
                                                                                      if ((_b = ((_c = scanner).$scan || $mm('scan')).call(_c, /\=/)) !== false && _b !== nil) {
                                                                                        this.lex_state = "expr_beg";
                                                                                        return ["=", "="];
                                                                                        } else {
                                                                                        if ((_b = ((_c = scanner).$scan || $mm('scan')).call(_c, /\!\=/)) !== false && _b !== nil) {
                                                                                          if (((_b = this.lex_state)['$=='] || $mm('==')).call(_b, "expr_fname")) {
                                                                                            ((_b = this.lex_state)['$=='] || $mm('==')).call(_b, "expr_end");
                                                                                            return ["!=", "!="];
                                                                                          };
                                                                                          this.lex_state = "expr_beg";
                                                                                          return ["!=", "!="];
                                                                                          } else {
                                                                                          if ((_b = ((_c = scanner).$scan || $mm('scan')).call(_c, /\!\~/)) !== false && _b !== nil) {
                                                                                            this.lex_state = "expr_beg";
                                                                                            return ["!~", "!~"];
                                                                                            } else {
                                                                                            if ((_b = ((_c = scanner).$scan || $mm('scan')).call(_c, /\!/)) !== false && _b !== nil) {
                                                                                              if (((_b = this.lex_state)['$=='] || $mm('==')).call(_b, "expr_fname")) {
                                                                                                this.lex_state = "expr_end";
                                                                                                return ["!", "!"];
                                                                                              };
                                                                                              this.lex_state = "expr_beg";
                                                                                              return ["!", "!"];
                                                                                              } else {
                                                                                              if ((_b = ((_c = scanner).$scan || $mm('scan')).call(_c, /\~/)) !== false && _b !== nil) {
                                                                                                if (((_b = this.lex_state)['$=='] || $mm('==')).call(_b, "expr_fname")) {
                                                                                                  this.lex_state = "expr_end";
                                                                                                  return ["~", "~"];
                                                                                                };
                                                                                                this.lex_state = "expr_beg";
                                                                                                return ["~", "~"];
                                                                                                } else {
                                                                                                if ((_b = ((_c = scanner).$scan || $mm('scan')).call(_c, /\$[\+\'\`\&!@\"~*$?\/\\:;=.,<>_]/)) !== false && _b !== nil) {
                                                                                                  this.lex_state = "expr_end";
                                                                                                  return ["GVAR", ((_b = scanner).$matched || $mm('matched')).call(_b)];
                                                                                                  } else {
                                                                                                  if ((_b = ((_c = scanner).$scan || $mm('scan')).call(_c, /\$\w+/)) !== false && _b !== nil) {
                                                                                                    this.lex_state = "expr_end";
                                                                                                    return ["GVAR", ((_b = scanner).$matched || $mm('matched')).call(_b)];
                                                                                                    } else {
                                                                                                    if ((_b = ((_c = scanner).$scan || $mm('scan')).call(_c, /\@\@\w*/)) !== false && _b !== nil) {
                                                                                                      this.lex_state = "expr_end";
                                                                                                      return ["CVAR", ((_b = scanner).$matched || $mm('matched')).call(_b)];
                                                                                                      } else {
                                                                                                      if ((_b = ((_c = scanner).$scan || $mm('scan')).call(_c, /\@\w*/)) !== false && _b !== nil) {
                                                                                                        this.lex_state = "expr_end";
                                                                                                        return ["IVAR", ((_b = scanner).$matched || $mm('matched')).call(_b)];
                                                                                                        } else {
                                                                                                        if ((_b = ((_c = scanner).$scan || $mm('scan')).call(_c, /\,/)) !== false && _b !== nil) {
                                                                                                          this.lex_state = "expr_beg";
                                                                                                          return [",", ((_b = scanner).$matched || $mm('matched')).call(_b)];
                                                                                                          } else {
                                                                                                          if ((_b = ((_c = scanner).$scan || $mm('scan')).call(_c, /\{/)) !== false && _b !== nil) {
                                                                                                            if ((_b = this.start_of_lambda) !== false && _b !== nil) {
                                                                                                              this.start_of_lambda = false;
                                                                                                              this.lex_state = "expr_beg";
                                                                                                              return ["LAMBEG", ((_b = scanner).$matched || $mm('matched')).call(_b)];
                                                                                                              } else {
                                                                                                              if ((_b = ((_c = ["expr_end", "expr_arg", "expr_cmdarg"])['$include?'] || $mm('include?')).call(_c, this.lex_state)) !== false && _b !== nil) {
                                                                                                                result = "LCURLY"
                                                                                                                } else {
                                                                                                                if (((_b = this.lex_state)['$=='] || $mm('==')).call(_b, "expr_endarg")) {
                                                                                                                  result = "LBRACE_ARG"
                                                                                                                  } else {
                                                                                                                  result = "{"
                                                                                                                }
                                                                                                              }
                                                                                                            };
                                                                                                            this.lex_state = "expr_beg";
                                                                                                            ((_b = this).$cond_push || $mm('cond_push')).call(_b, 0);
                                                                                                            ((_b = this).$cmdarg_push || $mm('cmdarg_push')).call(_b, 0);
                                                                                                            return [result, ((_b = scanner).$matched || $mm('matched')).call(_b)];
                                                                                                            } else {
                                                                                                            if ((_b = ((_c = scanner).$check || $mm('check')).call(_c, /[0-9]/)) !== false && _b !== nil) {
                                                                                                              this.lex_state = "expr_end";
                                                                                                              if ((_b = ((_c = scanner).$scan || $mm('scan')).call(_c, /[\d_]+\.[\d_]+\b|[\d_]+(\.[\d_]+)?[eE][-+]?[\d_]+\b/)) !== false && _b !== nil) {
                                                                                                                return ["FLOAT", ((_b = ((_c = ((_d = scanner).$matched || $mm('matched')).call(_d)).$gsub || $mm('gsub')).call(_c, /_/, "")).$to_f || $mm('to_f')).call(_b)]
                                                                                                                } else {
                                                                                                                if ((_b = ((_c = scanner).$scan || $mm('scan')).call(_c, /[\d_]+\b/)) !== false && _b !== nil) {
                                                                                                                  return ["INTEGER", ((_b = ((_c = ((_d = scanner).$matched || $mm('matched')).call(_d)).$gsub || $mm('gsub')).call(_c, /_/, "")).$to_i || $mm('to_i')).call(_b)]
                                                                                                                  } else {
                                                                                                                  if ((_b = ((_c = scanner).$scan || $mm('scan')).call(_c, /0(x|X)(\d|[a-f]|[A-F])+/)) !== false && _b !== nil) {
                                                                                                                    return ["INTEGER", ((_b = ((_c = scanner).$matched || $mm('matched')).call(_c)).$to_i || $mm('to_i')).call(_b)]
                                                                                                                    } else {
                                                                                                                    ((_b = this).$raise || $mm('raise')).call(_b, "Lexing error on numeric type: `" + (((_c = scanner).$peek || $mm('peek')).call(_c, 5)) + "`")
                                                                                                                  }
                                                                                                                }
                                                                                                              };
                                                                                                              } else {
                                                                                                              if ((_b = ((_c = scanner).$scan || $mm('scan')).call(_c, /(\w)+[\?\!]?/)) !== false && _b !== nil) {
                                                                                                                matched = ((_b = scanner).$matched || $mm('matched')).call(_b);
                                                                                                                if ((_b = (_c = (_c = ((_d = ((_e = scanner).$peek || $mm('peek')).call(_e, 2))['$=='] || $mm('==')).call(_d, "::"), (_c === nil || _c === false)), _c !== false && _c !== nil ? ((_c = scanner).$scan || $mm('scan')).call(_c, /:/) : _c)) !== false && _b !== nil) {
                                                                                                                  this.lex_state = "expr_beg";
                                                                                                                  return ["LABEL", "" + (matched)];
                                                                                                                };
                                                                                                                $case = matched;if (((_b = "class")['$==='] || $mm('===')).call(_b, $case)) {
                                                                                                                if (((_b = this.lex_state)['$=='] || $mm('==')).call(_b, "expr_dot")) {
                                                                                                                  this.lex_state = "expr_end";
                                                                                                                  return ["IDENTIFIER", matched];
                                                                                                                };
                                                                                                                this.lex_state = "expr_class";
                                                                                                                return ["CLASS", matched];
                                                                                                                }
                                                                                                                else if (((_b = "module")['$==='] || $mm('===')).call(_b, $case)) {
                                                                                                                if (((_b = this.lex_state)['$=='] || $mm('==')).call(_b, "expr_dot")) {
                                                                                                                  return ["IDENTIFIER", matched]
                                                                                                                };
                                                                                                                this.lex_state = "expr_class";
                                                                                                                return ["MODULE", matched];
                                                                                                                }
                                                                                                                else if (((_b = "defined?")['$==='] || $mm('===')).call(_b, $case)) {
                                                                                                                if (((_b = this.lex_state)['$=='] || $mm('==')).call(_b, "expr_dot")) {
                                                                                                                  return ["IDENTIFIER", matched]
                                                                                                                };
                                                                                                                this.lex_state = "expr_arg";
                                                                                                                return ["DEFINED", "defined?"];
                                                                                                                }
                                                                                                                else if (((_b = "def")['$==='] || $mm('===')).call(_b, $case)) {
                                                                                                                this.lex_state = "expr_fname";
                                                                                                                this.scope_line = this.line;
                                                                                                                return ["DEF", matched];
                                                                                                                }
                                                                                                                else if (((_b = "undef")['$==='] || $mm('===')).call(_b, $case)) {
                                                                                                                this.lex_state = "expr_fname";
                                                                                                                return ["UNDEF", matched];
                                                                                                                }
                                                                                                                else if (((_b = "end")['$==='] || $mm('===')).call(_b, $case)) {
                                                                                                                if ((_b = ((_c = ["expr_dot", "expr_fname"])['$include?'] || $mm('include?')).call(_c, this.lex_state)) !== false && _b !== nil) {
                                                                                                                  this.lex_state = "expr_end";
                                                                                                                  return ["IDENTIFIER", matched];
                                                                                                                };
                                                                                                                this.lex_state = "expr_end";
                                                                                                                return ["END", matched];
                                                                                                                }
                                                                                                                else if (((_b = "do")['$==='] || $mm('===')).call(_b, $case)) {
                                                                                                                if ((_b = this.start_of_lambda) !== false && _b !== nil) {
                                                                                                                  this.start_of_lambda = false;
                                                                                                                  this.lex_state = "expr_beg";
                                                                                                                  return ["DO_LAMBDA", ((_b = scanner).$matched || $mm('matched')).call(_b)];
                                                                                                                  } else {
                                                                                                                  if ((_b = ((_c = this)['$cond?'] || $mm('cond?')).call(_c)) !== false && _b !== nil) {
                                                                                                                    this.lex_state = "expr_beg";
                                                                                                                    return ["DO_COND", matched];
                                                                                                                    } else {
                                                                                                                    if ((_b = (_c = ((_c = this)['$cmdarg?'] || $mm('cmdarg?')).call(_c), _c !== false && _c !== nil ? (_c = ((_d = this.lex_state)['$=='] || $mm('==')).call(_d, "expr_cmdarg"), (_c === nil || _c === false)) : _c)) !== false && _b !== nil) {
                                                                                                                      this.lex_state = "expr_beg";
                                                                                                                      return ["DO_BLOCK", matched];
                                                                                                                      } else {
                                                                                                                      if (((_b = this.lex_state)['$=='] || $mm('==')).call(_b, "expr_endarg")) {
                                                                                                                        return ["DO_BLOCK", matched]
                                                                                                                        } else {
                                                                                                                        this.lex_state = "expr_beg";
                                                                                                                        return ["DO", matched];
                                                                                                                      }
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                                }
                                                                                                                else if (((_b = "if")['$==='] || $mm('===')).call(_b, $case)) {
                                                                                                                if (((_b = this.lex_state)['$=='] || $mm('==')).call(_b, "expr_beg")) {
                                                                                                                  return ["IF", matched]
                                                                                                                };
                                                                                                                this.lex_state = "expr_beg";
                                                                                                                return ["IF_MOD", matched];
                                                                                                                }
                                                                                                                else if (((_b = "unless")['$==='] || $mm('===')).call(_b, $case)) {
                                                                                                                if (((_b = this.lex_state)['$=='] || $mm('==')).call(_b, "expr_beg")) {
                                                                                                                  return ["UNLESS", matched]
                                                                                                                };
                                                                                                                this.lex_state = "expr_beg";
                                                                                                                return ["UNLESS_MOD", matched];
                                                                                                                }
                                                                                                                else if (((_b = "else")['$==='] || $mm('===')).call(_b, $case)) {
                                                                                                                return ["ELSE", matched]
                                                                                                                }
                                                                                                                else if (((_b = "elsif")['$==='] || $mm('===')).call(_b, $case)) {
                                                                                                                return ["ELSIF", matched]
                                                                                                                }
                                                                                                                else if (((_b = "self")['$==='] || $mm('===')).call(_b, $case)) {
                                                                                                                if ((_b = ((_c = this.lex_state)['$=='] || $mm('==')).call(_c, "expr_fname")) === false || _b === nil) {
                                                                                                                  this.lex_state = "expr_end"
                                                                                                                };
                                                                                                                return ["SELF", matched];
                                                                                                                }
                                                                                                                else if (((_b = "true")['$==='] || $mm('===')).call(_b, $case)) {
                                                                                                                this.lex_state = "expr_end";
                                                                                                                return ["TRUE", matched];
                                                                                                                }
                                                                                                                else if (((_b = "false")['$==='] || $mm('===')).call(_b, $case)) {
                                                                                                                this.lex_state = "expr_end";
                                                                                                                return ["FALSE", matched];
                                                                                                                }
                                                                                                                else if (((_b = "nil")['$==='] || $mm('===')).call(_b, $case)) {
                                                                                                                this.lex_state = "expr_end";
                                                                                                                return ["NIL", matched];
                                                                                                                }
                                                                                                                else if (((_b = "__LINE__")['$==='] || $mm('===')).call(_b, $case)) {
                                                                                                                this.lex_state = "expr_end";
                                                                                                                return ["LINE", ((_b = this.line).$to_s || $mm('to_s')).call(_b)];
                                                                                                                }
                                                                                                                else if (((_b = "__FILE__")['$==='] || $mm('===')).call(_b, $case)) {
                                                                                                                this.lex_state = "expr_end";
                                                                                                                return ["FILE", matched];
                                                                                                                }
                                                                                                                else if (((_b = "begin")['$==='] || $mm('===')).call(_b, $case)) {
                                                                                                                if ((_b = ((_c = ["expr_dot", "expr_fname"])['$include?'] || $mm('include?')).call(_c, this.lex_state)) !== false && _b !== nil) {
                                                                                                                  this.lex_state = "expr_end";
                                                                                                                  return ["IDENTIFIER", matched];
                                                                                                                };
                                                                                                                this.lex_state = "expr_beg";
                                                                                                                return ["BEGIN", matched];
                                                                                                                }
                                                                                                                else if (((_b = "rescue")['$==='] || $mm('===')).call(_b, $case)) {
                                                                                                                if ((_b = ((_c = ["expr_dot", "expr_fname"])['$include?'] || $mm('include?')).call(_c, this.lex_state)) !== false && _b !== nil) {
                                                                                                                  return ["IDENTIFIER", matched]
                                                                                                                };
                                                                                                                if (((_b = this.lex_state)['$=='] || $mm('==')).call(_b, "expr_beg")) {
                                                                                                                  this.lex_state = "expr_mid";
                                                                                                                  return ["RESCUE", matched];
                                                                                                                };
                                                                                                                this.lex_state = "expr_beg";
                                                                                                                return ["RESCUE_MOD", matched];
                                                                                                                }
                                                                                                                else if (((_b = "ensure")['$==='] || $mm('===')).call(_b, $case)) {
                                                                                                                this.lex_state = "expr_beg";
                                                                                                                return ["ENSURE", matched];
                                                                                                                }
                                                                                                                else if (((_b = "case")['$==='] || $mm('===')).call(_b, $case)) {
                                                                                                                this.lex_state = "expr_beg";
                                                                                                                return ["CASE", matched];
                                                                                                                }
                                                                                                                else if (((_b = "when")['$==='] || $mm('===')).call(_b, $case)) {
                                                                                                                this.lex_state = "expr_beg";
                                                                                                                return ["WHEN", matched];
                                                                                                                }
                                                                                                                else if (((_b = "or")['$==='] || $mm('===')).call(_b, $case)) {
                                                                                                                this.lex_state = "expr_beg";
                                                                                                                return ["OR", matched];
                                                                                                                }
                                                                                                                else if (((_b = "and")['$==='] || $mm('===')).call(_b, $case)) {
                                                                                                                this.lex_state = "expr_beg";
                                                                                                                return ["AND", matched];
                                                                                                                }
                                                                                                                else if (((_b = "not")['$==='] || $mm('===')).call(_b, $case)) {
                                                                                                                this.lex_state = "expr_beg";
                                                                                                                return ["NOT", matched];
                                                                                                                }
                                                                                                                else if (((_b = "return")['$==='] || $mm('===')).call(_b, $case)) {
                                                                                                                this.lex_state = "expr_mid";
                                                                                                                return ["RETURN", matched];
                                                                                                                }
                                                                                                                else if (((_b = "next")['$==='] || $mm('===')).call(_b, $case)) {
                                                                                                                if ((_b = ((_c = ((_d = this.lex_state)['$=='] || $mm('==')).call(_d, "expr_dot")), _c !== false && _c !== nil ? _c : ((_d = this.lex_state)['$=='] || $mm('==')).call(_d, "expr_fname"))) !== false && _b !== nil) {
                                                                                                                  this.lex_state = "expr_end";
                                                                                                                  return ["IDENTIFIER", matched];
                                                                                                                };
                                                                                                                this.lex_state = "expr_mid";
                                                                                                                return ["NEXT", matched];
                                                                                                                }
                                                                                                                else if (((_b = "redo")['$==='] || $mm('===')).call(_b, $case)) {
                                                                                                                if ((_b = ((_c = ((_d = this.lex_state)['$=='] || $mm('==')).call(_d, "expr_dot")), _c !== false && _c !== nil ? _c : ((_d = this.lex_state)['$=='] || $mm('==')).call(_d, "expr_fname"))) !== false && _b !== nil) {
                                                                                                                  this.lex_state = "expr_end";
                                                                                                                  return ["IDENTIFIER", matched];
                                                                                                                };
                                                                                                                this.lex_state = "expr_mid";
                                                                                                                return ["REDO", matched];
                                                                                                                }
                                                                                                                else if (((_b = "break")['$==='] || $mm('===')).call(_b, $case)) {
                                                                                                                this.lex_state = "expr_mid";
                                                                                                                return ["BREAK", matched];
                                                                                                                }
                                                                                                                else if (((_b = "super")['$==='] || $mm('===')).call(_b, $case)) {
                                                                                                                this.lex_state = "expr_arg";
                                                                                                                return ["SUPER", matched];
                                                                                                                }
                                                                                                                else if (((_b = "then")['$==='] || $mm('===')).call(_b, $case)) {
                                                                                                                return ["THEN", matched]
                                                                                                                }
                                                                                                                else if (((_b = "while")['$==='] || $mm('===')).call(_b, $case)) {
                                                                                                                if (((_b = this.lex_state)['$=='] || $mm('==')).call(_b, "expr_beg")) {
                                                                                                                  return ["WHILE", matched]
                                                                                                                };
                                                                                                                this.lex_state = "expr_beg";
                                                                                                                return ["WHILE_MOD", matched];
                                                                                                                }
                                                                                                                else if (((_b = "until")['$==='] || $mm('===')).call(_b, $case)) {
                                                                                                                if (((_b = this.lex_state)['$=='] || $mm('==')).call(_b, "expr_beg")) {
                                                                                                                  return ["UNTIL", matched]
                                                                                                                };
                                                                                                                this.lex_state = "expr_beg";
                                                                                                                return ["UNTIL_MOD", matched];
                                                                                                                }
                                                                                                                else if (((_b = "yield")['$==='] || $mm('===')).call(_b, $case)) {
                                                                                                                this.lex_state = "expr_arg";
                                                                                                                return ["YIELD", matched];
                                                                                                                }
                                                                                                                else if (((_b = "alias")['$==='] || $mm('===')).call(_b, $case)) {
                                                                                                                this.lex_state = "expr_fname";
                                                                                                                return ["ALIAS", matched];
                                                                                                                };
                                                                                                                matched = matched;
                                                                                                                if ((_b = (_c = (_c = ((_d = ((_e = scanner).$peek || $mm('peek')).call(_e, 2))['$=='] || $mm('==')).call(_d, "::"), (_c === nil || _c === false)), _c !== false && _c !== nil ? ((_c = scanner).$scan || $mm('scan')).call(_c, /\:/) : _c)) !== false && _b !== nil) {
                                                                                                                  return ["LABEL", matched]
                                                                                                                };
                                                                                                                if (((_b = this.lex_state)['$=='] || $mm('==')).call(_b, "expr_fname")) {
                                                                                                                  if ((_b = ((_c = scanner).$scan || $mm('scan')).call(_c, /\=/)) !== false && _b !== nil) {
                                                                                                                    this.lex_state = "expr_end";
                                                                                                                    return ["IDENTIFIER", (_b = matched, _c = ((_d = scanner).$matched || $mm('matched')).call(_d), typeof(_b) === 'number' ? _b + _c : _b['$+'](_c))];
                                                                                                                  }
                                                                                                                };
                                                                                                                if ((_b = ((_c = ["expr_beg", "expr_dot", "expr_mid", "expr_arg", "expr_cmdarg"])['$include?'] || $mm('include?')).call(_c, this.lex_state)) !== false && _b !== nil) {
                                                                                                                  this.lex_state = (function() { if (cmd_start !== false && cmd_start !== nil) {
                                                                                                                    return "expr_cmdarg"
                                                                                                                    } else {
                                                                                                                    return "expr_arg"
                                                                                                                  }; return nil; }).call(this)
                                                                                                                  } else {
                                                                                                                  this.lex_state = "expr_end"
                                                                                                                };
                                                                                                                return [(function() { if ((_b = ((_c = matched)['$=~'] || $mm('=~')).call(_c, /^[A-Z]/)) !== false && _b !== nil) {
                                                                                                                  return "CONSTANT"
                                                                                                                  } else {
                                                                                                                  return "IDENTIFIER"
                                                                                                                }; return nil; }).call(this), matched];
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        };
        if ((_b = ((_c = scanner)['$eos?'] || $mm('eos?')).call(_c)) !== false && _b !== nil) {
          return [false, false]
        };
        ((_b = this).$raise || $mm('raise')).call(_b, "Unexpected content in parsing stream `" + (((_c = scanner).$peek || $mm('peek')).call(_c, 5)) + "` :" + (this.file) + ":" + (this.line));};
      };

      return nil;
    })(Opal, ((_a = (((_b = __scope.Racc) == null ? __opal.cm("Racc") : _b))._scope.Parser) == null ? __opal.cm("Parser") : _a))
    
  })(self);
})(Opal);

  (function(__opal) {
  var self = __opal.top, __scope = __opal, nil = __opal.nil, $mm = __opal.mm, __breaker = __opal.breaker, __slice = __opal.slice, __module = __opal.module, __klass = __opal.klass, __hash2 = __opal.hash2, __range = __opal.range;
  return (function(__base){
    function Opal() {};
    Opal = __module(__base, "Opal", Opal);
    var def = Opal.prototype, __scope = Opal._scope;

    (function(__base, __super){
      function Parser() {};
      Parser = __klass(__base, __super, "Parser", Parser);

      var def = Parser.prototype, __scope = Parser._scope, TMP_27, _a;
      def.grammar = def.requires = def.file = def.line = def.indent = def.unique = def.scope = def.optimized_operators = def.helpers = def.method_missing = def.arity_check = def.while_loop = def.space = nil;

      __scope.INDENT = "  ";

      __scope.LEVEL = ["stmt", "stmt_closure", "list", "expr", "recv"];

      __scope.COMPARE = ["<", ">", "<=", ">="];

      __scope.RESERVED = ["break", "case", "catch", "continue", "debugger", "default", "delete", "do", "else", "finally", "for", "function", "if", "in", "instanceof", "new", "return", "switch", "this", "throw", "try", "typeof", "var", "let", "void", "while", "with", "class", "enum", "export", "extends", "import", "super", "true", "false", "native", "const"];

      __scope.STATEMENTS = ["xstr", "dxstr"];

      def.$grammar = function() {
        
        return this.grammar
      }, nil;

      def.$requires = function() {
        
        return this.requires
      }, nil;

      def.$parse = function(source, options) {
        var _a, _b, _c;if (options == null) {
          options = __hash2([], {})
        }
        this.grammar = ((_a = ((_b = __scope.Grammar) == null ? __opal.cm("Grammar") : _b)).$new || $mm('new')).call(_a);
        this.requires = [];
        this.line = 1;
        this.indent = "";
        this.unique = 0;
        this.helpers = __hash2(["breaker", "slice"], {"breaker": true, "slice": true});
        this.file = ((_a = ((_b = options)['$[]'] || $mm('[]')).call(_b, "file")), _a !== false && _a !== nil ? _a : "(file)");
        this.method_missing = (_a = ((_b = ((_c = options)['$[]'] || $mm('[]')).call(_c, "method_missing"))['$=='] || $mm('==')).call(_b, false), (_a === nil || _a === false));
        this.optimized_operators = (_a = ((_b = ((_c = options)['$[]'] || $mm('[]')).call(_c, "optimized_operators"))['$=='] || $mm('==')).call(_b, false), (_a === nil || _a === false));
        this.arity_check = ((_a = options)['$[]'] || $mm('[]')).call(_a, "arity_check");
        return ((_a = this).$top || $mm('top')).call(_a, ((_b = this.grammar).$parse || $mm('parse')).call(_b, source, this.file));
      };

      def.$error = function(msg) {
        var _a;
        return ((_a = this).$raise || $mm('raise')).call(_a, "" + (msg) + " :" + (this.file) + ":" + (this.line));
      };

      def.$parser_indent = function() {
        
        return this.indent;
      };

      def.$s = function(parts) {
        var sexp = nil, _a, _b;parts = __slice.call(arguments, 0);
        sexp = ((_a = ((_b = __scope.Array) == null ? __opal.cm("Array") : _b)).$new || $mm('new')).call(_a, parts);
        ((_a = sexp)['$line='] || $mm('line=')).call(_a, this.line);
        return sexp;
      };

      def.$mid_to_jsid = function(mid) {
        var _a, _b, _c;
        if ((_a = ((_b = /\=|\+|\-|\*|\/|\!|\?|\<|\>|\&|\||\^|\%|\~|\[/)['$=~'] || $mm('=~')).call(_b, ((_c = mid).$to_s || $mm('to_s')).call(_c))) !== false && _a !== nil) {
          return "['$" + (mid) + "']"
          } else {
          return (_a = ".$", _b = mid, typeof(_a) === 'number' ? _a + _b : _a['$+'](_b))
        };
      };

      def.$unique_temp = function() {
        var _a;
        return "TMP_" + (this.unique = ((_a = this.unique)['$+'] || $mm('+')).call(_a, 1));
      };

      def.$top = function(sexp, options) {
        var code = nil, vars = nil, TMP_1, _a;if (options == null) {
          options = __hash2([], {})
        }
        code = nil;
        vars = [];
        ((_a = this).$in_scope || $mm('in_scope')).call(_a, "top", (TMP_1 = function() {

          var self = TMP_1._s || this, TMP_2, _a, _b, TMP_3, _c, _d, _e, _f, _g;
          if (self.scope == null) self.scope = nil;
          if (self.helpers == null) self.helpers = nil;

          
          ((_a = self).$indent || $mm('indent')).call(_a, (TMP_2 = function() {

            var self = TMP_2._s || this, _a, _b, _c, _d;
            if (self.indent == null) self.indent = nil;

            
            return code = (_a = self.indent, _b = ((_c = self).$process || $mm('process')).call(_c, ((_d = self).$s || $mm('s')).call(_d, "scope", sexp), "stmt"), typeof(_a) === 'number' ? _a + _b : _a['$+'](_b))
          }, TMP_2._s = self, TMP_2));
          ((_a = self.scope).$add_temp || $mm('add_temp')).call(_a, "self = __opal.top");
          ((_a = self.scope).$add_temp || $mm('add_temp')).call(_a, "__scope = __opal");
          ((_a = self.scope).$add_temp || $mm('add_temp')).call(_a, "nil = __opal.nil");
          ((_a = self.scope).$add_temp || $mm('add_temp')).call(_a, "$mm = __opal.mm");
          if ((_a = ((_b = self.scope).$defines_defn || $mm('defines_defn')).call(_b)) !== false && _a !== nil) {
            ((_a = self.scope).$add_temp || $mm('add_temp')).call(_a, "def = " + (((_b = self).$current_self || $mm('current_self')).call(_b)) + "._klass.prototype")
          };
          ((_a = ((_b = self.helpers).$keys || $mm('keys')).call(_b)).$each || $mm('each')).call(_a, (TMP_3 = function(h) {

            var self = TMP_3._s || this, _a;
            if (self.scope == null) self.scope = nil;

            if (h == null) h = nil;

            return ((_a = self.scope).$add_temp || $mm('add_temp')).call(_a, "__" + (h) + " = __opal." + (h))
          }, TMP_3._s = self, TMP_3));
          return code = (_a = (_c = (_e = ((_g = __scope.INDENT) == null ? __opal.cm("INDENT") : _g), _f = ((_g = self.scope).$to_vars || $mm('to_vars')).call(_g), typeof(_e) === 'number' ? _e + _f : _e['$+'](_f)), _d = "\n", typeof(_c) === 'number' ? _c + _d : _c['$+'](_d)), _b = code, typeof(_a) === 'number' ? _a + _b : _a['$+'](_b));
        }, TMP_1._s = this, TMP_1));
        return "(function(__opal) {\n" + (code) + "\n})(Opal);\n";
      };

      def.$in_scope = function(type, __yield) {
        var parent = nil, TMP_4, _a, _b, _c;if (typeof(__yield) !== 'function') { __yield = nil }
        if (__yield === nil) {
          return nil
        };
        parent = this.scope;
        this.scope = ((_a = ((_b = ((_c = __scope.Scope) == null ? __opal.cm("Scope") : _c)).$new || $mm('new')).call(_b, type, this)).$tap || $mm('tap')).call(_a, (TMP_4 = function(s) {

          var self = TMP_4._s || this, _a;
          if (s == null) s = nil;

          return ((_a = s)['$parent='] || $mm('parent=')).call(_a, parent)
        }, TMP_4._s = this, TMP_4));
        if (__yield(this.scope) === __breaker) return __breaker.$v;
        return this.scope = parent;
      };

      def.$indent = function(block) {
        var indent = nil, res = nil, _a, _b;if (typeof(block) !== 'function') { block = nil }
        indent = this.indent;
        this.indent = ((_a = this.indent)['$+'] || $mm('+')).call(_a, ((_b = __scope.INDENT) == null ? __opal.cm("INDENT") : _b));
        this.space = "\n" + (this.indent);
        res = (((_a = block()) === __breaker) ? __breaker.$v : _a);
        this.indent = indent;
        this.space = "\n" + (this.indent);
        return res;
      };

      def.$with_temp = function(block) {
        var tmp = nil, res = nil, _a;if (typeof(block) !== 'function') { block = nil }
        tmp = ((_a = this.scope).$new_temp || $mm('new_temp')).call(_a);
        res = (((_a = block(tmp)) === __breaker) ? __breaker.$v : _a);
        ((_a = this.scope).$queue_temp || $mm('queue_temp')).call(_a, tmp);
        return res;
      };

      def.$in_while = function(__yield) {
        var result = nil, _a;if (typeof(__yield) !== 'function') { __yield = nil }
        if (__yield === nil) {
          return nil
        };
        this.while_loop = ((_a = this.scope).$push_while || $mm('push_while')).call(_a);
        result = (((_a = __yield()) === __breaker) ? __breaker.$v : _a);
        ((_a = this.scope).$pop_while || $mm('pop_while')).call(_a);
        return result;
      };

      def['$in_while?'] = function() {
        var _a;
        return ((_a = this.scope)['$in_while?'] || $mm('in_while?')).call(_a);
      };

      def.$process = function(sexp, level) {
        var type = nil, meth = nil, _a;
        type = ((_a = sexp).$shift || $mm('shift')).call(_a);
        meth = "process_" + (type);
        if ((_a = (!!this['$' + meth])) === false || _a === nil) {
          ((_a = this).$raise || $mm('raise')).call(_a, "Unsupported sexp: " + (type))
        };
        this.line = ((_a = sexp).$line || $mm('line')).call(_a);
        return ((_a = this).$__send__ || $mm('__send__')).call(_a, meth, sexp, level);
      };

      def.$returns = function(sexp) {
        var $case = nil, _a, _b, _c, _d, TMP_5;
        if ((_a = sexp) === false || _a === nil) {
          return ((_a = this).$returns || $mm('returns')).call(_a, ((_b = this).$s || $mm('s')).call(_b, "nil"))
        };
        return (function() { $case = ((_a = sexp).$first || $mm('first')).call(_a);if (((_a = "break")['$==='] || $mm('===')).call(_a, $case) || ((_a = "next")['$==='] || $mm('===')).call(_a, $case)) {
        return sexp
        }
        else if (((_a = "yield")['$==='] || $mm('===')).call(_a, $case)) {
        ((_a = sexp)['$[]='] || $mm('[]=')).call(_a, 0, "returnable_yield");
        return sexp;
        }
        else if (((_a = "scope")['$==='] || $mm('===')).call(_a, $case)) {
        ((_a = sexp)['$[]='] || $mm('[]=')).call(_a, 1, ((_b = this).$returns || $mm('returns')).call(_b, ((_c = sexp)['$[]'] || $mm('[]')).call(_c, 1)));
        return sexp;
        }
        else if (((_a = "block")['$==='] || $mm('===')).call(_a, $case)) {
        if (((_a = ((_b = sexp).$length || $mm('length')).call(_b))['$>'] || $mm('>')).call(_a, 1)) {
          ((_a = sexp)['$[]='] || $mm('[]=')).call(_a, -1, ((_b = this).$returns || $mm('returns')).call(_b, ((_c = sexp)['$[]'] || $mm('[]')).call(_c, -1)))
          } else {
          ((_a = sexp)['$<<'] || $mm('<<')).call(_a, ((_b = this).$returns || $mm('returns')).call(_b, ((_c = this).$s || $mm('s')).call(_c, "nil")))
        };
        return sexp;
        }
        else if (((_a = "when")['$==='] || $mm('===')).call(_a, $case)) {
        ((_a = sexp)['$[]='] || $mm('[]=')).call(_a, 2, ((_b = this).$returns || $mm('returns')).call(_b, ((_c = sexp)['$[]'] || $mm('[]')).call(_c, 2)));
        return sexp;
        }
        else if (((_a = "rescue")['$==='] || $mm('===')).call(_a, $case)) {
        ((_a = sexp)['$[]='] || $mm('[]=')).call(_a, 1, ((_b = this).$returns || $mm('returns')).call(_b, ((_c = sexp)['$[]'] || $mm('[]')).call(_c, 1)));
        return sexp;
        }
        else if (((_a = "ensure")['$==='] || $mm('===')).call(_a, $case)) {
        ((_a = sexp)['$[]='] || $mm('[]=')).call(_a, 1, ((_b = this).$returns || $mm('returns')).call(_b, ((_c = sexp)['$[]'] || $mm('[]')).call(_c, 1)));
        return sexp;
        }
        else if (((_a = "while")['$==='] || $mm('===')).call(_a, $case)) {
        return sexp
        }
        else if (((_a = "return")['$==='] || $mm('===')).call(_a, $case)) {
        return sexp
        }
        else if (((_a = "xstr")['$==='] || $mm('===')).call(_a, $case)) {
        if ((_a = ((_b = /return|;/)['$=~'] || $mm('=~')).call(_b, ((_c = sexp)['$[]'] || $mm('[]')).call(_c, 1))) === false || _a === nil) {
          ((_a = sexp)['$[]='] || $mm('[]=')).call(_a, 1, "return " + (((_b = sexp)['$[]'] || $mm('[]')).call(_b, 1)) + ";")
        };
        return sexp;
        }
        else if (((_a = "dxstr")['$==='] || $mm('===')).call(_a, $case)) {
        if ((_a = ((_b = /return|;|\n/)['$=~'] || $mm('=~')).call(_b, ((_c = sexp)['$[]'] || $mm('[]')).call(_c, 1))) === false || _a === nil) {
          ((_a = sexp)['$[]='] || $mm('[]=')).call(_a, 1, "return " + (((_b = sexp)['$[]'] || $mm('[]')).call(_b, 1)))
        };
        return sexp;
        }
        else if (((_a = "if")['$==='] || $mm('===')).call(_a, $case)) {
        ((_a = sexp)['$[]='] || $mm('[]=')).call(_a, 2, ((_b = this).$returns || $mm('returns')).call(_b, ((_c = ((_d = sexp)['$[]'] || $mm('[]')).call(_d, 2)), _c !== false && _c !== nil ? _c : ((_d = this).$s || $mm('s')).call(_d, "nil"))));
        ((_a = sexp)['$[]='] || $mm('[]=')).call(_a, 3, ((_b = this).$returns || $mm('returns')).call(_b, ((_c = ((_d = sexp)['$[]'] || $mm('[]')).call(_d, 3)), _c !== false && _c !== nil ? _c : ((_d = this).$s || $mm('s')).call(_d, "nil"))));
        return sexp;
        }
        else {return ((_a = ((_b = this).$s || $mm('s')).call(_b, "js_return", sexp)).$tap || $mm('tap')).call(_a, (TMP_5 = function(s) {

          var self = TMP_5._s || this, _a, _b;
          if (s == null) s = nil;

          return ((_a = s)['$line='] || $mm('line=')).call(_a, ((_b = sexp).$line || $mm('line')).call(_b))
        }, TMP_5._s = this, TMP_5))} }).call(this);
      };

      def['$expression?'] = function(sexp) {
        var _a, _b, _c;
        return (_a = ((_b = ((_c = __scope.STATEMENTS) == null ? __opal.cm("STATEMENTS") : _c))['$include?'] || $mm('include?')).call(_b, ((_c = sexp).$first || $mm('first')).call(_c)), (_a === nil || _a === false));
      };

      def.$process_block = function(sexp, level) {
        var result = nil, stmt = nil, type = nil, yasgn = nil, expr = nil, code = nil, _a, _b, _c, _d;
        result = [];
        if ((_a = ((_b = sexp)['$empty?'] || $mm('empty?')).call(_b)) !== false && _a !== nil) {
          ((_a = sexp)['$<<'] || $mm('<<')).call(_a, ((_b = this).$s || $mm('s')).call(_b, "nil"))
        };
        while (!((_b = ((_c = sexp)['$empty?'] || $mm('empty?')).call(_c)) !== false && _b !== nil)) {stmt = ((_b = sexp).$shift || $mm('shift')).call(_b);
        type = ((_b = stmt).$first || $mm('first')).call(_b);
        if ((_b = yasgn = ((_c = this).$find_inline_yield || $mm('find_inline_yield')).call(_c, stmt)) !== false && _b !== nil) {
          ((_b = result)['$<<'] || $mm('<<')).call(_b, "" + (((_c = this).$process || $mm('process')).call(_c, yasgn, level)) + ";")
        };
        (_b = expr = ((_b = this)['$expression?'] || $mm('expression?')).call(_b, stmt), _b !== false && _b !== nil ? ((_b = ((_c = ((_d = __scope.LEVEL) == null ? __opal.cm("LEVEL") : _d)).$index || $mm('index')).call(_c, level))['$<'] || $mm('<')).call(_b, ((_c = ((_d = __scope.LEVEL) == null ? __opal.cm("LEVEL") : _d)).$index || $mm('index')).call(_c, "list")) : _b);
        code = ((_b = this).$process || $mm('process')).call(_b, stmt, level);
        if ((_b = ((_c = code)['$=='] || $mm('==')).call(_c, "")) === false || _b === nil) {
          ((_b = result)['$<<'] || $mm('<<')).call(_b, (function() { if (expr !== false && expr !== nil) {
            return "" + (code) + ";"
            } else {
            return code
          }; return nil; }).call(this))
        };};
        return ((_a = result).$join || $mm('join')).call(_a, (function() { if ((_b = ((_c = this.scope)['$class_scope?'] || $mm('class_scope?')).call(_c)) !== false && _b !== nil) {
          return "\n\n" + (this.indent)
          } else {
          return "\n" + (this.indent)
        }; return nil; }).call(this));
      };

      def.$find_inline_yield = function(stmt) {
        var found = nil, $case = nil, arglist = nil, _a, _b, TMP_6, TMP_7;
        found = nil;
        $case = ((_a = stmt).$first || $mm('first')).call(_a);if (((_a = "js_return")['$==='] || $mm('===')).call(_a, $case)) {
        found = ((_a = this).$find_inline_yield || $mm('find_inline_yield')).call(_a, ((_b = stmt)['$[]'] || $mm('[]')).call(_b, 1))
        }
        else if (((_a = "array")['$==='] || $mm('===')).call(_a, $case)) {
        ((_a = ((_b = stmt)['$[]'] || $mm('[]')).call(_b, __range(1, -1, false))).$each_with_index || $mm('each_with_index')).call(_a, (TMP_6 = function(el, idx) {

          var self = TMP_6._s || this, _a, _b, _c;
          if (el == null) el = nil;
if (idx == null) idx = nil;

          if (((_a = ((_b = el).$first || $mm('first')).call(_b))['$=='] || $mm('==')).call(_a, "yield")) {
            found = el;
            return ((_a = stmt)['$[]='] || $mm('[]=')).call(_a, (_b = idx, _c = 1, typeof(_b) === 'number' ? _b + _c : _b['$+'](_c)), ((_b = self).$s || $mm('s')).call(_b, "js_tmp", "__yielded"));
            } else {
            return nil
          }
        }, TMP_6._s = this, TMP_6))
        }
        else if (((_a = "call")['$==='] || $mm('===')).call(_a, $case)) {
        arglist = ((_a = stmt)['$[]'] || $mm('[]')).call(_a, 3);
        ((_a = ((_b = arglist)['$[]'] || $mm('[]')).call(_b, __range(1, -1, false))).$each_with_index || $mm('each_with_index')).call(_a, (TMP_7 = function(el, idx) {

          var self = TMP_7._s || this, _a, _b, _c;
          if (el == null) el = nil;
if (idx == null) idx = nil;

          if (((_a = ((_b = el).$first || $mm('first')).call(_b))['$=='] || $mm('==')).call(_a, "yield")) {
            found = el;
            return ((_a = arglist)['$[]='] || $mm('[]=')).call(_a, (_b = idx, _c = 1, typeof(_b) === 'number' ? _b + _c : _b['$+'](_c)), ((_b = self).$s || $mm('s')).call(_b, "js_tmp", "__yielded"));
            } else {
            return nil
          }
        }, TMP_7._s = this, TMP_7));
        };
        if (found !== false && found !== nil) {
          if ((_a = ((_b = this.scope)['$has_temp?'] || $mm('has_temp?')).call(_b, "__yielded")) === false || _a === nil) {
            ((_a = this.scope).$add_temp || $mm('add_temp')).call(_a, "__yielded")
          };
          return ((_a = this).$s || $mm('s')).call(_a, "yasgn", "__yielded", found);
          } else {
          return nil
        };
      };

      def.$process_scope = function(sexp, level) {
        var stmt = nil, code = nil, _a, _b;
        stmt = ((_a = sexp).$shift || $mm('shift')).call(_a);
        if (stmt !== false && stmt !== nil) {
          if ((_a = ((_b = this.scope)['$class_scope?'] || $mm('class_scope?')).call(_b)) === false || _a === nil) {
            stmt = ((_a = this).$returns || $mm('returns')).call(_a, stmt)
          };
          code = ((_a = this).$process || $mm('process')).call(_a, stmt, "stmt");
          } else {
          code = "nil"
        };
        return code;
      };

      def.$process_js_return = function(sexp, level) {
        var _a, _b;
        return "return " + (((_a = this).$process || $mm('process')).call(_a, ((_b = sexp).$shift || $mm('shift')).call(_b), "expr"));
      };

      def.$process_js_tmp = function(sexp, level) {
        var _a, _b;
        return ((_a = ((_b = sexp).$shift || $mm('shift')).call(_b)).$to_s || $mm('to_s')).call(_a);
      };

      def.$process_operator = function(sexp, level) {
        var meth = nil, recv = nil, arg = nil, mid = nil, _a, _b, TMP_8;
        ((_a = sexp)._isArray ? _a : (_a = [_a])), meth = (_a[0] == null ? nil : _a[0]), recv = (_a[1] == null ? nil : _a[1]), arg = (_a[2] == null ? nil : _a[2]);
        mid = ((_a = this).$mid_to_jsid || $mm('mid_to_jsid')).call(_a, ((_b = meth).$to_s || $mm('to_s')).call(_b));
        if ((_a = this.optimized_operators) !== false && _a !== nil) {
          return ((_a = this).$with_temp || $mm('with_temp')).call(_a, (TMP_8 = function(a) {

            var self = TMP_8._s || this, TMP_9, _a;
            if (a == null) a = nil;

            return ((_a = self).$with_temp || $mm('with_temp')).call(_a, (TMP_9 = function(b) {

              var l = nil, r = nil, self = TMP_9._s || this, _a, _b;
              if (b == null) b = nil;

              l = ((_a = self).$process || $mm('process')).call(_a, recv, "expr");
              r = ((_a = self).$process || $mm('process')).call(_a, arg, "expr");
              return ((_a = "(%s = %s, %s = %s, typeof(%s) === 'number' ? %s %s %s : %s%s(%s))")['$%'] || $mm('%')).call(_a, [a, l, b, r, a, a, ((_b = meth).$to_s || $mm('to_s')).call(_b), b, a, mid, b]);
            }, TMP_9._s = self, TMP_9))
          }, TMP_8._s = this, TMP_8))
          } else {
          return "" + (((_a = this).$process || $mm('process')).call(_a, recv, "recv")) + (mid) + "(" + (((_a = this).$process || $mm('process')).call(_a, arg, "expr")) + ")"
        };
      };

      def.$js_block_given = function(sexp, level) {
        var _a, _b;
        ((_a = this.scope)['$uses_block!'] || $mm('uses_block!')).call(_a);
        if ((_a = ((_b = this.scope).$block_name || $mm('block_name')).call(_b)) !== false && _a !== nil) {
          return "(" + (((_a = this.scope).$block_name || $mm('block_name')).call(_a)) + " !== nil)"
          } else {
          return "false"
        };
      };

      def.$handle_block_given = function(sexp, reverse) {
        var name = nil, _a;if (reverse == null) {
          reverse = false
        }
        ((_a = this.scope)['$uses_block!'] || $mm('uses_block!')).call(_a);
        name = ((_a = this.scope).$block_name || $mm('block_name')).call(_a);
        if (reverse !== false && reverse !== nil) {
          return "" + (name) + " === nil"
          } else {
          return "" + (name) + " !== nil"
        };
      };

      def.$process_lit = function(sexp, level) {
        var val = nil, $case = nil, _a, _b;
        val = ((_a = sexp).$shift || $mm('shift')).call(_a);
        return (function() { $case = val;if (((_a = ((_b = __scope.Numeric) == null ? __opal.cm("Numeric") : _b))['$==='] || $mm('===')).call(_a, $case)) {
        if (((_a = level)['$=='] || $mm('==')).call(_a, "recv")) {
          return "(" + (((_a = val).$inspect || $mm('inspect')).call(_a)) + ")"
          } else {
          return ((_a = val).$inspect || $mm('inspect')).call(_a)
        }
        }
        else if (((_a = ((_b = __scope.Symbol) == null ? __opal.cm("Symbol") : _b))['$==='] || $mm('===')).call(_a, $case)) {
        return ((_a = ((_b = val).$to_s || $mm('to_s')).call(_b)).$inspect || $mm('inspect')).call(_a)
        }
        else if (((_a = ((_b = __scope.Regexp) == null ? __opal.cm("Regexp") : _b))['$==='] || $mm('===')).call(_a, $case)) {
        if (((_a = val)['$=='] || $mm('==')).call(_a, /^/)) {
          return ((_a = /^/).$inspect || $mm('inspect')).call(_a)
          } else {
          return ((_a = val).$inspect || $mm('inspect')).call(_a)
        }
        }
        else if (((_a = ((_b = __scope.Range) == null ? __opal.cm("Range") : _b))['$==='] || $mm('===')).call(_a, $case)) {
        ((_a = this.helpers)['$[]='] || $mm('[]=')).call(_a, "range", true);
        return "__range(" + (((_a = val).$begin || $mm('begin')).call(_a)) + ", " + (((_a = val).$end || $mm('end')).call(_a)) + ", " + (((_a = val)['$exclude_end?'] || $mm('exclude_end?')).call(_a)) + ")";
        }
        else {return ((_a = this).$raise || $mm('raise')).call(_a, "Bad lit: " + (((_b = val).$inspect || $mm('inspect')).call(_b)))} }).call(this);
      };

      def.$process_dregx = function(sexp, level) {
        var parts = nil, TMP_10, _a;
        parts = ((_a = sexp).$map || $mm('map')).call(_a, (TMP_10 = function(part) {

          var self = TMP_10._s || this, _a, _b, _c;
          if (part == null) part = nil;

          if ((_a = ((_b = ((_c = __scope.String) == null ? __opal.cm("String") : _c))['$==='] || $mm('===')).call(_b, part)) !== false && _a !== nil) {
            return ((_a = part).$inspect || $mm('inspect')).call(_a)
            } else {
            if (((_a = ((_b = part)['$[]'] || $mm('[]')).call(_b, 0))['$=='] || $mm('==')).call(_a, "str")) {
              return ((_a = self).$process || $mm('process')).call(_a, part, "expr")
              } else {
              return ((_a = self).$process || $mm('process')).call(_a, ((_b = part)['$[]'] || $mm('[]')).call(_b, 1), "expr")
            }
          }
        }, TMP_10._s = this, TMP_10));
        return "(new RegExp(" + (((_a = parts).$join || $mm('join')).call(_a, " + ")) + "))";
      };

      def.$process_dot2 = function(sexp, level) {
        var lhs = nil, rhs = nil, _a, _b;
        lhs = ((_a = this).$process || $mm('process')).call(_a, ((_b = sexp)['$[]'] || $mm('[]')).call(_b, 0), "expr");
        rhs = ((_a = this).$process || $mm('process')).call(_a, ((_b = sexp)['$[]'] || $mm('[]')).call(_b, 1), "expr");
        ((_a = this.helpers)['$[]='] || $mm('[]=')).call(_a, "range", true);
        return ((_a = "__range(%s, %s, false)")['$%'] || $mm('%')).call(_a, [lhs, rhs]);
      };

      def.$process_dot3 = function(sexp, level) {
        var lhs = nil, rhs = nil, _a, _b;
        lhs = ((_a = this).$process || $mm('process')).call(_a, ((_b = sexp)['$[]'] || $mm('[]')).call(_b, 0), "expr");
        rhs = ((_a = this).$process || $mm('process')).call(_a, ((_b = sexp)['$[]'] || $mm('[]')).call(_b, 1), "expr");
        ((_a = this.helpers)['$[]='] || $mm('[]=')).call(_a, "range", true);
        return ((_a = "__range(%s, %s, true)")['$%'] || $mm('%')).call(_a, [lhs, rhs]);
      };

      def.$process_str = function(sexp, level) {
        var str = nil, _a;
        str = ((_a = sexp).$shift || $mm('shift')).call(_a);
        if (((_a = str)['$=='] || $mm('==')).call(_a, this.file)) {
          this.uses_file = true;
          return ((_a = this.file).$inspect || $mm('inspect')).call(_a);
          } else {
          return ((_a = str).$inspect || $mm('inspect')).call(_a)
        };
      };

      def.$process_defined = function(sexp, level) {
        var part = nil, $case = nil, mid = nil, recv = nil, _a, _b, _c;
        part = ((_a = sexp)['$[]'] || $mm('[]')).call(_a, 0);
        return (function() { $case = ((_a = part)['$[]'] || $mm('[]')).call(_a, 0);if (((_a = "self")['$==='] || $mm('===')).call(_a, $case)) {
        return ((_a = "self").$inspect || $mm('inspect')).call(_a)
        }
        else if (((_a = "nil")['$==='] || $mm('===')).call(_a, $case)) {
        return ((_a = "nil").$inspect || $mm('inspect')).call(_a)
        }
        else if (((_a = "true")['$==='] || $mm('===')).call(_a, $case)) {
        return ((_a = "true").$inspect || $mm('inspect')).call(_a)
        }
        else if (((_a = "false")['$==='] || $mm('===')).call(_a, $case)) {
        return ((_a = "false").$inspect || $mm('inspect')).call(_a)
        }
        else if (((_a = "call")['$==='] || $mm('===')).call(_a, $case)) {
        mid = ((_a = this).$mid_to_jsid || $mm('mid_to_jsid')).call(_a, ((_b = ((_c = part)['$[]'] || $mm('[]')).call(_c, 2)).$to_s || $mm('to_s')).call(_b));
        recv = (function() { if ((_a = ((_b = part)['$[]'] || $mm('[]')).call(_b, 1)) !== false && _a !== nil) {
          return ((_a = this).$process || $mm('process')).call(_a, ((_b = part)['$[]'] || $mm('[]')).call(_b, 1), "expr")
          } else {
          return ((_a = this).$current_self || $mm('current_self')).call(_a)
        }; return nil; }).call(this);
        return "(" + (recv) + (mid) + " ? 'method' : nil)";
        }
        else if (((_a = "xstr")['$==='] || $mm('===')).call(_a, $case)) {
        return "(typeof(" + (((_a = this).$process || $mm('process')).call(_a, part, "expression")) + ") !== 'undefined')"
        }
        else if (((_a = "colon2")['$==='] || $mm('===')).call(_a, $case)) {
        return "false"
        }
        else {return ((_a = this).$raise || $mm('raise')).call(_a, "bad defined? part: " + (((_b = part)['$[]'] || $mm('[]')).call(_b, 0)))} }).call(this);
      };

      def.$process_not = function(sexp, level) {
        var TMP_11, _a;
        return ((_a = this).$with_temp || $mm('with_temp')).call(_a, (TMP_11 = function(tmp) {

          var self = TMP_11._s || this, _a, _b;
          if (tmp == null) tmp = nil;

          return "(" + (tmp) + " = " + (((_a = self).$process || $mm('process')).call(_a, ((_b = sexp).$shift || $mm('shift')).call(_b), "expr")) + ", (" + (tmp) + " === nil || " + (tmp) + " === false))"
        }, TMP_11._s = this, TMP_11));
      };

      def.$process_block_pass = function(exp, level) {
        var _a, _b, _c;
        return ((_a = this).$process || $mm('process')).call(_a, ((_b = this).$s || $mm('s')).call(_b, "call", ((_c = exp).$shift || $mm('shift')).call(_c), "to_proc", ((_c = this).$s || $mm('s')).call(_c, "arglist")), "expr");
      };

      def.$process_iter = function(sexp, level) {
        var call = nil, args = nil, body = nil, code = nil, params = nil, scope_name = nil, identity = nil, block_arg = nil, splat = nil, len = nil, itercode = nil, _a, _b, _c, _d, TMP_12;
        ((_a = sexp)._isArray ? _a : (_a = [_a])), call = (_a[0] == null ? nil : _a[0]), args = (_a[1] == null ? nil : _a[1]), body = (_a[2] == null ? nil : _a[2]);
        ((_a = body), _a !== false && _a !== nil ? _a : body = ((_b = this).$s || $mm('s')).call(_b, "nil"));
        body = ((_a = this).$returns || $mm('returns')).call(_a, body);
        code = "";
        params = nil;
        scope_name = nil;
        identity = nil;
        if ((_a = ((_b = ((_c = __scope.Fixnum) == null ? __opal.cm("Fixnum") : _c))['$==='] || $mm('===')).call(_b, args)) !== false && _a !== nil) {
          args = nil
        };
        ((_a = args), _a !== false && _a !== nil ? _a : args = ((_b = this).$s || $mm('s')).call(_b, "masgn", ((_c = this).$s || $mm('s')).call(_c, "array")));
        args = (function() { if (((_a = ((_b = args).$first || $mm('first')).call(_b))['$=='] || $mm('==')).call(_a, "lasgn")) {
          return ((_a = this).$s || $mm('s')).call(_a, "array", args)
          } else {
          return ((_a = args)['$[]'] || $mm('[]')).call(_a, 1)
        }; return nil; }).call(this);
        if ((_a = (_b = ((_b = ((_c = args).$last || $mm('last')).call(_c))['$is_a?'] || $mm('is_a?')).call(_b, ((_c = __scope.Array) == null ? __opal.cm("Array") : _c)), _b !== false && _b !== nil ? ((_b = ((_c = ((_d = args).$last || $mm('last')).call(_d))['$[]'] || $mm('[]')).call(_c, 0))['$=='] || $mm('==')).call(_b, "block_pass") : _b)) !== false && _a !== nil) {
          block_arg = ((_a = args).$pop || $mm('pop')).call(_a);
          block_arg = ((_a = ((_b = ((_c = block_arg)['$[]'] || $mm('[]')).call(_c, 1))['$[]'] || $mm('[]')).call(_b, 1)).$to_sym || $mm('to_sym')).call(_a);
        };
        if ((_a = (_b = ((_b = ((_c = args).$last || $mm('last')).call(_c))['$is_a?'] || $mm('is_a?')).call(_b, ((_c = __scope.Array) == null ? __opal.cm("Array") : _c)), _b !== false && _b !== nil ? ((_b = ((_c = ((_d = args).$last || $mm('last')).call(_d))['$[]'] || $mm('[]')).call(_c, 0))['$=='] || $mm('==')).call(_b, "splat") : _b)) !== false && _a !== nil) {
          splat = ((_a = ((_b = ((_c = args).$last || $mm('last')).call(_c))['$[]'] || $mm('[]')).call(_b, 1))['$[]'] || $mm('[]')).call(_a, 1);
          ((_a = args).$pop || $mm('pop')).call(_a);
          len = ((_a = args).$length || $mm('length')).call(_a);
        };
        ((_a = this).$indent || $mm('indent')).call(_a, (TMP_12 = function() {

          var self = TMP_12._s || this, TMP_13, _a;
          
          return ((_a = self).$in_scope || $mm('in_scope')).call(_a, "iter", (TMP_13 = function() {

            var blk = nil, self = TMP_13._s || this, _a, TMP_14, _b, _c, _d;
            if (self.scope == null) self.scope = nil;
            if (self.indent == null) self.indent = nil;

            
            identity = ((_a = self.scope)['$identify!'] || $mm('identify!')).call(_a);
            ((_a = self.scope).$add_temp || $mm('add_temp')).call(_a, "self = " + (identity) + "._s || this");
            ((_a = ((_b = args)['$[]'] || $mm('[]')).call(_b, __range(1, -1, false))).$each || $mm('each')).call(_a, (TMP_14 = function(arg) {

              var self = TMP_14._s || this, _a, _b, _c;
              if (arg == null) arg = nil;

              arg = ((_a = arg)['$[]'] || $mm('[]')).call(_a, 1);
              if ((_a = ((_b = ((_c = __scope.RESERVED) == null ? __opal.cm("RESERVED") : _c))['$include?'] || $mm('include?')).call(_b, ((_c = arg).$to_s || $mm('to_s')).call(_c))) !== false && _a !== nil) {
                arg = "" + (arg) + "$"
              };
              return code = ((_a = code)['$+'] || $mm('+')).call(_a, "if (" + (arg) + " == null) " + (arg) + " = nil;\n");
            }, TMP_14._s = self, TMP_14));
            params = ((_a = self).$js_block_args || $mm('js_block_args')).call(_a, ((_b = args)['$[]'] || $mm('[]')).call(_b, __range(1, -1, false)));
            if (splat !== false && splat !== nil) {
              ((_a = params)['$<<'] || $mm('<<')).call(_a, splat);
              code = ((_a = code)['$+'] || $mm('+')).call(_a, "" + (splat) + " = __slice.call(arguments, " + ((_b = len, _c = 1, typeof(_b) === 'number' ? _b - _c : _b['$-'](_c))) + ");");
            };
            if (block_arg !== false && block_arg !== nil) {
              ((_a = self.scope)['$block_name='] || $mm('block_name=')).call(_a, block_arg);
              ((_a = self.scope).$add_temp || $mm('add_temp')).call(_a, block_arg);
              ((_a = self.scope).$add_temp || $mm('add_temp')).call(_a, "__context");
              scope_name = ((_a = self.scope)['$identify!'] || $mm('identify!')).call(_a);
              blk = ((_a = "\n%s%s = %s._p || nil, __context = %s._s, %s.p = null;\n%s")['$%'] || $mm('%')).call(_a, [self.indent, block_arg, scope_name, block_arg, scope_name, self.indent]);
              code = (_a = blk, _b = code, typeof(_a) === 'number' ? _a + _b : _a['$+'](_b));
            };
            code = ((_a = code)['$+'] || $mm('+')).call(_a, (_b = "\n" + (self.indent), _c = ((_d = self).$process || $mm('process')).call(_d, body, "stmt"), typeof(_b) === 'number' ? _b + _c : _b['$+'](_c)));
            if ((_a = ((_b = self.scope).$defines_defn || $mm('defines_defn')).call(_b)) !== false && _a !== nil) {
              ((_a = self.scope).$add_temp || $mm('add_temp')).call(_a, "def = (" + (((_b = self).$current_self || $mm('current_self')).call(_b)) + "._isObject ? " + (((_b = self).$current_self || $mm('current_self')).call(_b)) + " : " + (((_b = self).$current_self || $mm('current_self')).call(_b)) + ".prototype)")
            };
            return code = "\n" + (self.indent) + (((_a = self.scope).$to_vars || $mm('to_vars')).call(_a)) + "\n" + (self.indent) + (code);
          }, TMP_13._s = self, TMP_13))
        }, TMP_12._s = this, TMP_12));
        itercode = "function(" + (((_a = params).$join || $mm('join')).call(_a, ", ")) + ") {\n" + (code) + "\n" + (this.indent) + "}";
        ((_a = ((_b = call)['$[]'] || $mm('[]')).call(_b, 3))['$<<'] || $mm('<<')).call(_a, ((_b = this).$s || $mm('s')).call(_b, "js_tmp", ((_c = "(%s = %s, %s._s = %s, %s)")['$%'] || $mm('%')).call(_c, [identity, itercode, identity, ((_d = this).$current_self || $mm('current_self')).call(_d), identity])));
        return ((_a = this).$process || $mm('process')).call(_a, call, level);
      };

      def.$js_block_args = function(sexp) {
        var TMP_15, _a;
        return ((_a = sexp).$map || $mm('map')).call(_a, (TMP_15 = function(arg) {

          var a = nil, self = TMP_15._s || this, _a, _b, _c;
          if (self.scope == null) self.scope = nil;

          if (arg == null) arg = nil;

          a = ((_a = ((_b = arg)['$[]'] || $mm('[]')).call(_b, 1)).$to_sym || $mm('to_sym')).call(_a);
          if ((_a = ((_b = ((_c = __scope.RESERVED) == null ? __opal.cm("RESERVED") : _c))['$include?'] || $mm('include?')).call(_b, ((_c = a).$to_s || $mm('to_s')).call(_c))) !== false && _a !== nil) {
            a = ((_a = ("" + (a) + "$")).$to_sym || $mm('to_sym')).call(_a)
          };
          ((_a = self.scope).$add_arg || $mm('add_arg')).call(_a, a);
          return a;
        }, TMP_15._s = this, TMP_15));
      };

      def.$process_attrasgn = function(exp, level) {
        var recv = nil, mid = nil, arglist = nil, _a, _b;
        recv = ((_a = exp)['$[]'] || $mm('[]')).call(_a, 0);
        mid = ((_a = exp)['$[]'] || $mm('[]')).call(_a, 1);
        arglist = ((_a = exp)['$[]'] || $mm('[]')).call(_a, 2);
        return ((_a = this).$process || $mm('process')).call(_a, ((_b = this).$s || $mm('s')).call(_b, "call", recv, mid, arglist), level);
      };

      def.$handle_attr_optimize = function(meth, attrs) {
        var out = nil, TMP_16, _a, _b, _c;
        out = [];
        ((_a = attrs).$each || $mm('each')).call(_a, (TMP_16 = function(attr) {

          var mid = nil, ivar = nil, pre = nil, self = TMP_16._s || this, _a, _b, _c, _d, _e, _f;
          if (self.scope == null) self.scope = nil;

          if (attr == null) attr = nil;

          mid = ((_a = attr)['$[]'] || $mm('[]')).call(_a, 1);
          ivar = ((_a = ("@" + (mid))).$to_sym || $mm('to_sym')).call(_a);
          pre = ((_a = self.scope).$proto || $mm('proto')).call(_a);
          if ((_a = ((_b = meth)['$=='] || $mm('==')).call(_b, "attr_writer")) === false || _a === nil) {
            ((_a = out)['$<<'] || $mm('<<')).call(_a, ((_b = self).$process || $mm('process')).call(_b, ((_c = self).$s || $mm('s')).call(_c, "defn", mid, ((_d = self).$s || $mm('s')).call(_d, "args"), ((_d = self).$s || $mm('s')).call(_d, "scope", ((_e = self).$s || $mm('s')).call(_e, "ivar", ivar))), "stmt"))
          };
          if (((_a = meth)['$=='] || $mm('==')).call(_a, "attr_reader")) {
            return nil
            } else {
            mid = ((_a = ("" + (mid) + "=")).$to_sym || $mm('to_sym')).call(_a);
            return ((_a = out)['$<<'] || $mm('<<')).call(_a, ((_b = self).$process || $mm('process')).call(_b, ((_c = self).$s || $mm('s')).call(_c, "defn", mid, ((_d = self).$s || $mm('s')).call(_d, "args", "val"), ((_d = self).$s || $mm('s')).call(_d, "scope", ((_e = self).$s || $mm('s')).call(_e, "iasgn", ivar, ((_f = self).$s || $mm('s')).call(_f, "lvar", "val")))), "stmt"));
          };
        }, TMP_16._s = this, TMP_16));
        return (_a = ((_c = out).$join || $mm('join')).call(_c, ", \n" + (this.indent)), _b = ", nil", typeof(_a) === 'number' ? _a + _b : _a['$+'](_b));
      };

      def.$handle_alias_native = function(sexp) {
        var args = nil, meth = nil, func = nil, _a, _b, _c, _d;
        args = ((_a = sexp)['$[]'] || $mm('[]')).call(_a, 2);
        meth = ((_a = this).$mid_to_jsid || $mm('mid_to_jsid')).call(_a, ((_b = ((_c = ((_d = args)['$[]'] || $mm('[]')).call(_d, 1))['$[]'] || $mm('[]')).call(_c, 1)).$to_s || $mm('to_s')).call(_b));
        func = ((_a = ((_b = args)['$[]'] || $mm('[]')).call(_b, 2))['$[]'] || $mm('[]')).call(_a, 1);
        ((_a = ((_b = this.scope).$methods || $mm('methods')).call(_b))['$<<'] || $mm('<<')).call(_a, meth);
        return ((_a = "%s%s = %s.%s")['$%'] || $mm('%')).call(_a, [((_b = this.scope).$proto || $mm('proto')).call(_b), meth, ((_b = this.scope).$proto || $mm('proto')).call(_b), func]);
      };

      def.$handle_respond_to = function(sexp, level) {
        var recv = nil, mid = nil, arglist = nil, meth = nil, _a, _b;
        ((_a = sexp)._isArray ? _a : (_a = [_a])), recv = (_a[0] == null ? nil : _a[0]), mid = (_a[1] == null ? nil : _a[1]), arglist = (_a[2] == null ? nil : _a[2]);
        ((_a = recv), _a !== false && _a !== nil ? _a : recv = ((_b = this).$s || $mm('s')).call(_b, "self"));
        if ((_a = ((_b = arglist)['$[]'] || $mm('[]')).call(_b, 1)) !== false && _a !== nil) {
          meth = ((_a = this).$process || $mm('process')).call(_a, ((_b = arglist)['$[]'] || $mm('[]')).call(_b, 1), level)
        };
        return "(!!" + (((_a = this).$process || $mm('process')).call(_a, recv, level)) + "['$' + " + (meth) + "])";
      };

      def.$process_call = function(sexp, level) {
        var recv = nil, meth = nil, arglist = nil, iter = nil, mid = nil, $case = nil, path = nil, splat = nil, block = nil, tmprecv = nil, args = nil, recv_code = nil, call_recv = nil, dispatch = nil, result = nil, _a, _b, _c, _d, TMP_17;
        ((_a = sexp)._isArray ? _a : (_a = [_a])), recv = (_a[0] == null ? nil : _a[0]), meth = (_a[1] == null ? nil : _a[1]), arglist = (_a[2] == null ? nil : _a[2]), iter = (_a[3] == null ? nil : _a[3]);
        mid = ((_a = this).$mid_to_jsid || $mm('mid_to_jsid')).call(_a, ((_b = meth).$to_s || $mm('to_s')).call(_b));
        $case = meth;if (((_a = "attr_reader")['$==='] || $mm('===')).call(_a, $case) || ((_a = "attr_writer")['$==='] || $mm('===')).call(_a, $case) || ((_a = "attr_accessor")['$==='] || $mm('===')).call(_a, $case)) {
        if ((_a = ((_b = this.scope)['$class_scope?'] || $mm('class_scope?')).call(_b)) !== false && _a !== nil) {
          return ((_a = this).$handle_attr_optimize || $mm('handle_attr_optimize')).call(_a, meth, ((_b = arglist)['$[]'] || $mm('[]')).call(_b, __range(1, -1, false)))
        }
        }
        else if (((_a = "block_given?")['$==='] || $mm('===')).call(_a, $case)) {
        return ((_a = this).$js_block_given || $mm('js_block_given')).call(_a, sexp, level)
        }
        else if (((_a = "alias_native")['$==='] || $mm('===')).call(_a, $case)) {
        if ((_a = ((_b = this.scope)['$class_scope?'] || $mm('class_scope?')).call(_b)) !== false && _a !== nil) {
          return ((_a = this).$handle_alias_native || $mm('handle_alias_native')).call(_a, sexp)
        }
        }
        else if (((_a = "require")['$==='] || $mm('===')).call(_a, $case)) {
        path = ((_a = arglist)['$[]'] || $mm('[]')).call(_a, 1);
        if ((_a = ((_b = path !== false && path !== nil) ? ((_c = ((_d = path)['$[]'] || $mm('[]')).call(_d, 0))['$=='] || $mm('==')).call(_c, "str") : _b)) !== false && _a !== nil) {
          ((_a = this.requires)['$<<'] || $mm('<<')).call(_a, ((_b = path)['$[]'] || $mm('[]')).call(_b, 1))
        };
        return "";
        }
        else if (((_a = "respond_to?")['$==='] || $mm('===')).call(_a, $case)) {
        return ((_a = this).$handle_respond_to || $mm('handle_respond_to')).call(_a, sexp, level)
        };
        splat = ((_a = ((_b = arglist)['$[]'] || $mm('[]')).call(_b, __range(1, -1, false)))['$any?'] || $mm('any?')).call(_a, (TMP_17 = function(a) {

          var self = TMP_17._s || this, _a, _b;
          if (a == null) a = nil;

          return ((_a = ((_b = a).$first || $mm('first')).call(_b))['$=='] || $mm('==')).call(_a, "splat")
        }, TMP_17._s = this, TMP_17));
        if ((_a = (_b = ((_b = ((_c = __scope.Array) == null ? __opal.cm("Array") : _c))['$==='] || $mm('===')).call(_b, ((_c = arglist).$last || $mm('last')).call(_c)), _b !== false && _b !== nil ? ((_b = ((_c = ((_d = arglist).$last || $mm('last')).call(_d)).$first || $mm('first')).call(_c))['$=='] || $mm('==')).call(_b, "block_pass") : _b)) !== false && _a !== nil) {
          ((_a = arglist)['$<<'] || $mm('<<')).call(_a, ((_b = this).$s || $mm('s')).call(_b, "js_tmp", ((_c = this).$process || $mm('process')).call(_c, ((_d = arglist).$pop || $mm('pop')).call(_d), "expr")))
          } else {
          if (iter !== false && iter !== nil) {
            block = iter
          }
        };
        ((_a = recv), _a !== false && _a !== nil ? _a : recv = ((_b = this).$s || $mm('s')).call(_b, "self"));
        if (block !== false && block !== nil) {
          tmprecv = ((_a = this.scope).$new_temp || $mm('new_temp')).call(_a)
          } else {
          if ((_a = (_b = ((_b = splat !== false && splat !== nil) ? (_c = ((_d = recv)['$=='] || $mm('==')).call(_d, ["self"]), (_c === nil || _c === false)) : _b), _b !== false && _b !== nil ? (_b = ((_c = ((_d = recv)['$[]'] || $mm('[]')).call(_d, 0))['$=='] || $mm('==')).call(_c, "lvar"), (_b === nil || _b === false)) : _b)) !== false && _a !== nil) {
            tmprecv = ((_a = this.scope).$new_temp || $mm('new_temp')).call(_a)
            } else {
            tmprecv = ((_a = this.scope).$new_temp || $mm('new_temp')).call(_a)
          }
        };
        args = "";
        recv_code = ((_a = this).$process || $mm('process')).call(_a, recv, "recv");
        if ((_a = this.method_missing) !== false && _a !== nil) {
          call_recv = ((_a = this).$s || $mm('s')).call(_a, "js_tmp", ((_b = tmprecv), _b !== false && _b !== nil ? _b : recv_code));
          if ((_a = splat) === false || _a === nil) {
            ((_a = arglist).$insert || $mm('insert')).call(_a, 1, call_recv)
          };
          args = ((_a = this).$process || $mm('process')).call(_a, arglist, "expr");
          dispatch = (function() { if (tmprecv !== false && tmprecv !== nil) {
            return "((" + (tmprecv) + " = " + (recv_code) + ")" + (mid) + " || $mm('" + (((_a = meth).$to_s || $mm('to_s')).call(_a)) + "'))"
            } else {
            return "(" + (recv_code) + (mid) + " || $mm('" + (((_a = meth).$to_s || $mm('to_s')).call(_a)) + "'))"
          }; return nil; }).call(this);
          result = (function() { if (splat !== false && splat !== nil) {
            return "" + (dispatch) + ".apply(" + (((_a = this).$process || $mm('process')).call(_a, call_recv, "expr")) + ", " + (args) + ")"
            } else {
            return "" + (dispatch) + ".call(" + (args) + ")"
          }; return nil; }).call(this);
          } else {
          args = ((_a = this).$process || $mm('process')).call(_a, arglist, "expr");
          dispatch = (function() { if (tmprecv !== false && tmprecv !== nil) {
            return "(" + (tmprecv) + " = " + (recv_code) + ")" + (mid)
            } else {
            return "" + (recv_code) + (mid)
          }; return nil; }).call(this);
          result = (function() { if (splat !== false && splat !== nil) {
            return "" + (dispatch) + ".apply(" + (((_a = tmprecv), _a !== false && _a !== nil ? _a : recv_code)) + ", " + (args) + ")"
            } else {
            return "" + (dispatch) + "(" + (args) + ")"
          }; return nil; }).call(this);
        };
        if (tmprecv !== false && tmprecv !== nil) {
          ((_a = this.scope).$queue_temp || $mm('queue_temp')).call(_a, tmprecv)
        };
        return result;
      };

      def.$process_arglist = function(sexp, level) {
        var code = nil, work = nil, splat = nil, arg = nil, join = nil, _a, _b, _c, _d;
        code = "";
        work = [];
        while (!((_b = ((_c = sexp)['$empty?'] || $mm('empty?')).call(_c)) !== false && _b !== nil)) {splat = ((_b = ((_c = ((_d = sexp).$first || $mm('first')).call(_d)).$first || $mm('first')).call(_c))['$=='] || $mm('==')).call(_b, "splat");
        arg = ((_b = this).$process || $mm('process')).call(_b, ((_c = sexp).$shift || $mm('shift')).call(_c), "expr");
        if (splat !== false && splat !== nil) {
          if ((_b = ((_c = work)['$empty?'] || $mm('empty?')).call(_c)) !== false && _b !== nil) {
            if ((_b = ((_c = code)['$empty?'] || $mm('empty?')).call(_c)) !== false && _b !== nil) {
              code = ((_b = code)['$+'] || $mm('+')).call(_b, "[].concat(" + (arg) + ")")
              } else {
              code = ((_b = code)['$+'] || $mm('+')).call(_b, ".concat(" + (arg) + ")")
            }
            } else {
            join = "[" + (((_b = work).$join || $mm('join')).call(_b, ", ")) + "]";
            code = ((_b = code)['$+'] || $mm('+')).call(_b, (function() { if ((_c = ((_d = code)['$empty?'] || $mm('empty?')).call(_d)) !== false && _c !== nil) {
              return join
              } else {
              return ".concat(" + (join) + ")"
            }; return nil; }).call(this));
            code = ((_b = code)['$+'] || $mm('+')).call(_b, ".concat(" + (arg) + ")");
          };
          work = [];
          } else {
          ((_b = work).$push || $mm('push')).call(_b, arg)
        };};
        if ((_a = ((_b = work)['$empty?'] || $mm('empty?')).call(_b)) === false || _a === nil) {
          join = ((_a = work).$join || $mm('join')).call(_a, ", ");
          code = ((_a = code)['$+'] || $mm('+')).call(_a, (function() { if ((_b = ((_c = code)['$empty?'] || $mm('empty?')).call(_c)) !== false && _b !== nil) {
            return join
            } else {
            return ".concat([" + (join) + "])"
          }; return nil; }).call(this));
        };
        return code;
      };

      def.$process_splat = function(sexp, level) {
        var _a, _b, _c;
        if (((_a = ((_b = sexp).$first || $mm('first')).call(_b))['$=='] || $mm('==')).call(_a, ["nil"])) {
          return "[]"
        };
        if (((_a = ((_b = ((_c = sexp).$first || $mm('first')).call(_c)).$first || $mm('first')).call(_b))['$=='] || $mm('==')).call(_a, "lit")) {
          return "[" + (((_a = this).$process || $mm('process')).call(_a, ((_b = sexp).$first || $mm('first')).call(_b), "expr")) + "]"
        };
        return ((_a = this).$process || $mm('process')).call(_a, ((_b = sexp).$first || $mm('first')).call(_b), "recv");
      };

      def.$process_class = function(sexp, level) {
        var cid = nil, sup = nil, body = nil, code = nil, base = nil, name = nil, spacer = nil, cls = nil, boot = nil, _a, _b, _c, _d, TMP_18;
        ((_a = sexp)._isArray ? _a : (_a = [_a])), cid = (_a[0] == null ? nil : _a[0]), sup = (_a[1] == null ? nil : _a[1]), body = (_a[2] == null ? nil : _a[2]);
        if ((_a = ((_b = body)['$[]'] || $mm('[]')).call(_b, 1)) === false || _a === nil) {
          ((_a = body)['$[]='] || $mm('[]=')).call(_a, 1, ((_b = this).$s || $mm('s')).call(_b, "nil"))
        };
        code = nil;
        ((_a = this.helpers)['$[]='] || $mm('[]=')).call(_a, "klass", true);
        if ((_a = ((_b = ((_c = ((_d = __scope.Symbol) == null ? __opal.cm("Symbol") : _d))['$==='] || $mm('===')).call(_c, cid)), _b !== false && _b !== nil ? _b : ((_c = ((_d = __scope.String) == null ? __opal.cm("String") : _d))['$==='] || $mm('===')).call(_c, cid))) !== false && _a !== nil) {
          base = ((_a = this).$current_self || $mm('current_self')).call(_a);
          name = ((_a = cid).$to_s || $mm('to_s')).call(_a);
          } else {
          if (((_a = ((_b = cid)['$[]'] || $mm('[]')).call(_b, 0))['$=='] || $mm('==')).call(_a, "colon2")) {
            base = ((_a = this).$process || $mm('process')).call(_a, ((_b = cid)['$[]'] || $mm('[]')).call(_b, 1), "expr");
            name = ((_a = ((_b = cid)['$[]'] || $mm('[]')).call(_b, 2)).$to_s || $mm('to_s')).call(_a);
            } else {
            if (((_a = ((_b = cid)['$[]'] || $mm('[]')).call(_b, 0))['$=='] || $mm('==')).call(_a, "colon3")) {
              base = "Opal.Object";
              name = ((_a = ((_b = cid)['$[]'] || $mm('[]')).call(_b, 1)).$to_s || $mm('to_s')).call(_a);
              } else {
              ((_a = this).$raise || $mm('raise')).call(_a, "Bad receiver in class")
            }
          }
        };
        sup = (function() { if (sup !== false && sup !== nil) {
          return ((_a = this).$process || $mm('process')).call(_a, sup, "expr")
          } else {
          return "null"
        }; return nil; }).call(this);
        ((_a = this).$indent || $mm('indent')).call(_a, (TMP_18 = function() {

          var self = TMP_18._s || this, TMP_19, _a;
          
          return ((_a = self).$in_scope || $mm('in_scope')).call(_a, "class", (TMP_19 = function() {

            var needs_block = nil, last_body_statement = nil, self = TMP_19._s || this, _a, _b, _c, _d, _e, _f, _g, _h;
            if (self.scope == null) self.scope = nil;
            if (self.indent == null) self.indent = nil;

            
            ((_a = self.scope)['$name='] || $mm('name=')).call(_a, name);
            ((_a = self.scope).$add_temp || $mm('add_temp')).call(_a, "" + (((_b = self.scope).$proto || $mm('proto')).call(_b)) + " = " + (name) + ".prototype", "__scope = " + (name) + "._scope");
            if ((_a = ((_b = ((_c = __scope.Array) == null ? __opal.cm("Array") : _c))['$==='] || $mm('===')).call(_b, ((_c = body).$last || $mm('last')).call(_c))) !== false && _a !== nil) {
              needs_block = (_a = ((_b = ((_c = ((_d = body).$last || $mm('last')).call(_d)).$first || $mm('first')).call(_c))['$=='] || $mm('==')).call(_b, "block"), (_a === nil || _a === false));
              ((_a = ((_b = ((_c = body).$last || $mm('last')).call(_c)).$first || $mm('first')).call(_b))['$=='] || $mm('==')).call(_a, "block");
              last_body_statement = (function() { if (needs_block !== false && needs_block !== nil) {
                return ((_a = body).$last || $mm('last')).call(_a)
                } else {
                return ((_a = ((_b = body).$last || $mm('last')).call(_b)).$last || $mm('last')).call(_a)
              }; return nil; }).call(self);
              if ((_a = ((_b = last_body_statement !== false && last_body_statement !== nil) ? ((_c = ((_d = __scope.Array) == null ? __opal.cm("Array") : _d))['$==='] || $mm('===')).call(_c, last_body_statement) : _b)) !== false && _a !== nil) {
                if ((_a = ((_b = ["defn", "defs"])['$include?'] || $mm('include?')).call(_b, ((_c = last_body_statement).$first || $mm('first')).call(_c))) !== false && _a !== nil) {
                  if (needs_block !== false && needs_block !== nil) {
                    ((_a = body)['$[]='] || $mm('[]=')).call(_a, -1, ((_b = self).$s || $mm('s')).call(_b, "block", ((_c = body)['$[]'] || $mm('[]')).call(_c, -1)))
                  };
                  ((_a = ((_b = body).$last || $mm('last')).call(_b))['$<<'] || $mm('<<')).call(_a, ((_b = self).$s || $mm('s')).call(_b, "nil"));
                }
              };
            };
            body = ((_a = self).$returns || $mm('returns')).call(_a, body);
            body = ((_a = self).$process || $mm('process')).call(_a, body, "stmt");
            code = "\n" + (((_a = self.scope).$to_donate_methods || $mm('to_donate_methods')).call(_a));
            return code = ((_a = code)['$+'] || $mm('+')).call(_a, (_b = (_d = (_f = self.indent, _g = ((_h = self.scope).$to_vars || $mm('to_vars')).call(_h), typeof(_f) === 'number' ? _f + _g : _f['$+'](_g)), _e = "\n\n" + (self.indent), typeof(_d) === 'number' ? _d + _e : _d['$+'](_e)), _c = body, typeof(_b) === 'number' ? _b + _c : _b['$+'](_c)));
          }, TMP_19._s = self, TMP_19))
        }, TMP_18._s = this, TMP_18));
        spacer = "\n" + (this.indent) + (((_a = __scope.INDENT) == null ? __opal.cm("INDENT") : _a));
        cls = "function " + (name) + "() {};";
        boot = "" + (name) + " = __klass(__base, __super, " + (((_a = name).$inspect || $mm('inspect')).call(_a)) + ", " + (name) + ");";
        return "(function(__base, __super){" + (spacer) + (cls) + (spacer) + (boot) + "\n" + (code) + "\n" + (this.indent) + "})(" + (base) + ", " + (sup) + ")";
      };

      def.$process_sclass = function(sexp, level) {
        var recv = nil, body = nil, code = nil, call = nil, _a, TMP_20, _b;
        recv = ((_a = sexp)['$[]'] || $mm('[]')).call(_a, 0);
        body = ((_a = sexp)['$[]'] || $mm('[]')).call(_a, 1);
        code = nil;
        ((_a = this).$in_scope || $mm('in_scope')).call(_a, "sclass", (TMP_20 = function() {

          var self = TMP_20._s || this, _a, _b, _c;
          if (self.scope == null) self.scope = nil;

          
          ((_a = self.scope).$add_temp || $mm('add_temp')).call(_a, "__scope = " + (((_b = self).$current_self || $mm('current_self')).call(_b)) + "._scope");
          ((_a = self.scope).$add_temp || $mm('add_temp')).call(_a, "def = " + (((_b = self).$current_self || $mm('current_self')).call(_b)) + ".prototype");
          return code = (_a = ((_c = self.scope).$to_vars || $mm('to_vars')).call(_c), _b = ((_c = self).$process || $mm('process')).call(_c, body, "stmt"), typeof(_a) === 'number' ? _a + _b : _a['$+'](_b));
        }, TMP_20._s = this, TMP_20));
        call = ((_a = this).$s || $mm('s')).call(_a, "call", recv, "singleton_class", ((_b = this).$s || $mm('s')).call(_b, "arglist"));
        return "(function(){" + (code) + "}).call(" + (((_a = this).$process || $mm('process')).call(_a, call, "expr")) + ")";
      };

      def.$process_module = function(sexp, level) {
        var cid = nil, body = nil, code = nil, base = nil, name = nil, spacer = nil, cls = nil, boot = nil, _a, _b, _c, _d, TMP_21;
        cid = ((_a = sexp)['$[]'] || $mm('[]')).call(_a, 0);
        body = ((_a = sexp)['$[]'] || $mm('[]')).call(_a, 1);
        code = nil;
        ((_a = this.helpers)['$[]='] || $mm('[]=')).call(_a, "module", true);
        if ((_a = ((_b = ((_c = ((_d = __scope.Symbol) == null ? __opal.cm("Symbol") : _d))['$==='] || $mm('===')).call(_c, cid)), _b !== false && _b !== nil ? _b : ((_c = ((_d = __scope.String) == null ? __opal.cm("String") : _d))['$==='] || $mm('===')).call(_c, cid))) !== false && _a !== nil) {
          base = ((_a = this).$current_self || $mm('current_self')).call(_a);
          name = ((_a = cid).$to_s || $mm('to_s')).call(_a);
          } else {
          if (((_a = ((_b = cid)['$[]'] || $mm('[]')).call(_b, 0))['$=='] || $mm('==')).call(_a, "colon2")) {
            base = ((_a = this).$process || $mm('process')).call(_a, ((_b = cid)['$[]'] || $mm('[]')).call(_b, 1), "expr");
            name = ((_a = ((_b = cid)['$[]'] || $mm('[]')).call(_b, 2)).$to_s || $mm('to_s')).call(_a);
            } else {
            if (((_a = ((_b = cid)['$[]'] || $mm('[]')).call(_b, 0))['$=='] || $mm('==')).call(_a, "colon3")) {
              base = "Opal.Object";
              name = ((_a = ((_b = cid)['$[]'] || $mm('[]')).call(_b, 1)).$to_s || $mm('to_s')).call(_a);
              } else {
              ((_a = this).$raise || $mm('raise')).call(_a, "Bad receiver in class")
            }
          }
        };
        ((_a = this).$indent || $mm('indent')).call(_a, (TMP_21 = function() {

          var self = TMP_21._s || this, TMP_22, _a;
          
          return ((_a = self).$in_scope || $mm('in_scope')).call(_a, "module", (TMP_22 = function() {

            var self = TMP_22._s || this, _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k;
            if (self.scope == null) self.scope = nil;
            if (self.indent == null) self.indent = nil;

            
            ((_a = self.scope)['$name='] || $mm('name=')).call(_a, name);
            ((_a = self.scope).$add_temp || $mm('add_temp')).call(_a, "" + (((_b = self.scope).$proto || $mm('proto')).call(_b)) + " = " + (name) + ".prototype", "__scope = " + (name) + "._scope");
            body = ((_a = self).$process || $mm('process')).call(_a, body, "stmt");
            return code = (_a = (_c = (_e = (_g = (_i = self.indent, _j = ((_k = self.scope).$to_vars || $mm('to_vars')).call(_k), typeof(_i) === 'number' ? _i + _j : _i['$+'](_j)), _h = "\n\n" + (self.indent), typeof(_g) === 'number' ? _g + _h : _g['$+'](_h)), _f = body, typeof(_e) === 'number' ? _e + _f : _e['$+'](_f)), _d = "\n" + (self.indent), typeof(_c) === 'number' ? _c + _d : _c['$+'](_d)), _b = ((_c = self.scope).$to_donate_methods || $mm('to_donate_methods')).call(_c), typeof(_a) === 'number' ? _a + _b : _a['$+'](_b));
          }, TMP_22._s = self, TMP_22))
        }, TMP_21._s = this, TMP_21));
        spacer = "\n" + (this.indent) + (((_a = __scope.INDENT) == null ? __opal.cm("INDENT") : _a));
        cls = "function " + (name) + "() {};";
        boot = "" + (name) + " = __module(__base, " + (((_a = name).$inspect || $mm('inspect')).call(_a)) + ", " + (name) + ");";
        return "(function(__base){" + (spacer) + (cls) + (spacer) + (boot) + "\n" + (code) + "\n" + (this.indent) + "})(" + (base) + ")";
      };

      def.$process_undef = function(exp, level) {
        var jsid = nil, _a, _b, _c, _d;
        ((_a = this.helpers)['$[]='] || $mm('[]=')).call(_a, "undef", true);
        jsid = ((_a = this).$mid_to_jsid || $mm('mid_to_jsid')).call(_a, ((_b = ((_c = ((_d = exp)['$[]'] || $mm('[]')).call(_d, 0))['$[]'] || $mm('[]')).call(_c, 1)).$to_s || $mm('to_s')).call(_b));
        return "delete " + (((_a = this.scope).$proto || $mm('proto')).call(_a)) + (jsid);
      };

      def.$process_defn = function(sexp, level) {
        var mid = nil, args = nil, stmts = nil, _a, _b;
        mid = ((_a = sexp)['$[]'] || $mm('[]')).call(_a, 0);
        args = ((_a = sexp)['$[]'] || $mm('[]')).call(_a, 1);
        stmts = ((_a = sexp)['$[]'] || $mm('[]')).call(_a, 2);
        return ((_a = this).$js_def || $mm('js_def')).call(_a, nil, mid, args, stmts, ((_b = sexp).$line || $mm('line')).call(_b), ((_b = sexp).$end_line || $mm('end_line')).call(_b));
      };

      def.$process_defs = function(sexp, level) {
        var recv = nil, mid = nil, args = nil, stmts = nil, _a, _b;
        recv = ((_a = sexp)['$[]'] || $mm('[]')).call(_a, 0);
        mid = ((_a = sexp)['$[]'] || $mm('[]')).call(_a, 1);
        args = ((_a = sexp)['$[]'] || $mm('[]')).call(_a, 2);
        stmts = ((_a = sexp)['$[]'] || $mm('[]')).call(_a, 3);
        return ((_a = this).$js_def || $mm('js_def')).call(_a, recv, mid, args, stmts, ((_b = sexp).$line || $mm('line')).call(_b), ((_b = sexp).$end_line || $mm('end_line')).call(_b));
      };

      def.$js_def = function(recvr, mid, args, stmts, line, end_line) {
        var jsid = nil, smethod = nil, recv = nil, code = nil, params = nil, scope_name = nil, uses_super = nil, uses_splat = nil, opt = nil, argc = nil, block_name = nil, splat = nil, arity_code = nil, defcode = nil, _a, _b, _c, _d, TMP_23;
        jsid = ((_a = this).$mid_to_jsid || $mm('mid_to_jsid')).call(_a, ((_b = mid).$to_s || $mm('to_s')).call(_b));
        if (recvr !== false && recvr !== nil) {
          ((_a = this.scope)['$defines_defs='] || $mm('defines_defs=')).call(_a, true);
          if ((_a = (_b = ((_b = this.scope)['$class_scope?'] || $mm('class_scope?')).call(_b), _b !== false && _b !== nil ? ((_b = ((_c = recvr).$first || $mm('first')).call(_c))['$=='] || $mm('==')).call(_b, "self") : _b)) !== false && _a !== nil) {
            smethod = true
          };
          recv = ((_a = this).$process || $mm('process')).call(_a, recvr, "expr");
          } else {
          ((_a = this.scope)['$defines_defn='] || $mm('defines_defn=')).call(_a, true);
          recv = ((_a = this).$current_self || $mm('current_self')).call(_a);
        };
        code = "";
        params = nil;
        scope_name = nil;
        uses_super = nil;
        uses_splat = nil;
        if ((_a = ((_b = ((_c = __scope.Array) == null ? __opal.cm("Array") : _c))['$==='] || $mm('===')).call(_b, ((_c = args).$last || $mm('last')).call(_c))) !== false && _a !== nil) {
          opt = ((_a = args).$pop || $mm('pop')).call(_a)
        };
        argc = (_a = ((_c = args).$length || $mm('length')).call(_c), _b = 1, typeof(_a) === 'number' ? _a - _b : _a['$-'](_b));
        if ((_a = ((_b = ((_c = ((_d = args).$last || $mm('last')).call(_d)).$to_s || $mm('to_s')).call(_c))['$start_with?'] || $mm('start_with?')).call(_b, "&")) !== false && _a !== nil) {
          block_name = ((_a = ((_b = ((_c = ((_d = args).$pop || $mm('pop')).call(_d)).$to_s || $mm('to_s')).call(_c))['$[]'] || $mm('[]')).call(_b, __range(1, -1, false))).$to_sym || $mm('to_sym')).call(_a);
          argc = ((_a = argc)['$-'] || $mm('-')).call(_a, 1);
        };
        if ((_a = ((_b = ((_c = ((_d = args).$last || $mm('last')).call(_d)).$to_s || $mm('to_s')).call(_c))['$start_with?'] || $mm('start_with?')).call(_b, "*")) !== false && _a !== nil) {
          uses_splat = true;
          if (((_a = ((_b = args).$last || $mm('last')).call(_b))['$=='] || $mm('==')).call(_a, "*")) {
            argc = ((_a = argc)['$-'] || $mm('-')).call(_a, 1)
            } else {
            splat = ((_a = ((_b = ((_c = ((_d = args)['$[]'] || $mm('[]')).call(_d, -1)).$to_s || $mm('to_s')).call(_c))['$[]'] || $mm('[]')).call(_b, __range(1, -1, false))).$to_sym || $mm('to_sym')).call(_a);
            ((_a = args)['$[]='] || $mm('[]=')).call(_a, -1, splat);
            argc = ((_a = argc)['$-'] || $mm('-')).call(_a, 1);
          };
        };
        if (block_name !== false && block_name !== nil) {
          ((_a = args)['$<<'] || $mm('<<')).call(_a, block_name)
        };
        if ((_a = this.arity_check) !== false && _a !== nil) {
          arity_code = (_a = ((_c = this).$arity_check || $mm('arity_check')).call(_c, args, opt, uses_splat, block_name, mid), _b = "\n" + (((_c = __scope.INDENT) == null ? __opal.cm("INDENT") : _c)), typeof(_a) === 'number' ? _a + _b : _a['$+'](_b))
        };
        ((_a = this).$indent || $mm('indent')).call(_a, (TMP_23 = function() {

          var self = TMP_23._s || this, TMP_24, _a;
          
          return ((_a = self).$in_scope || $mm('in_scope')).call(_a, "def", (TMP_24 = function() {

            var yielder = nil, stmt_code = nil, lastopt = nil, self = TMP_24._s || this, _a, _b, _c, TMP_25, TMP_26;
            if (self.scope == null) self.scope = nil;
            if (self.indent == null) self.indent = nil;

            
            ((_a = self.scope)['$mid='] || $mm('mid=')).call(_a, mid);
            if (recvr !== false && recvr !== nil) {
              ((_a = self.scope)['$defs='] || $mm('defs=')).call(_a, true)
            };
            if (block_name !== false && block_name !== nil) {
              ((_a = self.scope)['$uses_block!'] || $mm('uses_block!')).call(_a)
            };
            yielder = ((_a = block_name), _a !== false && _a !== nil ? _a : "__yield");
            ((_a = self.scope)['$block_name='] || $mm('block_name=')).call(_a, yielder);
            params = ((_a = self).$process || $mm('process')).call(_a, args, "expr");
            stmt_code = (_a = "\n" + (self.indent), _b = ((_c = self).$process || $mm('process')).call(_c, stmts, "stmt"), typeof(_a) === 'number' ? _a + _b : _a['$+'](_b));
            if ((_a = ((_b = self.scope)['$uses_block?'] || $mm('uses_block?')).call(_b)) !== false && _a !== nil) {
              if ((_a = ((_b = ((_c = argc)['$=='] || $mm('==')).call(_c, 0)) ? (_c = splat, (_c === nil || _c === false)) : _b)) !== false && _a !== nil) {
                code = ((_a = code)['$+'] || $mm('+')).call(_a, "if (typeof(" + (yielder) + ") !== 'function') { " + (yielder) + " = nil }")
                } else {
                if (splat !== false && splat !== nil) {
                  ((_a = self.scope).$add_temp || $mm('add_temp')).call(_a, yielder);
                  code = ((_a = code)['$+'] || $mm('+')).call(_a, "" + (splat) + " = __slice.call(arguments, " + (argc) + ");\n" + (self.indent));
                  code = ((_a = code)['$+'] || $mm('+')).call(_a, "if (typeof(" + (splat) + "[" + (splat) + ".length - 1]) === 'function') { " + (yielder) + " = " + (splat) + ".pop(); } else { " + (yielder) + " = nil; }\n" + (self.indent));
                  } else {
                  if (opt !== false && opt !== nil) {
                    code = ((_a = code)['$+'] || $mm('+')).call(_a, "var BLOCK_IDX = arguments.length - 1;\n" + (self.indent));
                    code = ((_a = code)['$+'] || $mm('+')).call(_a, "if (typeof(arguments[BLOCK_IDX]) === 'function' && arguments[BLOCK_IDX]._s !== undefined) { " + (yielder) + " = arguments[BLOCK_IDX] } else { " + (yielder) + " = nil }");
                    lastopt = ((_a = ((_b = opt)['$[]'] || $mm('[]')).call(_b, -1))['$[]'] || $mm('[]')).call(_a, 1);
                    ((_a = ((_b = opt)['$[]'] || $mm('[]')).call(_b, __range(1, -1, false))).$each || $mm('each')).call(_a, (TMP_25 = function(o) {

                      var id = nil, self = TMP_25._s || this, _a, _b, _c, _d, _e;
                      if (self.indent == null) self.indent = nil;

                      if (o == null) o = nil;

                      id = ((_a = self).$process || $mm('process')).call(_a, ((_b = self).$s || $mm('s')).call(_b, "lvar", ((_c = o)['$[]'] || $mm('[]')).call(_c, 1)), "expr");
                      if (((_a = ((_b = ((_c = o)['$[]'] || $mm('[]')).call(_c, 2))['$[]'] || $mm('[]')).call(_b, 2))['$=='] || $mm('==')).call(_a, "undefined")) {
                        return code = ((_a = code)['$+'] || $mm('+')).call(_a, ((_b = "if (%s === %s && typeof(%s) === 'function') { %s = undefined; }")['$%'] || $mm('%')).call(_b, [id, yielder, id, id]))
                        } else {
                        return code = ((_a = code)['$+'] || $mm('+')).call(_a, ((_b = "if (%s == null || %s === %s) {\n%s%s\n%s}")['$%'] || $mm('%')).call(_b, [id, id, yielder, (_c = self.indent, _d = ((_e = __scope.INDENT) == null ? __opal.cm("INDENT") : _e), typeof(_c) === 'number' ? _c + _d : _c['$+'](_d)), ((_c = self).$process || $mm('process')).call(_c, o, "expre"), self.indent]))
                      };
                    }, TMP_25._s = self, TMP_25));
                    } else {
                    code = ((_a = code)['$+'] || $mm('+')).call(_a, "if (typeof(" + (yielder) + ") !== 'function') { " + (yielder) + " = nil }")
                  }
                }
              }
              } else {
              if (opt !== false && opt !== nil) {
                ((_a = ((_b = opt)['$[]'] || $mm('[]')).call(_b, __range(1, -1, false))).$each || $mm('each')).call(_a, (TMP_26 = function(o) {

                  var id = nil, self = TMP_26._s || this, _a, _b, _c, _d, _e;
                  if (self.indent == null) self.indent = nil;

                  if (o == null) o = nil;

                  if (((_a = ((_b = ((_c = o)['$[]'] || $mm('[]')).call(_c, 2))['$[]'] || $mm('[]')).call(_b, 2))['$=='] || $mm('==')).call(_a, "undefined")) {
                    return nil;
                  };
                  id = ((_a = self).$process || $mm('process')).call(_a, ((_b = self).$s || $mm('s')).call(_b, "lvar", ((_c = o)['$[]'] || $mm('[]')).call(_c, 1)), "expr");
                  return code = ((_a = code)['$+'] || $mm('+')).call(_a, ((_b = "if (%s == null) {\n%s%s\n%s}")['$%'] || $mm('%')).call(_b, [id, (_c = self.indent, _d = ((_e = __scope.INDENT) == null ? __opal.cm("INDENT") : _e), typeof(_c) === 'number' ? _c + _d : _c['$+'](_d)), ((_c = self).$process || $mm('process')).call(_c, o, "expre"), self.indent]));
                }, TMP_26._s = self, TMP_26))
              };
              if (splat !== false && splat !== nil) {
                code = ((_a = code)['$+'] || $mm('+')).call(_a, "" + (splat) + " = __slice.call(arguments, " + (argc) + ");")
              };
            };
            code = ((_a = code)['$+'] || $mm('+')).call(_a, stmt_code);
            if ((_a = (_b = ((_b = self.scope)['$uses_block?'] || $mm('uses_block?')).call(_b), _b !== false && _b !== nil ? (_b = block_name, (_b === nil || _b === false)) : _b)) !== false && _a !== nil) {
              params = (function() { if ((_a = ((_b = params)['$empty?'] || $mm('empty?')).call(_b)) !== false && _a !== nil) {
                return yielder
                } else {
                return "" + (params) + ", " + (yielder)
              }; return nil; }).call(self)
            };
            scope_name = ((_a = self.scope).$identity || $mm('identity')).call(_a);
            uses_super = ((_a = self.scope).$uses_super || $mm('uses_super')).call(_a);
            return code = (_a = "" + (arity_code) + (self.indent) + (((_c = self.scope).$to_vars || $mm('to_vars')).call(_c)), _b = code, typeof(_a) === 'number' ? _a + _b : _a['$+'](_b));
          }, TMP_24._s = self, TMP_24))
        }, TMP_23._s = this, TMP_23));
        defcode = "" + ((function() { if (scope_name !== false && scope_name !== nil) {
          return "" + (scope_name) + " = "
          } else {
          return nil
        }; return nil; }).call(this)) + "function(" + (params) + ") {\n" + (code) + "\n" + (this.indent) + "}";
        if (recvr !== false && recvr !== nil) {
          if (smethod !== false && smethod !== nil) {
            return "" + (((_a = this.scope).$name || $mm('name')).call(_a)) + "._defs('$" + (mid) + "', " + (defcode) + ")"
            } else {
            return "" + (recv) + (jsid) + " = " + (defcode)
          }
          } else {
          if ((_a = ((_b = this.scope)['$class_scope?'] || $mm('class_scope?')).call(_b)) !== false && _a !== nil) {
            ((_a = ((_b = this.scope).$methods || $mm('methods')).call(_b))['$<<'] || $mm('<<')).call(_a, "$" + (mid));
            if (uses_super !== false && uses_super !== nil) {
              ((_a = this.scope).$add_temp || $mm('add_temp')).call(_a, uses_super);
              uses_super = "" + (uses_super) + " = " + (((_a = this.scope).$proto || $mm('proto')).call(_a)) + (jsid) + ";\n" + (this.indent);
            };
            return "" + (uses_super) + (((_a = this.scope).$proto || $mm('proto')).call(_a)) + (jsid) + " = " + (defcode);
            } else {
            if (((_a = ((_b = this.scope).$type || $mm('type')).call(_b))['$=='] || $mm('==')).call(_a, "iter")) {
              return "def" + (jsid) + " = " + (defcode)
              } else {
              if (((_a = ((_b = this.scope).$type || $mm('type')).call(_b))['$=='] || $mm('==')).call(_a, "top")) {
                return "" + (((_a = this).$current_self || $mm('current_self')).call(_a)) + (jsid) + " = " + (defcode)
                } else {
                return "def" + (jsid) + " = " + (defcode)
              }
            }
          }
        };
      };

      def.$arity_check = function(args, opt, splat, block_name, mid) {
        var meth = nil, arity = nil, aritycode = nil, _a, _b, _c, _d, _e;
        meth = ((_a = ((_b = mid).$to_s || $mm('to_s')).call(_b)).$inspect || $mm('inspect')).call(_a);
        arity = (_a = ((_c = args).$size || $mm('size')).call(_c), _b = 1, typeof(_a) === 'number' ? _a - _b : _a['$-'](_b));
        if (opt !== false && opt !== nil) {
          arity = ((_a = arity)['$-'] || $mm('-')).call(_a, (_b = ((_d = opt).$size || $mm('size')).call(_d), _c = 1, typeof(_b) === 'number' ? _b - _c : _b['$-'](_c)))
        };
        if (splat !== false && splat !== nil) {
          arity = ((_a = arity)['$-'] || $mm('-')).call(_a, 1)
        };
        if (block_name !== false && block_name !== nil) {
          arity = ((_a = arity)['$-'] || $mm('-')).call(_a, 1)
        };
        if ((_a = ((_b = opt), _b !== false && _b !== nil ? _b : splat)) !== false && _a !== nil) {
          arity = (_a = ((_c = arity)['$-@'] || $mm('-@')).call(_c), _b = 1, typeof(_a) === 'number' ? _a - _b : _a['$-'](_b))
        };
        aritycode = "var $arity = arguments.length;";
        if (((_a = arity)['$<'] || $mm('<')).call(_a, 0)) {
          return (_a = aritycode, _b = "if ($arity < " + (((_c = (_d = arity, _e = 1, typeof(_d) === 'number' ? _d + _e : _d['$+'](_e)))['$-@'] || $mm('-@')).call(_c)) + ") { __opal.ac($arity, " + (arity) + ", this, " + (meth) + "); }", typeof(_a) === 'number' ? _a + _b : _a['$+'](_b))
          } else {
          return (_a = aritycode, _b = "if ($arity !== " + (arity) + " && (typeof(arguments[$arity - 1]) !== 'function' || ($arity - 1) !== " + (arity) + ")) { __opal.ac($arity, " + (arity) + ", this, " + (meth) + "); }", typeof(_a) === 'number' ? _a + _b : _a['$+'](_b))
        };
      };

      def.$process_args = function(exp, level) {
        var args = nil, a = nil, _a, _b, _c, _d;
        args = [];
        while (!((_b = ((_c = exp)['$empty?'] || $mm('empty?')).call(_c)) !== false && _b !== nil)) {a = ((_b = ((_c = exp).$shift || $mm('shift')).call(_c)).$to_sym || $mm('to_sym')).call(_b);
        if (((_b = ((_c = a).$to_s || $mm('to_s')).call(_c))['$=='] || $mm('==')).call(_b, "*")) {
          continue;
        };
        if ((_b = ((_c = ((_d = __scope.RESERVED) == null ? __opal.cm("RESERVED") : _d))['$include?'] || $mm('include?')).call(_c, ((_d = a).$to_s || $mm('to_s')).call(_d))) !== false && _b !== nil) {
          a = ((_b = ("" + (a) + "$")).$to_sym || $mm('to_sym')).call(_b)
        };
        ((_b = this.scope).$add_arg || $mm('add_arg')).call(_b, a);
        ((_b = args)['$<<'] || $mm('<<')).call(_b, a);};
        return ((_a = args).$join || $mm('join')).call(_a, ", ");
      };

      def.$process_self = function(sexp, level) {
        var _a;
        return ((_a = this).$current_self || $mm('current_self')).call(_a);
      };

      def.$current_self = function() {
        var _a, _b;
        if ((_a = ((_b = this.scope)['$class_scope?'] || $mm('class_scope?')).call(_b)) !== false && _a !== nil) {
          return ((_a = this.scope).$name || $mm('name')).call(_a)
          } else {
          if ((_a = ((_b = this.scope)['$top?'] || $mm('top?')).call(_b)) !== false && _a !== nil) {
            return "self"
            } else {
            if ((_a = ((_b = this.scope)['$top?'] || $mm('top?')).call(_b)) !== false && _a !== nil) {
              return "self"
              } else {
              if ((_a = ((_b = this.scope)['$iter?'] || $mm('iter?')).call(_b)) !== false && _a !== nil) {
                return "self"
                } else {
                return "this"
              }
            }
          }
        };
      };

      ((_a = ["true", "false", "nil"]).$each || $mm('each')).call(_a, (TMP_27 = function(name) {

        var self = TMP_27._s || this, TMP_28, _a;
        if (name == null) name = nil;

        return ((_a = self).$define_method || $mm('define_method')).call(_a, "process_" + (name), (TMP_28 = function(exp, level) {

          var self = TMP_28._s || this;
          if (exp == null) exp = nil;
if (level == null) level = nil;

          return name
        }, TMP_28._s = self, TMP_28))
      }, TMP_27._s = Parser, TMP_27));

      def.$process_array = function(sexp, level) {
        var code = nil, work = nil, splat = nil, part = nil, join = nil, _a, _b, _c, _d;
        if ((_a = ((_b = sexp)['$empty?'] || $mm('empty?')).call(_b)) !== false && _a !== nil) {
          return "[]"
        };
        code = "";
        work = [];
        while (!((_b = ((_c = sexp)['$empty?'] || $mm('empty?')).call(_c)) !== false && _b !== nil)) {splat = ((_b = ((_c = ((_d = sexp).$first || $mm('first')).call(_d)).$first || $mm('first')).call(_c))['$=='] || $mm('==')).call(_b, "splat");
        part = ((_b = this).$process || $mm('process')).call(_b, ((_c = sexp).$shift || $mm('shift')).call(_c), "expr");
        if (splat !== false && splat !== nil) {
          if ((_b = ((_c = work)['$empty?'] || $mm('empty?')).call(_c)) !== false && _b !== nil) {
            code = ((_b = code)['$+'] || $mm('+')).call(_b, (function() { if ((_c = ((_d = code)['$empty?'] || $mm('empty?')).call(_d)) !== false && _c !== nil) {
              return part
              } else {
              return ".concat(" + (part) + ")"
            }; return nil; }).call(this))
            } else {
            join = "[" + (((_b = work).$join || $mm('join')).call(_b, ", ")) + "]";
            code = ((_b = code)['$+'] || $mm('+')).call(_b, (function() { if ((_c = ((_d = code)['$empty?'] || $mm('empty?')).call(_d)) !== false && _c !== nil) {
              return join
              } else {
              return ".concat(" + (join) + ")"
            }; return nil; }).call(this));
            code = ((_b = code)['$+'] || $mm('+')).call(_b, ".concat(" + (part) + ")");
          };
          work = [];
          } else {
          ((_b = work)['$<<'] || $mm('<<')).call(_b, part)
        };};
        if ((_a = ((_b = work)['$empty?'] || $mm('empty?')).call(_b)) === false || _a === nil) {
          join = "[" + (((_a = work).$join || $mm('join')).call(_a, ", ")) + "]";
          code = ((_a = code)['$+'] || $mm('+')).call(_a, (function() { if ((_b = ((_c = code)['$empty?'] || $mm('empty?')).call(_c)) !== false && _b !== nil) {
            return join
            } else {
            return ".concat(" + (join) + ")"
          }; return nil; }).call(this));
        };
        return code;
      };

      def.$process_hash = function(sexp, level) {
        var keys = nil, vals = nil, hash_obj = nil, hash_keys = nil, map = nil, TMP_29, _a, TMP_30, _b, TMP_31, TMP_32, TMP_33;
        keys = [];
        vals = [];
        ((_a = sexp).$each_with_index || $mm('each_with_index')).call(_a, (TMP_29 = function(obj, idx) {

          var self = TMP_29._s || this, _a, _b;
          if (obj == null) obj = nil;
if (idx == null) idx = nil;

          if ((_a = ((_b = idx)['$even?'] || $mm('even?')).call(_b)) !== false && _a !== nil) {
            return ((_a = keys)['$<<'] || $mm('<<')).call(_a, obj)
            } else {
            return ((_a = vals)['$<<'] || $mm('<<')).call(_a, obj)
          }
        }, TMP_29._s = this, TMP_29));
        if ((_a = ((_b = keys)['$all?'] || $mm('all?')).call(_b, (TMP_30 = function(k) {

          var self = TMP_30._s || this, _a, _b;
          if (k == null) k = nil;

          return ((_a = ["lit", "str"])['$include?'] || $mm('include?')).call(_a, ((_b = k)['$[]'] || $mm('[]')).call(_b, 0))
        }, TMP_30._s = this, TMP_30))) !== false && _a !== nil) {
          hash_obj = __hash2([], {});
          hash_keys = [];
          ((_a = ((_b = keys).$size || $mm('size')).call(_b)).$times || $mm('times')).call(_a, (TMP_31 = function(i) {

            var k = nil, self = TMP_31._s || this, _a, _b, _c;
            if (i == null) i = nil;

            k = ((_a = self).$process || $mm('process')).call(_a, ((_b = keys)['$[]'] || $mm('[]')).call(_b, i), "expr");
            if ((_a = ((_b = hash_obj)['$include?'] || $mm('include?')).call(_b, k)) === false || _a === nil) {
              ((_a = hash_keys)['$<<'] || $mm('<<')).call(_a, k)
            };
            return ((_a = hash_obj)['$[]='] || $mm('[]=')).call(_a, k, ((_b = self).$process || $mm('process')).call(_b, ((_c = vals)['$[]'] || $mm('[]')).call(_c, i), "expr"));
          }, TMP_31._s = this, TMP_31));
          map = ((_a = hash_keys).$map || $mm('map')).call(_a, (TMP_32 = function(k) {

            var self = TMP_32._s || this, _a;
            if (k == null) k = nil;

            return "" + (k) + ": " + (((_a = hash_obj)['$[]'] || $mm('[]')).call(_a, k))
          }, TMP_32._s = this, TMP_32));
          ((_a = this.helpers)['$[]='] || $mm('[]=')).call(_a, "hash2", true);
          return "__hash2([" + (((_a = hash_keys).$join || $mm('join')).call(_a, ", ")) + "], {" + (((_a = map).$join || $mm('join')).call(_a, ", ")) + "})";
          } else {
          ((_a = this.helpers)['$[]='] || $mm('[]=')).call(_a, "hash", true);
          return "__hash(" + (((_a = ((_b = sexp).$map || $mm('map')).call(_b, (TMP_33 = function(p) {

            var self = TMP_33._s || this, _a;
            if (p == null) p = nil;

            return ((_a = self).$process || $mm('process')).call(_a, p, "expr")
          }, TMP_33._s = this, TMP_33))).$join || $mm('join')).call(_a, ", ")) + ")";
        };
      };

      def.$process_while = function(sexp, level) {
        var expr = nil, stmt = nil, redo_var = nil, stmt_level = nil, pre = nil, code = nil, _a, _b, _c, TMP_34;
        expr = ((_a = sexp)['$[]'] || $mm('[]')).call(_a, 0);
        stmt = ((_a = sexp)['$[]'] || $mm('[]')).call(_a, 1);
        redo_var = ((_a = this.scope).$new_temp || $mm('new_temp')).call(_a);
        stmt_level = (function() { if ((_a = ((_b = ((_c = level)['$=='] || $mm('==')).call(_c, "expr")), _b !== false && _b !== nil ? _b : ((_c = level)['$=='] || $mm('==')).call(_c, "recv"))) !== false && _a !== nil) {
          return "stmt_closure"
          } else {
          return "stmt"
        }; return nil; }).call(this);
        pre = "while (";
        code = "" + (((_a = this).$js_truthy || $mm('js_truthy')).call(_a, expr)) + "){";
        ((_a = this).$in_while || $mm('in_while')).call(_a, (TMP_34 = function() {

          var body = nil, self = TMP_34._s || this, _a, _b, _c, _d;
          if (self.while_loop == null) self.while_loop = nil;

          
          if (((_a = stmt_level)['$=='] || $mm('==')).call(_a, "stmt_closure")) {
            ((_a = self.while_loop)['$[]='] || $mm('[]=')).call(_a, "closure", true)
          };
          ((_a = self.while_loop)['$[]='] || $mm('[]=')).call(_a, "redo_var", redo_var);
          body = ((_a = self).$process || $mm('process')).call(_a, stmt, "stmt");
          if ((_a = ((_b = self.while_loop)['$[]'] || $mm('[]')).call(_b, "use_redo")) !== false && _a !== nil) {
            pre = (_a = (_c = "" + (redo_var) + "=false;", _d = pre, typeof(_c) === 'number' ? _c + _d : _c['$+'](_d)), _b = "" + (redo_var) + " || ", typeof(_a) === 'number' ? _a + _b : _a['$+'](_b));
            code = ((_a = code)['$+'] || $mm('+')).call(_a, "" + (redo_var) + "=false;");
          };
          return code = ((_a = code)['$+'] || $mm('+')).call(_a, body);
        }, TMP_34._s = this, TMP_34));
        code = ((_a = code)['$+'] || $mm('+')).call(_a, "}");
        code = (_a = pre, _b = code, typeof(_a) === 'number' ? _a + _b : _a['$+'](_b));
        ((_a = this.scope).$queue_temp || $mm('queue_temp')).call(_a, redo_var);
        if (((_a = stmt_level)['$=='] || $mm('==')).call(_a, "stmt_closure")) {
          code = "(function() {" + (code) + "; return nil;}).call(" + (((_a = this).$current_self || $mm('current_self')).call(_a)) + ")"
        };
        return code;
      };

      def.$process_until = function(exp, level) {
        var expr = nil, stmt = nil, redo_var = nil, stmt_level = nil, pre = nil, code = nil, _a, _b, _c, TMP_35;
        expr = ((_a = exp)['$[]'] || $mm('[]')).call(_a, 0);
        stmt = ((_a = exp)['$[]'] || $mm('[]')).call(_a, 1);
        redo_var = ((_a = this.scope).$new_temp || $mm('new_temp')).call(_a);
        stmt_level = (function() { if ((_a = ((_b = ((_c = level)['$=='] || $mm('==')).call(_c, "expr")), _b !== false && _b !== nil ? _b : ((_c = level)['$=='] || $mm('==')).call(_c, "recv"))) !== false && _a !== nil) {
          return "stmt_closure"
          } else {
          return "stmt"
        }; return nil; }).call(this);
        pre = "while (!(";
        code = "" + (((_a = this).$js_truthy || $mm('js_truthy')).call(_a, expr)) + ")) {";
        ((_a = this).$in_while || $mm('in_while')).call(_a, (TMP_35 = function() {

          var body = nil, self = TMP_35._s || this, _a, _b, _c, _d;
          if (self.while_loop == null) self.while_loop = nil;

          
          if (((_a = stmt_level)['$=='] || $mm('==')).call(_a, "stmt_closure")) {
            ((_a = self.while_loop)['$[]='] || $mm('[]=')).call(_a, "closure", true)
          };
          ((_a = self.while_loop)['$[]='] || $mm('[]=')).call(_a, "redo_var", redo_var);
          body = ((_a = self).$process || $mm('process')).call(_a, stmt, "stmt");
          if ((_a = ((_b = self.while_loop)['$[]'] || $mm('[]')).call(_b, "use_redo")) !== false && _a !== nil) {
            pre = (_a = (_c = "" + (redo_var) + "=false;", _d = pre, typeof(_c) === 'number' ? _c + _d : _c['$+'](_d)), _b = "" + (redo_var) + " || ", typeof(_a) === 'number' ? _a + _b : _a['$+'](_b));
            code = ((_a = code)['$+'] || $mm('+')).call(_a, "" + (redo_var) + "=false;");
          };
          return code = ((_a = code)['$+'] || $mm('+')).call(_a, body);
        }, TMP_35._s = this, TMP_35));
        code = ((_a = code)['$+'] || $mm('+')).call(_a, "}");
        code = (_a = pre, _b = code, typeof(_a) === 'number' ? _a + _b : _a['$+'](_b));
        ((_a = this.scope).$queue_temp || $mm('queue_temp')).call(_a, redo_var);
        if (((_a = stmt_level)['$=='] || $mm('==')).call(_a, "stmt_closure")) {
          code = "(function() {" + (code) + "; return nil;}).call(" + (((_a = this).$current_self || $mm('current_self')).call(_a)) + ")"
        };
        return code;
      };

      def.$process_alias = function(exp, level) {
        var new$ = nil, old = nil, current = nil, _a, _b, _c, _d;
        new$ = ((_a = this).$mid_to_jsid || $mm('mid_to_jsid')).call(_a, ((_b = ((_c = ((_d = exp)['$[]'] || $mm('[]')).call(_d, 0))['$[]'] || $mm('[]')).call(_c, 1)).$to_s || $mm('to_s')).call(_b));
        old = ((_a = this).$mid_to_jsid || $mm('mid_to_jsid')).call(_a, ((_b = ((_c = ((_d = exp)['$[]'] || $mm('[]')).call(_d, 1))['$[]'] || $mm('[]')).call(_c, 1)).$to_s || $mm('to_s')).call(_b));
        if ((_a = ((_b = ["class", "module"])['$include?'] || $mm('include?')).call(_b, ((_c = this.scope).$type || $mm('type')).call(_c))) !== false && _a !== nil) {
          ((_a = ((_b = this.scope).$methods || $mm('methods')).call(_b))['$<<'] || $mm('<<')).call(_a, "$" + (((_b = ((_c = ((_d = exp)['$[]'] || $mm('[]')).call(_d, 0))['$[]'] || $mm('[]')).call(_c, 1)).$to_s || $mm('to_s')).call(_b)));
          return ((_a = "%s%s = %s%s")['$%'] || $mm('%')).call(_a, [((_b = this.scope).$proto || $mm('proto')).call(_b), new$, ((_b = this.scope).$proto || $mm('proto')).call(_b), old]);
          } else {
          current = ((_a = this).$current_self || $mm('current_self')).call(_a);
          return ((_a = "%s.prototype%s = %s.prototype%s")['$%'] || $mm('%')).call(_a, [current, new$, current, old]);
        };
      };

      def.$process_masgn = function(sexp, level) {
        var lhs = nil, rhs = nil, tmp = nil, len = nil, code = nil, _a, _b, _c, TMP_36;
        lhs = ((_a = sexp)['$[]'] || $mm('[]')).call(_a, 0);
        rhs = ((_a = sexp)['$[]'] || $mm('[]')).call(_a, 1);
        tmp = ((_a = this.scope).$new_temp || $mm('new_temp')).call(_a);
        len = 0;
        ((_a = lhs).$shift || $mm('shift')).call(_a);
        if (((_a = ((_b = rhs)['$[]'] || $mm('[]')).call(_b, 0))['$=='] || $mm('==')).call(_a, "array")) {
          len = (_a = ((_c = rhs).$length || $mm('length')).call(_c), _b = 1, typeof(_a) === 'number' ? _a - _b : _a['$-'](_b));
          code = ["" + (tmp) + " = " + (((_a = this).$process || $mm('process')).call(_a, rhs, "expr"))];
          } else {
          if (((_a = ((_b = rhs)['$[]'] || $mm('[]')).call(_b, 0))['$=='] || $mm('==')).call(_a, "to_ary")) {
            code = ["((" + (tmp) + " = " + (((_a = this).$process || $mm('process')).call(_a, ((_b = rhs)['$[]'] || $mm('[]')).call(_b, 1), "expr")) + ")._isArray ? " + (tmp) + " : (" + (tmp) + " = [" + (tmp) + "]))"]
            } else {
            if (((_a = ((_b = rhs)['$[]'] || $mm('[]')).call(_b, 0))['$=='] || $mm('==')).call(_a, "splat")) {
              code = ["" + (tmp) + " = " + (((_a = this).$process || $mm('process')).call(_a, ((_b = rhs)['$[]'] || $mm('[]')).call(_b, 1), "expr"))]
              } else {
              ((_a = this).$raise || $mm('raise')).call(_a, "Unsupported mlhs type")
            }
          }
        };
        ((_a = lhs).$each_with_index || $mm('each_with_index')).call(_a, (TMP_36 = function(l, idx) {

          var s = nil, self = TMP_36._s || this, _a, _b;
          if (l == null) l = nil;
if (idx == null) idx = nil;

          if (((_a = ((_b = l).$first || $mm('first')).call(_b))['$=='] || $mm('==')).call(_a, "splat")) {
            s = ((_a = l)['$[]'] || $mm('[]')).call(_a, 1);
            ((_a = s)['$<<'] || $mm('<<')).call(_a, ((_b = self).$s || $mm('s')).call(_b, "js_tmp", "__slice.call(" + (tmp) + ", " + (idx) + ")"));
            return ((_a = code)['$<<'] || $mm('<<')).call(_a, ((_b = self).$process || $mm('process')).call(_b, s, "expr"));
            } else {
            if (((_a = idx)['$>='] || $mm('>=')).call(_a, len)) {
              ((_a = l)['$<<'] || $mm('<<')).call(_a, ((_b = self).$s || $mm('s')).call(_b, "js_tmp", "(" + (tmp) + "[" + (idx) + "] == null ? nil : " + (tmp) + "[" + (idx) + "])"))
              } else {
              ((_a = l)['$<<'] || $mm('<<')).call(_a, ((_b = self).$s || $mm('s')).call(_b, "js_tmp", "" + (tmp) + "[" + (idx) + "]"))
            };
            return ((_a = code)['$<<'] || $mm('<<')).call(_a, ((_b = self).$process || $mm('process')).call(_b, l, "expr"));
          }
        }, TMP_36._s = this, TMP_36));
        ((_a = this.scope).$queue_temp || $mm('queue_temp')).call(_a, tmp);
        return ((_a = code).$join || $mm('join')).call(_a, ", ");
      };

      def.$process_svalue = function(sexp, level) {
        var _a, _b;
        return ((_a = this).$process || $mm('process')).call(_a, ((_b = sexp).$shift || $mm('shift')).call(_b), level);
      };

      def.$process_lasgn = function(sexp, level) {
        var lvar = nil, rhs = nil, res = nil, _a, _b, _c;
        lvar = ((_a = sexp)['$[]'] || $mm('[]')).call(_a, 0);
        rhs = ((_a = sexp)['$[]'] || $mm('[]')).call(_a, 1);
        if ((_a = ((_b = ((_c = __scope.RESERVED) == null ? __opal.cm("RESERVED") : _c))['$include?'] || $mm('include?')).call(_b, ((_c = lvar).$to_s || $mm('to_s')).call(_c))) !== false && _a !== nil) {
          lvar = ((_a = ("" + (lvar) + "$")).$to_sym || $mm('to_sym')).call(_a)
        };
        ((_a = this.scope).$add_local || $mm('add_local')).call(_a, lvar);
        res = "" + (lvar) + " = " + (((_a = this).$process || $mm('process')).call(_a, rhs, "expr"));
        if (((_a = level)['$=='] || $mm('==')).call(_a, "recv")) {
          return "(" + (res) + ")"
          } else {
          return res
        };
      };

      def.$process_lvar = function(exp, level) {
        var lvar = nil, _a, _b, _c;
        lvar = ((_a = ((_b = exp).$shift || $mm('shift')).call(_b)).$to_s || $mm('to_s')).call(_a);
        if ((_a = ((_b = ((_c = __scope.RESERVED) == null ? __opal.cm("RESERVED") : _c))['$include?'] || $mm('include?')).call(_b, lvar)) !== false && _a !== nil) {
          lvar = "" + (lvar) + "$"
        };
        return lvar;
      };

      def.$process_iasgn = function(exp, level) {
        var ivar = nil, rhs = nil, lhs = nil, _a, _b, _c;
        ivar = ((_a = exp)['$[]'] || $mm('[]')).call(_a, 0);
        rhs = ((_a = exp)['$[]'] || $mm('[]')).call(_a, 1);
        ivar = ((_a = ((_b = ivar).$to_s || $mm('to_s')).call(_b))['$[]'] || $mm('[]')).call(_a, __range(1, -1, false));
        lhs = (function() { if ((_a = ((_b = ((_c = __scope.RESERVED) == null ? __opal.cm("RESERVED") : _c))['$include?'] || $mm('include?')).call(_b, ivar)) !== false && _a !== nil) {
          return "" + (((_a = this).$current_self || $mm('current_self')).call(_a)) + "['" + (ivar) + "']"
          } else {
          return "" + (((_a = this).$current_self || $mm('current_self')).call(_a)) + "." + (ivar)
        }; return nil; }).call(this);
        return "" + (lhs) + " = " + (((_a = this).$process || $mm('process')).call(_a, rhs, "expr"));
      };

      def.$process_ivar = function(exp, level) {
        var ivar = nil, part = nil, _a, _b, _c;
        ivar = ((_a = ((_b = ((_c = exp).$shift || $mm('shift')).call(_c)).$to_s || $mm('to_s')).call(_b))['$[]'] || $mm('[]')).call(_a, __range(1, -1, false));
        part = (function() { if ((_a = ((_b = ((_c = __scope.RESERVED) == null ? __opal.cm("RESERVED") : _c))['$include?'] || $mm('include?')).call(_b, ivar)) !== false && _a !== nil) {
          return "['" + (ivar) + "']"
          } else {
          return "." + (ivar)
        }; return nil; }).call(this);
        ((_a = this.scope).$add_ivar || $mm('add_ivar')).call(_a, part);
        return "" + (((_a = this).$current_self || $mm('current_self')).call(_a)) + (part);
      };

      def.$process_gvar = function(sexp, level) {
        var gvar = nil, _a, _b, _c;
        gvar = ((_a = ((_b = ((_c = sexp).$shift || $mm('shift')).call(_c)).$to_s || $mm('to_s')).call(_b))['$[]'] || $mm('[]')).call(_a, __range(1, -1, false));
        ((_a = this.helpers)['$[]='] || $mm('[]=')).call(_a, "gvars", true);
        return "__gvars[" + (((_a = gvar).$inspect || $mm('inspect')).call(_a)) + "]";
      };

      def.$process_gasgn = function(sexp, level) {
        var gvar = nil, rhs = nil, _a, _b, _c;
        gvar = ((_a = ((_b = ((_c = sexp)['$[]'] || $mm('[]')).call(_c, 0)).$to_s || $mm('to_s')).call(_b))['$[]'] || $mm('[]')).call(_a, __range(1, -1, false));
        rhs = ((_a = sexp)['$[]'] || $mm('[]')).call(_a, 1);
        ((_a = this.helpers)['$[]='] || $mm('[]=')).call(_a, "gvars", true);
        return "__gvars[" + (((_a = ((_b = gvar).$to_s || $mm('to_s')).call(_b)).$inspect || $mm('inspect')).call(_a)) + "] = " + (((_a = this).$process || $mm('process')).call(_a, rhs, "expr"));
      };

      def.$process_const = function(sexp, level) {
        var cname = nil, _a, _b, TMP_37;
        cname = ((_a = ((_b = sexp).$shift || $mm('shift')).call(_b)).$to_s || $mm('to_s')).call(_a);
        return ((_a = this).$with_temp || $mm('with_temp')).call(_a, (TMP_37 = function(t) {

          var self = TMP_37._s || this, _a;
          if (t == null) t = nil;

          return "((" + (t) + " = __scope." + (cname) + ") == null ? __opal.cm(" + (((_a = cname).$inspect || $mm('inspect')).call(_a)) + ") : " + (t) + ")"
        }, TMP_37._s = this, TMP_37));
      };

      def.$process_cdecl = function(sexp, level) {
        var const$ = nil, rhs = nil, _a;
        const$ = ((_a = sexp)['$[]'] || $mm('[]')).call(_a, 0);
        rhs = ((_a = sexp)['$[]'] || $mm('[]')).call(_a, 1);
        return "__scope." + (const$) + " = " + (((_a = this).$process || $mm('process')).call(_a, rhs, "expr"));
      };

      def.$process_return = function(sexp, level) {
        var val = nil, _a, _b, _c;
        val = ((_a = this).$process || $mm('process')).call(_a, ((_b = ((_c = sexp).$shift || $mm('shift')).call(_c)), _b !== false && _b !== nil ? _b : ((_c = this).$s || $mm('s')).call(_c, "nil")), "expr");
        if ((_a = ((_b = level)['$=='] || $mm('==')).call(_b, "stmt")) === false || _a === nil) {
          ((_a = this).$raise || $mm('raise')).call(_a, "Cannot return as an expression")
        };
        return "return " + (val);
      };

      def.$process_xstr = function(sexp, level) {
        var code = nil, _a, _b, _c, _d;
        code = ((_a = ((_b = sexp).$first || $mm('first')).call(_b)).$to_s || $mm('to_s')).call(_a);
        if ((_a = ((_b = ((_c = level)['$=='] || $mm('==')).call(_c, "stmt")) ? (_c = ((_d = code)['$include?'] || $mm('include?')).call(_d, ";"), (_c === nil || _c === false)) : _b)) !== false && _a !== nil) {
          code = ((_a = code)['$+'] || $mm('+')).call(_a, ";")
        };
        if (((_a = level)['$=='] || $mm('==')).call(_a, "recv")) {
          return "(" + (code) + ")"
          } else {
          return code
        };
      };

      def.$process_dxstr = function(sexp, level) {
        var code = nil, _a, TMP_38, _b, _c, _d;
        code = ((_a = ((_b = sexp).$map || $mm('map')).call(_b, (TMP_38 = function(p) {

          var self = TMP_38._s || this, _a, _b, _c;
          if (p == null) p = nil;

          if ((_a = ((_b = ((_c = __scope.String) == null ? __opal.cm("String") : _c))['$==='] || $mm('===')).call(_b, p)) !== false && _a !== nil) {
            return ((_a = p).$to_s || $mm('to_s')).call(_a)
            } else {
            if (((_a = ((_b = p).$first || $mm('first')).call(_b))['$=='] || $mm('==')).call(_a, "evstr")) {
              return ((_a = self).$process || $mm('process')).call(_a, ((_b = p).$last || $mm('last')).call(_b), "stmt")
              } else {
              if (((_a = ((_b = p).$first || $mm('first')).call(_b))['$=='] || $mm('==')).call(_a, "str")) {
                return ((_a = ((_b = p).$last || $mm('last')).call(_b)).$to_s || $mm('to_s')).call(_a)
                } else {
                return ((_a = self).$raise || $mm('raise')).call(_a, "Bad dxstr part")
              }
            }
          }
        }, TMP_38._s = this, TMP_38))).$join || $mm('join')).call(_a);
        if ((_a = ((_b = ((_c = level)['$=='] || $mm('==')).call(_c, "stmt")) ? (_c = ((_d = code)['$include?'] || $mm('include?')).call(_d, ";"), (_c === nil || _c === false)) : _b)) !== false && _a !== nil) {
          code = ((_a = code)['$+'] || $mm('+')).call(_a, ";")
        };
        if (((_a = level)['$=='] || $mm('==')).call(_a, "recv")) {
          code = "(" + (code) + ")"
        };
        return code;
      };

      def.$process_dstr = function(sexp, level) {
        var parts = nil, res = nil, TMP_39, _a;
        parts = ((_a = sexp).$map || $mm('map')).call(_a, (TMP_39 = function(p) {

          var self = TMP_39._s || this, _a, _b, _c, _d, _e, _f;
          if (p == null) p = nil;

          if ((_a = ((_b = ((_c = __scope.String) == null ? __opal.cm("String") : _c))['$==='] || $mm('===')).call(_b, p)) !== false && _a !== nil) {
            return ((_a = p).$inspect || $mm('inspect')).call(_a)
            } else {
            if (((_a = ((_b = p).$first || $mm('first')).call(_b))['$=='] || $mm('==')).call(_a, "evstr")) {
              return (_a = (_c = "(", _d = ((_e = self).$process || $mm('process')).call(_e, ((_f = p).$last || $mm('last')).call(_f), "expr"), typeof(_c) === 'number' ? _c + _d : _c['$+'](_d)), _b = ")", typeof(_a) === 'number' ? _a + _b : _a['$+'](_b))
              } else {
              if (((_a = ((_b = p).$first || $mm('first')).call(_b))['$=='] || $mm('==')).call(_a, "str")) {
                return ((_a = ((_b = p).$last || $mm('last')).call(_b)).$inspect || $mm('inspect')).call(_a)
                } else {
                return ((_a = self).$raise || $mm('raise')).call(_a, "Bad dstr part")
              }
            }
          }
        }, TMP_39._s = this, TMP_39));
        res = ((_a = parts).$join || $mm('join')).call(_a, " + ");
        if (((_a = level)['$=='] || $mm('==')).call(_a, "recv")) {
          return "(" + (res) + ")"
          } else {
          return res
        };
      };

      def.$process_dsym = function(sexp, level) {
        var parts = nil, TMP_40, _a;
        parts = ((_a = sexp).$map || $mm('map')).call(_a, (TMP_40 = function(p) {

          var self = TMP_40._s || this, _a, _b, _c;
          if (p == null) p = nil;

          if ((_a = ((_b = ((_c = __scope.String) == null ? __opal.cm("String") : _c))['$==='] || $mm('===')).call(_b, p)) !== false && _a !== nil) {
            return ((_a = p).$inspect || $mm('inspect')).call(_a)
            } else {
            if (((_a = ((_b = p).$first || $mm('first')).call(_b))['$=='] || $mm('==')).call(_a, "evstr")) {
              return ((_a = self).$process || $mm('process')).call(_a, ((_b = self).$s || $mm('s')).call(_b, "call", ((_c = p).$last || $mm('last')).call(_c), "to_s", ((_c = self).$s || $mm('s')).call(_c, "arglist")), "expr")
              } else {
              if (((_a = ((_b = p).$first || $mm('first')).call(_b))['$=='] || $mm('==')).call(_a, "str")) {
                return ((_a = ((_b = p).$last || $mm('last')).call(_b)).$inspect || $mm('inspect')).call(_a)
                } else {
                return ((_a = self).$raise || $mm('raise')).call(_a, "Bad dsym part")
              }
            }
          }
        }, TMP_40._s = this, TMP_40));
        return "(" + (((_a = parts).$join || $mm('join')).call(_a, "+")) + ")";
      };

      def.$process_if = function(sexp, level) {
        var test = nil, truthy = nil, falsy = nil, returnable = nil, check = nil, code = nil, _a, _b, _c, TMP_41, TMP_42;
        ((_a = sexp)._isArray ? _a : (_a = [_a])), test = (_a[0] == null ? nil : _a[0]), truthy = (_a[1] == null ? nil : _a[1]), falsy = (_a[2] == null ? nil : _a[2]);
        returnable = ((_a = ((_b = level)['$=='] || $mm('==')).call(_b, "expr")), _a !== false && _a !== nil ? _a : ((_b = level)['$=='] || $mm('==')).call(_b, "recv"));
        if (returnable !== false && returnable !== nil) {
          truthy = ((_a = this).$returns || $mm('returns')).call(_a, ((_b = truthy), _b !== false && _b !== nil ? _b : ((_c = this).$s || $mm('s')).call(_c, "nil")));
          falsy = ((_a = this).$returns || $mm('returns')).call(_a, ((_b = falsy), _b !== false && _b !== nil ? _b : ((_c = this).$s || $mm('s')).call(_c, "nil")));
        };
        if ((_a = ((_b = falsy !== false && falsy !== nil) ? (_c = truthy, (_c === nil || _c === false)) : _b)) !== false && _a !== nil) {
          truthy = falsy;
          falsy = nil;
          check = ((_a = this).$js_falsy || $mm('js_falsy')).call(_a, test);
          } else {
          check = ((_a = this).$js_truthy || $mm('js_truthy')).call(_a, test)
        };
        code = "if (" + (check) + ") {\n";
        if (truthy !== false && truthy !== nil) {
          ((_a = this).$indent || $mm('indent')).call(_a, (TMP_41 = function() {

            var self = TMP_41._s || this, _a, _b, _c, _d;
            if (self.indent == null) self.indent = nil;

            
            return code = ((_a = code)['$+'] || $mm('+')).call(_a, (_b = self.indent, _c = ((_d = self).$process || $mm('process')).call(_d, truthy, "stmt"), typeof(_b) === 'number' ? _b + _c : _b['$+'](_c)))
          }, TMP_41._s = this, TMP_41))
        };
        if (falsy !== false && falsy !== nil) {
          ((_a = this).$indent || $mm('indent')).call(_a, (TMP_42 = function() {

            var self = TMP_42._s || this, _a, _b;
            if (self.indent == null) self.indent = nil;

            
            return code = ((_a = code)['$+'] || $mm('+')).call(_a, "\n" + (self.indent) + "} else {\n" + (self.indent) + (((_b = self).$process || $mm('process')).call(_b, falsy, "stmt")))
          }, TMP_42._s = this, TMP_42))
        };
        code = ((_a = code)['$+'] || $mm('+')).call(_a, "\n" + (this.indent) + "}");
        if (returnable !== false && returnable !== nil) {
          code = "(function() { " + (code) + "; return nil; }).call(" + (((_a = this).$current_self || $mm('current_self')).call(_a)) + ")"
        };
        return code;
      };

      def.$js_truthy_optimize = function(sexp) {
        var mid = nil, name = nil, _a, _b, _c;
        if (((_a = ((_b = sexp).$first || $mm('first')).call(_b))['$=='] || $mm('==')).call(_a, "call")) {
          mid = ((_a = sexp)['$[]'] || $mm('[]')).call(_a, 2);
          if (((_a = mid)['$=='] || $mm('==')).call(_a, "block_given?")) {
            return ((_a = this).$process || $mm('process')).call(_a, sexp, "expr")
            } else {
            if ((_a = ((_b = ((_c = __scope.COMPARE) == null ? __opal.cm("COMPARE") : _c))['$include?'] || $mm('include?')).call(_b, ((_c = mid).$to_s || $mm('to_s')).call(_c))) !== false && _a !== nil) {
              return ((_a = this).$process || $mm('process')).call(_a, sexp, "expr")
              } else {
              if (((_a = mid)['$=='] || $mm('==')).call(_a, "==")) {
                return ((_a = this).$process || $mm('process')).call(_a, sexp, "expr")
                } else {
                return nil
              }
            }
          };
          } else {
          if ((_a = ((_b = ["lvar", "self"])['$include?'] || $mm('include?')).call(_b, ((_c = sexp).$first || $mm('first')).call(_c))) !== false && _a !== nil) {
            name = ((_a = this).$process || $mm('process')).call(_a, sexp, "expr");
            return "" + (name) + " !== false && " + (name) + " !== nil";
            } else {
            return nil
          }
        };
      };

      def.$js_truthy = function(sexp) {
        var optimized = nil, _a, _b, TMP_43;
        if ((_a = optimized = ((_b = this).$js_truthy_optimize || $mm('js_truthy_optimize')).call(_b, sexp)) !== false && _a !== nil) {
          return optimized
        };
        return ((_a = this).$with_temp || $mm('with_temp')).call(_a, (TMP_43 = function(tmp) {

          var self = TMP_43._s || this, _a, _b;
          if (tmp == null) tmp = nil;

          return ((_a = "(%s = %s) !== false && %s !== nil")['$%'] || $mm('%')).call(_a, [tmp, ((_b = self).$process || $mm('process')).call(_b, sexp, "expr"), tmp])
        }, TMP_43._s = this, TMP_43));
      };

      def.$js_falsy = function(sexp) {
        var mid = nil, _a, _b, TMP_44;
        if (((_a = ((_b = sexp).$first || $mm('first')).call(_b))['$=='] || $mm('==')).call(_a, "call")) {
          mid = ((_a = sexp)['$[]'] || $mm('[]')).call(_a, 2);
          if (((_a = mid)['$=='] || $mm('==')).call(_a, "block_given?")) {
            return ((_a = this).$handle_block_given || $mm('handle_block_given')).call(_a, sexp, true)
          };
        };
        return ((_a = this).$with_temp || $mm('with_temp')).call(_a, (TMP_44 = function(tmp) {

          var self = TMP_44._s || this, _a, _b;
          if (tmp == null) tmp = nil;

          return ((_a = "(%s = %s) === false || %s === nil")['$%'] || $mm('%')).call(_a, [tmp, ((_b = self).$process || $mm('process')).call(_b, sexp, "expr"), tmp])
        }, TMP_44._s = this, TMP_44));
      };

      def.$process_and = function(sexp, level) {
        var lhs = nil, rhs = nil, t = nil, tmp = nil, _a, _b, TMP_45;
        lhs = ((_a = sexp)['$[]'] || $mm('[]')).call(_a, 0);
        rhs = ((_a = sexp)['$[]'] || $mm('[]')).call(_a, 1);
        t = nil;
        tmp = ((_a = this.scope).$new_temp || $mm('new_temp')).call(_a);
        if ((_a = t = ((_b = this).$js_truthy_optimize || $mm('js_truthy_optimize')).call(_b, lhs)) !== false && _a !== nil) {
          return ((_a = ("((" + (tmp) + " = " + (t) + ") ? " + (((_b = this).$process || $mm('process')).call(_b, rhs, "expr")) + " : " + (tmp) + ")")).$tap || $mm('tap')).call(_a, (TMP_45 = function() {

            var self = TMP_45._s || this, _a;
            if (self.scope == null) self.scope = nil;

            
            return ((_a = self.scope).$queue_temp || $mm('queue_temp')).call(_a, tmp)
          }, TMP_45._s = this, TMP_45))
        };
        ((_a = this.scope).$queue_temp || $mm('queue_temp')).call(_a, tmp);
        return ((_a = "(%s = %s, %s !== false && %s !== nil ? %s : %s)")['$%'] || $mm('%')).call(_a, [tmp, ((_b = this).$process || $mm('process')).call(_b, lhs, "expr"), tmp, tmp, ((_b = this).$process || $mm('process')).call(_b, rhs, "expr"), tmp]);
      };

      def.$process_or = function(sexp, level) {
        var lhs = nil, rhs = nil, t = nil, _a, TMP_46;
        lhs = ((_a = sexp)['$[]'] || $mm('[]')).call(_a, 0);
        rhs = ((_a = sexp)['$[]'] || $mm('[]')).call(_a, 1);
        t = nil;
        return ((_a = this).$with_temp || $mm('with_temp')).call(_a, (TMP_46 = function(tmp) {

          var self = TMP_46._s || this, _a, _b;
          if (tmp == null) tmp = nil;

          return ((_a = "((%s = %s), %s !== false && %s !== nil ? %s : %s)")['$%'] || $mm('%')).call(_a, [tmp, ((_b = self).$process || $mm('process')).call(_b, lhs, "expr"), tmp, tmp, tmp, ((_b = self).$process || $mm('process')).call(_b, rhs, "expr")])
        }, TMP_46._s = this, TMP_46));
      };

      def.$process_yield = function(sexp, level) {
        var call = nil, _a, TMP_47;
        call = ((_a = this).$handle_yield_call || $mm('handle_yield_call')).call(_a, sexp, level);
        if (((_a = level)['$=='] || $mm('==')).call(_a, "stmt")) {
          return "if (" + (call) + " === __breaker) return __breaker.$v"
          } else {
          return ((_a = this).$with_temp || $mm('with_temp')).call(_a, (TMP_47 = function(tmp) {

            var self = TMP_47._s || this;
            if (tmp == null) tmp = nil;

            return "(((" + (tmp) + " = " + (call) + ") === __breaker) ? __breaker.$v : " + (tmp) + ")"
          }, TMP_47._s = this, TMP_47))
        };
      };

      def.$process_yasgn = function(sexp, level) {
        var call = nil, _a, _b, _c, _d;
        call = ((_a = this).$handle_yield_call || $mm('handle_yield_call')).call(_a, ((_b = this).$s || $mm('s')).apply(_b, [].concat(((_c = ((_d = sexp)['$[]'] || $mm('[]')).call(_d, 1))['$[]'] || $mm('[]')).call(_c, __range(1, -1, false)))), "stmt");
        return ((_a = "if ((%s = %s) === __breaker) return __breaker.$v")['$%'] || $mm('%')).call(_a, [((_b = sexp)['$[]'] || $mm('[]')).call(_b, 0), call]);
      };

      def.$process_returnable_yield = function(sexp, level) {
        var call = nil, _a, TMP_48;
        call = ((_a = this).$handle_yield_call || $mm('handle_yield_call')).call(_a, sexp, level);
        return ((_a = this).$with_temp || $mm('with_temp')).call(_a, (TMP_48 = function(tmp) {

          var self = TMP_48._s || this, _a;
          if (tmp == null) tmp = nil;

          return ((_a = "return %s = %s, %s === __breaker ? %s : %s")['$%'] || $mm('%')).call(_a, [tmp, call, tmp, tmp, tmp])
        }, TMP_48._s = this, TMP_48));
      };

      def.$handle_yield_call = function(sexp, level) {
        var splat = nil, args = nil, y = nil, _a, TMP_49, _b;
        ((_a = this.scope)['$uses_block!'] || $mm('uses_block!')).call(_a);
        splat = ((_a = sexp)['$any?'] || $mm('any?')).call(_a, (TMP_49 = function(s) {

          var self = TMP_49._s || this, _a, _b;
          if (s == null) s = nil;

          return ((_a = ((_b = s).$first || $mm('first')).call(_b))['$=='] || $mm('==')).call(_a, "splat")
        }, TMP_49._s = this, TMP_49));
        args = ((_a = this).$process_arglist || $mm('process_arglist')).call(_a, sexp, level);
        y = ((_a = ((_b = this.scope).$block_name || $mm('block_name')).call(_b)), _a !== false && _a !== nil ? _a : "__yield");
        if (splat !== false && splat !== nil) {
          return "" + (y) + ".apply(null, " + (args) + ")"
          } else {
          return "" + (y) + "(" + (args) + ")"
        };
      };

      def.$process_break = function(exp, level) {
        var val = nil, _a, _b;
        val = (function() { if ((_a = ((_b = exp)['$empty?'] || $mm('empty?')).call(_b)) !== false && _a !== nil) {
          return "nil"
          } else {
          return ((_a = this).$process || $mm('process')).call(_a, ((_b = exp).$shift || $mm('shift')).call(_b), "expr")
        }; return nil; }).call(this);
        if ((_a = ((_b = this)['$in_while?'] || $mm('in_while?')).call(_b)) !== false && _a !== nil) {
          if ((_a = ((_b = this.while_loop)['$[]'] || $mm('[]')).call(_b, "closure")) !== false && _a !== nil) {
            return "return " + (val) + ";"
            } else {
            return "break;"
          }
          } else {
          if ((_a = ((_b = this.scope)['$iter?'] || $mm('iter?')).call(_b)) !== false && _a !== nil) {
            if ((_a = ((_b = level)['$=='] || $mm('==')).call(_b, "stmt")) === false || _a === nil) {
              ((_a = this).$error || $mm('error')).call(_a, "break must be used as a statement")
            };
            return "return (__breaker.$v = " + (val) + ", __breaker)";
            } else {
            return ((_a = this).$error || $mm('error')).call(_a, "cannot use break outside of iter/while")
          }
        };
      };

      def.$process_case = function(exp, level) {
        var code = nil, expr = nil, returnable = nil, done_else = nil, wen = nil, _a, _b, _c, _d, _e;
        code = [];
        ((_a = this.scope).$add_local || $mm('add_local')).call(_a, "$case");
        expr = ((_a = this).$process || $mm('process')).call(_a, ((_b = exp).$shift || $mm('shift')).call(_b), "expr");
        returnable = (_a = ((_b = level)['$=='] || $mm('==')).call(_b, "stmt"), (_a === nil || _a === false));
        done_else = false;
        while (!((_b = ((_c = exp)['$empty?'] || $mm('empty?')).call(_c)) !== false && _b !== nil)) {wen = ((_b = exp).$shift || $mm('shift')).call(_b);
        if ((_b = ((_c = wen !== false && wen !== nil) ? ((_d = ((_e = wen).$first || $mm('first')).call(_e))['$=='] || $mm('==')).call(_d, "when") : _c)) !== false && _b !== nil) {
          if (returnable !== false && returnable !== nil) {
            ((_b = this).$returns || $mm('returns')).call(_b, wen)
          };
          wen = ((_b = this).$process || $mm('process')).call(_b, wen, "stmt");
          if ((_b = ((_c = code)['$empty?'] || $mm('empty?')).call(_c)) === false || _b === nil) {
            wen = "else " + (wen)
          };
          ((_b = code)['$<<'] || $mm('<<')).call(_b, wen);
          } else {
          if (wen !== false && wen !== nil) {
            done_else = true;
            if (returnable !== false && returnable !== nil) {
              wen = ((_b = this).$returns || $mm('returns')).call(_b, wen)
            };
            ((_b = code)['$<<'] || $mm('<<')).call(_b, "else {" + (((_c = this).$process || $mm('process')).call(_c, wen, "stmt")) + "}");
          }
        };};
        if ((_a = ((_b = returnable !== false && returnable !== nil) ? (_c = done_else, (_c === nil || _c === false)) : _b)) !== false && _a !== nil) {
          ((_a = code)['$<<'] || $mm('<<')).call(_a, "else {return nil}")
        };
        code = "$case = " + (expr) + ";" + (((_a = code).$join || $mm('join')).call(_a, this.space));
        if (returnable !== false && returnable !== nil) {
          code = "(function() { " + (code) + " }).call(" + (((_a = this).$current_self || $mm('current_self')).call(_a)) + ")"
        };
        return code;
      };

      def.$process_when = function(exp, level) {
        var arg = nil, body = nil, test = nil, a = nil, call = nil, splt = nil, _a, _b, _c, _d;
        arg = ((_a = ((_b = exp).$shift || $mm('shift')).call(_b))['$[]'] || $mm('[]')).call(_a, __range(1, -1, false));
        body = ((_a = exp).$shift || $mm('shift')).call(_a);
        if (body !== false && body !== nil) {
          body = ((_a = this).$process || $mm('process')).call(_a, body, level)
        };
        test = [];
        while (!((_b = ((_c = arg)['$empty?'] || $mm('empty?')).call(_c)) !== false && _b !== nil)) {a = ((_b = arg).$shift || $mm('shift')).call(_b);
        if (((_b = ((_c = a).$first || $mm('first')).call(_c))['$=='] || $mm('==')).call(_b, "splat")) {
          call = ((_b = this).$s || $mm('s')).call(_b, "call", ((_c = this).$s || $mm('s')).call(_c, "js_tmp", "$splt[i]"), "===", ((_c = this).$s || $mm('s')).call(_c, "arglist", ((_d = this).$s || $mm('s')).call(_d, "js_tmp", "$case")));
          splt = "(function($splt) {for(var i = 0; i < $splt.length; i++) {";
          splt = ((_b = splt)['$+'] || $mm('+')).call(_b, "if (" + (((_c = this).$process || $mm('process')).call(_c, call, "expr")) + ") { return true; }");
          splt = ((_b = splt)['$+'] || $mm('+')).call(_b, "} return false; }).call(" + (((_c = this).$current_self || $mm('current_self')).call(_c)) + ", " + (((_c = this).$process || $mm('process')).call(_c, ((_d = a)['$[]'] || $mm('[]')).call(_d, 1), "expr")) + ")");
          ((_b = test)['$<<'] || $mm('<<')).call(_b, splt);
          } else {
          call = ((_b = this).$s || $mm('s')).call(_b, "call", a, "===", ((_c = this).$s || $mm('s')).call(_c, "arglist", ((_d = this).$s || $mm('s')).call(_d, "js_tmp", "$case")));
          call = ((_b = this).$process || $mm('process')).call(_b, call, "expr");
          ((_b = test)['$<<'] || $mm('<<')).call(_b, call);
        };};
        return ((_a = "if (%s) {%s%s%s}")['$%'] || $mm('%')).call(_a, [((_b = test).$join || $mm('join')).call(_b, " || "), this.space, body, this.space]);
      };

      def.$process_match3 = function(sexp, level) {
        var lhs = nil, rhs = nil, call = nil, _a, _b;
        lhs = ((_a = sexp)['$[]'] || $mm('[]')).call(_a, 0);
        rhs = ((_a = sexp)['$[]'] || $mm('[]')).call(_a, 1);
        call = ((_a = this).$s || $mm('s')).call(_a, "call", lhs, "=~", ((_b = this).$s || $mm('s')).call(_b, "arglist", rhs));
        return ((_a = this).$process || $mm('process')).call(_a, call, level);
      };

      def.$process_cvar = function(exp, level) {
        var TMP_50, _a;
        return ((_a = this).$with_temp || $mm('with_temp')).call(_a, (TMP_50 = function(tmp) {

          var self = TMP_50._s || this, _a, _b, _c, _d;
          if (tmp == null) tmp = nil;

          return ((_a = "((%s = Opal.cvars[%s]) == null ? nil : %s)")['$%'] || $mm('%')).call(_a, [tmp, ((_b = ((_c = ((_d = exp).$shift || $mm('shift')).call(_d)).$to_s || $mm('to_s')).call(_c)).$inspect || $mm('inspect')).call(_b), tmp])
        }, TMP_50._s = this, TMP_50));
      };

      def.$process_cvasgn = function(exp, level) {
        var _a, _b, _c;
        return "(Opal.cvars[" + (((_a = ((_b = ((_c = exp).$shift || $mm('shift')).call(_c)).$to_s || $mm('to_s')).call(_b)).$inspect || $mm('inspect')).call(_a)) + "] = " + (((_a = this).$process || $mm('process')).call(_a, ((_b = exp).$shift || $mm('shift')).call(_b), "expr")) + ")";
      };

      def.$process_cvdecl = function(exp, level) {
        var _a, _b, _c;
        return "(Opal.cvars[" + (((_a = ((_b = ((_c = exp).$shift || $mm('shift')).call(_c)).$to_s || $mm('to_s')).call(_b)).$inspect || $mm('inspect')).call(_a)) + "] = " + (((_a = this).$process || $mm('process')).call(_a, ((_b = exp).$shift || $mm('shift')).call(_b), "expr")) + ")";
      };

      def.$process_colon2 = function(sexp, level) {
        var base = nil, cname = nil, _a, _b, TMP_51;
        base = ((_a = sexp)['$[]'] || $mm('[]')).call(_a, 0);
        cname = ((_a = ((_b = sexp)['$[]'] || $mm('[]')).call(_b, 1)).$to_s || $mm('to_s')).call(_a);
        return ((_a = this).$with_temp || $mm('with_temp')).call(_a, (TMP_51 = function(t) {

          var self = TMP_51._s || this, _a;
          if (t == null) t = nil;

          base = ((_a = self).$process || $mm('process')).call(_a, base, "expr");
          return "((" + (t) + " = (" + (base) + ")._scope." + (cname) + ") == null ? __opal.cm(" + (((_a = cname).$inspect || $mm('inspect')).call(_a)) + ") : " + (t) + ")";
        }, TMP_51._s = this, TMP_51));
      };

      def.$process_colon3 = function(exp, level) {
        var TMP_52, _a;
        return ((_a = this).$with_temp || $mm('with_temp')).call(_a, (TMP_52 = function(t) {

          var cname = nil, self = TMP_52._s || this, _a, _b;
          if (t == null) t = nil;

          cname = ((_a = ((_b = exp).$shift || $mm('shift')).call(_b)).$to_s || $mm('to_s')).call(_a);
          return "((" + (t) + " = __opal.Object._scope." + (cname) + ") == null ? __opal.cm(" + (((_a = cname).$inspect || $mm('inspect')).call(_a)) + ") : " + (t) + ")";
        }, TMP_52._s = this, TMP_52));
      };

      def.$process_super = function(sexp, level) {
        var args = nil, _a, _b, _c, _d;
        args = [];
        while (!((_b = ((_c = sexp)['$empty?'] || $mm('empty?')).call(_c)) !== false && _b !== nil)) {((_b = args)['$<<'] || $mm('<<')).call(_b, ((_c = this).$process || $mm('process')).call(_c, ((_d = sexp).$shift || $mm('shift')).call(_d), "expr"))};
        return ((_a = this).$js_super || $mm('js_super')).call(_a, "[" + (((_b = args).$join || $mm('join')).call(_b, ", ")) + "]");
      };

      def.$process_zsuper = function(exp, level) {
        var _a;
        return ((_a = this).$js_super || $mm('js_super')).call(_a, "__slice.call(arguments)");
      };

      def.$js_super = function(args) {
        var mid = nil, sid = nil, identity = nil, cls_name = nil, jsid = nil, chain = nil, defn = nil, trys = nil, _a, _b, _c, TMP_53;
        if ((_a = ((_b = this.scope)['$def_in_class?'] || $mm('def_in_class?')).call(_b)) !== false && _a !== nil) {
          mid = ((_a = ((_b = this.scope).$mid || $mm('mid')).call(_b)).$to_s || $mm('to_s')).call(_a);
          sid = "super_" + (((_a = this).$unique_temp || $mm('unique_temp')).call(_a));
          ((_a = this.scope)['$uses_super='] || $mm('uses_super=')).call(_a, sid);
          return "" + (sid) + ".apply(" + (((_a = this).$current_self || $mm('current_self')).call(_a)) + ", " + (args) + ")";
          } else {
          if (((_a = ((_b = this.scope).$type || $mm('type')).call(_b))['$=='] || $mm('==')).call(_a, "def")) {
            identity = ((_a = this.scope)['$identify!'] || $mm('identify!')).call(_a);
            cls_name = ((_a = ((_b = this.scope).$parent || $mm('parent')).call(_b)).$name || $mm('name')).call(_a);
            jsid = ((_a = this).$mid_to_jsid || $mm('mid_to_jsid')).call(_a, ((_b = ((_c = this.scope).$mid || $mm('mid')).call(_c)).$to_s || $mm('to_s')).call(_b));
            if ((_a = ((_b = this.scope).$defs || $mm('defs')).call(_b)) !== false && _a !== nil) {
              return ((_a = "%s._super%s.apply(this, %s)")['$%'] || $mm('%')).call(_a, [cls_name, jsid, args])
              } else {
              return ((_a = ("" + (((_b = this).$current_self || $mm('current_self')).call(_b)) + "._klass._super.prototype%s.apply(" + (((_b = this).$current_self || $mm('current_self')).call(_b)) + ", %s)"))['$%'] || $mm('%')).call(_a, [jsid, args])
            };
            } else {
            if (((_a = ((_b = this.scope).$type || $mm('type')).call(_b))['$=='] || $mm('==')).call(_a, "iter")) {
              ((_a = ((_b = this.scope).$get_super_chain || $mm('get_super_chain')).call(_b))._isArray ? _a : (_a = [_a])), chain = (_a[0] == null ? nil : _a[0]), defn = (_a[1] == null ? nil : _a[1]), mid = (_a[2] == null ? nil : _a[2]);
              trys = ((_a = ((_b = chain).$map || $mm('map')).call(_b, (TMP_53 = function(c) {

                var self = TMP_53._s || this;
                if (c == null) c = nil;

                return "" + (c) + "._sup"
              }, TMP_53._s = this, TMP_53))).$join || $mm('join')).call(_a, " || ");
              return "(" + (trys) + " || " + (((_a = this).$current_self || $mm('current_self')).call(_a)) + "._klass._super.prototype[" + (mid) + "]).apply(" + (((_a = this).$current_self || $mm('current_self')).call(_a)) + ", " + (args) + ")";
              } else {
              return ((_a = this).$raise || $mm('raise')).call(_a, "Cannot call super() from outside a method block")
            }
          }
        };
      };

      def.$process_op_asgn_or = function(exp, level) {
        var _a, _b, _c;
        return ((_a = this).$process || $mm('process')).call(_a, ((_b = this).$s || $mm('s')).call(_b, "or", ((_c = exp).$shift || $mm('shift')).call(_c), ((_c = exp).$shift || $mm('shift')).call(_c)), "expr");
      };

      def.$process_op_asgn1 = function(sexp, level) {
        
        return "'FIXME(op_asgn1)'";
      };

      def.$process_op_asgn2 = function(exp, level) {
        var lhs = nil, mid = nil, op = nil, rhs = nil, _a, _b, _c, TMP_54;
        lhs = ((_a = this).$process || $mm('process')).call(_a, ((_b = exp).$shift || $mm('shift')).call(_b), "expr");
        mid = ((_a = ((_b = ((_c = exp).$shift || $mm('shift')).call(_c)).$to_s || $mm('to_s')).call(_b))['$[]'] || $mm('[]')).call(_a, __range(0, -2, false));
        op = ((_a = exp).$shift || $mm('shift')).call(_a);
        rhs = ((_a = exp).$shift || $mm('shift')).call(_a);
        if (((_a = ((_b = op).$to_s || $mm('to_s')).call(_b))['$=='] || $mm('==')).call(_a, "||")) {
          return ((_a = this).$raise || $mm('raise')).call(_a, "op_asgn2 for ||")
          } else {
          return ((_a = this).$with_temp || $mm('with_temp')).call(_a, (TMP_54 = function(temp) {

            var getr = nil, oper = nil, asgn = nil, self = TMP_54._s || this, _a, _b;
            if (temp == null) temp = nil;

            getr = ((_a = self).$s || $mm('s')).call(_a, "call", ((_b = self).$s || $mm('s')).call(_b, "js_tmp", temp), mid, ((_b = self).$s || $mm('s')).call(_b, "arglist"));
            oper = ((_a = self).$s || $mm('s')).call(_a, "call", getr, op, ((_b = self).$s || $mm('s')).call(_b, "arglist", rhs));
            asgn = ((_a = self).$s || $mm('s')).call(_a, "call", ((_b = self).$s || $mm('s')).call(_b, "js_tmp", temp), "" + (mid) + "=", ((_b = self).$s || $mm('s')).call(_b, "arglist", oper));
            return "(" + (temp) + " = " + (lhs) + ", " + (((_a = self).$process || $mm('process')).call(_a, asgn, "expr")) + ")";
          }, TMP_54._s = this, TMP_54))
        };
      };

      def.$process_ensure = function(exp, level) {
        var begn = nil, retn = nil, body = nil, ensr = nil, res = nil, _a, _b, _c;
        begn = ((_a = exp).$shift || $mm('shift')).call(_a);
        if ((_a = ((_b = ((_c = level)['$=='] || $mm('==')).call(_c, "recv")), _b !== false && _b !== nil ? _b : ((_c = level)['$=='] || $mm('==')).call(_c, "expr"))) !== false && _a !== nil) {
          retn = true;
          begn = ((_a = this).$returns || $mm('returns')).call(_a, begn);
        };
        body = ((_a = this).$process || $mm('process')).call(_a, begn, level);
        ensr = ((_a = ((_b = exp).$shift || $mm('shift')).call(_b)), _a !== false && _a !== nil ? _a : ((_b = this).$s || $mm('s')).call(_b, "nil"));
        ensr = ((_a = this).$process || $mm('process')).call(_a, ensr, level);
        if ((_a = ((_b = body)['$=~'] || $mm('=~')).call(_b, /^try \{/)) === false || _a === nil) {
          body = "try {\n" + (body) + "}"
        };
        res = "" + (body) + (this.space) + "finally {" + (this.space) + (ensr) + "}";
        if (retn !== false && retn !== nil) {
          res = "(function() { " + (res) + "; }).call(" + (((_a = this).$current_self || $mm('current_self')).call(_a)) + ")"
        };
        return res;
      };

      def.$process_rescue = function(exp, level) {
        var body = nil, parts = nil, part = nil, code = nil, _a, _b, _c, TMP_55, TMP_56, TMP_57;
        body = (function() { if (((_a = ((_b = ((_c = exp).$first || $mm('first')).call(_c)).$first || $mm('first')).call(_b))['$=='] || $mm('==')).call(_a, "resbody")) {
          return ((_a = this).$s || $mm('s')).call(_a, "nil")
          } else {
          return ((_a = exp).$shift || $mm('shift')).call(_a)
        }; return nil; }).call(this);
        body = ((_a = this).$indent || $mm('indent')).call(_a, (TMP_55 = function() {

          var self = TMP_55._s || this, _a;
          
          return ((_a = self).$process || $mm('process')).call(_a, body, level)
        }, TMP_55._s = this, TMP_55));
        parts = [];
        while (!((_b = ((_c = exp)['$empty?'] || $mm('empty?')).call(_c)) !== false && _b !== nil)) {part = ((_b = this).$indent || $mm('indent')).call(_b, (TMP_56 = function() {

          var self = TMP_56._s || this, _a, _b;
          
          return ((_a = self).$process || $mm('process')).call(_a, ((_b = exp).$shift || $mm('shift')).call(_b), level)
        }, TMP_56._s = this, TMP_56));
        if ((_b = ((_c = parts)['$empty?'] || $mm('empty?')).call(_c)) === false || _b === nil) {
          part = (_b = "else ", _c = part, typeof(_b) === 'number' ? _b + _c : _b['$+'](_c))
        };
        ((_b = parts)['$<<'] || $mm('<<')).call(_b, part);};
        ((_a = parts)['$<<'] || $mm('<<')).call(_a, ((_b = this).$indent || $mm('indent')).call(_b, (TMP_57 = function() {

          var self = TMP_57._s || this;
          
          return "else { throw $err; }"
        }, TMP_57._s = this, TMP_57)));
        code = "try {" + (this.space) + (((_a = __scope.INDENT) == null ? __opal.cm("INDENT") : _a)) + (body) + (this.space) + "} catch ($err) {" + (this.space) + (((_a = parts).$join || $mm('join')).call(_a, this.space)) + (this.space) + "}";
        if (((_a = level)['$=='] || $mm('==')).call(_a, "expr")) {
          code = "(function() { " + (code) + " }).call(" + (((_a = this).$current_self || $mm('current_self')).call(_a)) + ")"
        };
        return code;
      };

      def.$process_resbody = function(exp, level) {
        var args = nil, body = nil, types = nil, err = nil, val = nil, _a, _b, _c, TMP_58, _d;
        args = ((_a = exp)['$[]'] || $mm('[]')).call(_a, 0);
        body = ((_a = exp)['$[]'] || $mm('[]')).call(_a, 1);
        body = ((_a = this).$process || $mm('process')).call(_a, ((_b = body), _b !== false && _b !== nil ? _b : ((_c = this).$s || $mm('s')).call(_c, "nil")), level);
        types = ((_a = args)['$[]'] || $mm('[]')).call(_a, __range(1, -2, false));
        err = ((_a = ((_b = types).$map || $mm('map')).call(_b, (TMP_58 = function(t) {

          var call = nil, a = nil, self = TMP_58._s || this, _a, _b, _c;
          if (t == null) t = nil;

          call = ((_a = self).$s || $mm('s')).call(_a, "call", t, "===", ((_b = self).$s || $mm('s')).call(_b, "arglist", ((_c = self).$s || $mm('s')).call(_c, "js_tmp", "$err")));
          a = ((_a = self).$process || $mm('process')).call(_a, call, "expr");
          return a;
        }, TMP_58._s = this, TMP_58))).$join || $mm('join')).call(_a, ", ");
        if ((_a = ((_b = err)['$empty?'] || $mm('empty?')).call(_b)) !== false && _a !== nil) {
          err = "true"
        };
        if ((_a = (_b = ((_b = ((_c = __scope.Array) == null ? __opal.cm("Array") : _c))['$==='] || $mm('===')).call(_b, ((_c = args).$last || $mm('last')).call(_c)), _b !== false && _b !== nil ? ((_b = ["lasgn", "iasgn"])['$include?'] || $mm('include?')).call(_b, ((_c = ((_d = args).$last || $mm('last')).call(_d)).$first || $mm('first')).call(_c)) : _b)) !== false && _a !== nil) {
          val = ((_a = args).$last || $mm('last')).call(_a);
          ((_a = val)['$[]='] || $mm('[]=')).call(_a, 2, ((_b = this).$s || $mm('s')).call(_b, "js_tmp", "$err"));
          val = (_a = ((_c = this).$process || $mm('process')).call(_c, val, "expr"), _b = ";", typeof(_a) === 'number' ? _a + _b : _a['$+'](_b));
        };
        return "if (" + (err) + ") {" + (this.space) + (val) + (body) + "}";
      };

      def.$process_begin = function(exp, level) {
        var _a, _b;
        return ((_a = this).$process || $mm('process')).call(_a, ((_b = exp)['$[]'] || $mm('[]')).call(_b, 0), level);
      };

      def.$process_next = function(exp, level) {
        var val = nil, _a, _b;
        val = (function() { if ((_a = ((_b = exp)['$empty?'] || $mm('empty?')).call(_b)) !== false && _a !== nil) {
          return "nil"
          } else {
          return ((_a = this).$process || $mm('process')).call(_a, ((_b = exp).$shift || $mm('shift')).call(_b), "expr")
        }; return nil; }).call(this);
        if ((_a = ((_b = this)['$in_while?'] || $mm('in_while?')).call(_b)) !== false && _a !== nil) {
          return "continue;"
          } else {
          return "return " + (val) + ";"
        };
      };

      def.$process_redo = function(exp, level) {
        var _a, _b;
        if ((_a = ((_b = this)['$in_while?'] || $mm('in_while?')).call(_b)) !== false && _a !== nil) {
          ((_a = this.while_loop)['$[]='] || $mm('[]=')).call(_a, "use_redo", true);
          return "" + (((_a = this.while_loop)['$[]'] || $mm('[]')).call(_a, "redo_var")) + " = true";
          } else {
          return "REDO()"
        };
      };

      return nil;
    })(Opal, null)
    
  })(self);
})(Opal);

  (function(__opal) {
  var self = __opal.top, __scope = __opal, nil = __opal.nil, $mm = __opal.mm, __breaker = __opal.breaker, __slice = __opal.slice, __module = __opal.module, __klass = __opal.klass, __hash2 = __opal.hash2;
  return (function(__base){
    function Opal() {};
    Opal = __module(__base, "Opal", Opal);
    var def = Opal.prototype, __scope = Opal._scope;

    (function(__base, __super){
      function Parser() {};
      Parser = __klass(__base, __super, "Parser", Parser);

      var def = Parser.prototype, __scope = Parser._scope;

      return (function(__base, __super){
        function Scope() {};
        Scope = __klass(__base, __super, "Scope", Scope);

        var def = Scope.prototype, __scope = Scope._scope;
        def.parent = def.name = def.block_name = def.scope_name = def.ivars = def.type = def.defines_defn = def.defines_defs = def.mid = def.defs = def.methods = def.uses_super = def.locals = def.temps = def.parser = def.proto_ivars = def.args = def.queue = def.unique = def.while_stack = def.identity = def.uses_block = nil;

        def.$parent = function() {
          
          return this.parent
        }, 
        def['$parent='] = function(val) {
          
          return this.parent = val
        }, nil;

        def.$name = function() {
          
          return this.name
        }, 
        def['$name='] = function(val) {
          
          return this.name = val
        }, nil;

        def.$block_name = function() {
          
          return this.block_name
        }, 
        def['$block_name='] = function(val) {
          
          return this.block_name = val
        }, nil;

        def.$scope_name = function() {
          
          return this.scope_name
        }, nil;

        def.$ivars = function() {
          
          return this.ivars
        }, nil;

        def.$type = function() {
          
          return this.type
        }, nil;

        def.$defines_defn = function() {
          
          return this.defines_defn
        }, 
        def['$defines_defn='] = function(val) {
          
          return this.defines_defn = val
        }, nil;

        def.$defines_defs = function() {
          
          return this.defines_defs
        }, 
        def['$defines_defs='] = function(val) {
          
          return this.defines_defs = val
        }, nil;

        def.$mid = function() {
          
          return this.mid
        }, 
        def['$mid='] = function(val) {
          
          return this.mid = val
        }, nil;

        def.$defs = function() {
          
          return this.defs
        }, 
        def['$defs='] = function(val) {
          
          return this.defs = val
        }, nil;

        def.$methods = function() {
          
          return this.methods
        }, nil;

        def.$uses_super = function() {
          
          return this.uses_super
        }, 
        def['$uses_super='] = function(val) {
          
          return this.uses_super = val
        }, nil;

        def.$initialize = function(type, parser) {
          
          this.parser = parser;
          this.type = type;
          this.locals = [];
          this.temps = [];
          this.args = [];
          this.ivars = [];
          this.parent = nil;
          this.queue = [];
          this.unique = "a";
          this.while_stack = [];
          this.defines_defs = false;
          this.defines_defn = false;
          this.methods = [];
          this.uses_block = false;
          return this.proto_ivars = [];
        };

        def['$class_scope?'] = function() {
          var _a, _b;
          return ((_a = ((_b = this.type)['$=='] || $mm('==')).call(_b, "class")), _a !== false && _a !== nil ? _a : ((_b = this.type)['$=='] || $mm('==')).call(_b, "module"));
        };

        def['$class?'] = function() {
          var _a;
          return ((_a = this.type)['$=='] || $mm('==')).call(_a, "class");
        };

        def['$module?'] = function() {
          var _a;
          return ((_a = this.type)['$=='] || $mm('==')).call(_a, "module");
        };

        def['$top?'] = function() {
          var _a;
          return ((_a = this.type)['$=='] || $mm('==')).call(_a, "top");
        };

        def['$iter?'] = function() {
          var _a;
          return ((_a = this.type)['$=='] || $mm('==')).call(_a, "iter");
        };

        def['$def_in_class?'] = function() {
          var _a;
          return (_a = (_a = (_a = (_a = this.defs, (_a === nil || _a === false)), _a !== false && _a !== nil ? ((_a = this.type)['$=='] || $mm('==')).call(_a, "def") : _a), _a !== false && _a !== nil ? this.parent : _a), _a !== false && _a !== nil ? ((_a = this.parent)['$class?'] || $mm('class?')).call(_a) : _a);
        };

        def.$proto = function() {
          
          return "def";
        };

        def['$should_donate?'] = function() {
          var _a, _b, _c;
          return ((_a = ((_b = this.type)['$=='] || $mm('==')).call(_b, "module")), _a !== false && _a !== nil ? _a : ((_b = ((_c = this.name).$to_s || $mm('to_s')).call(_c))['$=='] || $mm('==')).call(_b, "Object"));
        };

        def.$to_vars = function() {
          var vars = nil, current_self = nil, iv = nil, indent = nil, res = nil, str = nil, pvars = nil, TMP_1, _a, TMP_2, _b, _c, TMP_3;
          vars = ((_a = this.locals).$map || $mm('map')).call(_a, (TMP_1 = function(l) {

            var self = TMP_1._s || this;
            if (l == null) l = nil;

            return "" + (l) + " = nil"
          }, TMP_1._s = this, TMP_1));
          ((_a = vars).$push || $mm('push')).apply(_a, [].concat(this.temps));
          current_self = ((_a = this.parser).$current_self || $mm('current_self')).call(_a);
          iv = ((_a = ((_b = this).$ivars || $mm('ivars')).call(_b)).$map || $mm('map')).call(_a, (TMP_2 = function(ivar) {

            var self = TMP_2._s || this;
            if (ivar == null) ivar = nil;

            return "if (" + (current_self) + (ivar) + " == null) " + (current_self) + (ivar) + " = nil;\n"
          }, TMP_2._s = this, TMP_2));
          indent = ((_a = this.parser).$parser_indent || $mm('parser_indent')).call(_a);
          res = (function() { if ((_a = ((_b = vars)['$empty?'] || $mm('empty?')).call(_b)) !== false && _a !== nil) {
            return ""
            } else {
            return "var " + (((_a = vars).$join || $mm('join')).call(_a, ", ")) + ";"
          }; return nil; }).call(this);
          str = (function() { if ((_a = ((_b = ((_c = this).$ivars || $mm('ivars')).call(_c))['$empty?'] || $mm('empty?')).call(_b)) !== false && _a !== nil) {
            return res
            } else {
            return "" + (res) + "\n" + (indent) + (((_a = iv).$join || $mm('join')).call(_a, indent))
          }; return nil; }).call(this);
          if ((_a = (_b = ((_b = this)['$class?'] || $mm('class?')).call(_b), _b !== false && _b !== nil ? (_b = ((_c = this.proto_ivars)['$empty?'] || $mm('empty?')).call(_c), (_b === nil || _b === false)) : _b)) !== false && _a !== nil) {
            pvars = ((_a = ((_b = this.proto_ivars).$map || $mm('map')).call(_b, (TMP_3 = function(i) {

              var self = TMP_3._s || this, _a;
              if (i == null) i = nil;

              return "" + (((_a = self).$proto || $mm('proto')).call(_a)) + (i)
            }, TMP_3._s = this, TMP_3))).$join || $mm('join')).call(_a, " = ");
            return ((_a = "%s\n%s%s = nil;")['$%'] || $mm('%')).call(_a, [str, indent, pvars]);
            } else {
            return str
          };
        };

        def.$to_donate_methods = function() {
          var _a, _b, _c;
          if ((_a = (_b = ((_b = this)['$should_donate?'] || $mm('should_donate?')).call(_b), _b !== false && _b !== nil ? (_b = ((_c = this.methods)['$empty?'] || $mm('empty?')).call(_c), (_b === nil || _b === false)) : _b)) !== false && _a !== nil) {
            return ((_a = ("%s;" + (this.name) + "._donate([%s]);"))['$%'] || $mm('%')).call(_a, [((_b = this.parser).$parser_indent || $mm('parser_indent')).call(_b), ((_b = ((_c = this.methods).$map || $mm('map')).call(_c, ((_c = "inspect").$to_proc || $mm('to_proc')).call(_c))).$join || $mm('join')).call(_b, ", ")])
            } else {
            return ""
          };
        };

        def.$add_ivar = function(ivar) {
          var _a, _b;
          if ((_a = ((_b = this)['$def_in_class?'] || $mm('def_in_class?')).call(_b)) !== false && _a !== nil) {
            return ((_a = this.parent).$add_proto_ivar || $mm('add_proto_ivar')).call(_a, ivar)
            } else {
            if ((_a = ((_b = this.ivars)['$include?'] || $mm('include?')).call(_b, ivar)) !== false && _a !== nil) {
              return nil
              } else {
              return ((_a = this.ivars)['$<<'] || $mm('<<')).call(_a, ivar)
            }
          };
        };

        def.$add_proto_ivar = function(ivar) {
          var _a, _b;
          if ((_a = ((_b = this.proto_ivars)['$include?'] || $mm('include?')).call(_b, ivar)) !== false && _a !== nil) {
            return nil
            } else {
            return ((_a = this.proto_ivars)['$<<'] || $mm('<<')).call(_a, ivar)
          };
        };

        def.$add_arg = function(arg) {
          var _a, _b;
          if ((_a = ((_b = this.args)['$include?'] || $mm('include?')).call(_b, arg)) !== false && _a !== nil) {
            return nil
            } else {
            return ((_a = this.args)['$<<'] || $mm('<<')).call(_a, arg)
          };
        };

        def.$add_local = function(local) {
          var _a, _b;
          if ((_a = ((_b = this)['$has_local?'] || $mm('has_local?')).call(_b, local)) !== false && _a !== nil) {
            return nil
          };
          return ((_a = this.locals)['$<<'] || $mm('<<')).call(_a, local);
        };

        def['$has_local?'] = function(local) {
          var _a, _b, _c;
          if ((_a = ((_b = ((_c = this.locals)['$include?'] || $mm('include?')).call(_c, local)), _b !== false && _b !== nil ? _b : ((_c = this.args)['$include?'] || $mm('include?')).call(_c, local))) !== false && _a !== nil) {
            return true
          };
          if ((_a = (_b = this.parent, _b !== false && _b !== nil ? ((_b = this.type)['$=='] || $mm('==')).call(_b, "iter") : _b)) !== false && _a !== nil) {
            return ((_a = this.parent)['$has_local?'] || $mm('has_local?')).call(_a, local)
          };
          return false;
        };

        def.$add_temp = function(tmps) {
          var _a;tmps = __slice.call(arguments, 0);
          return ((_a = this.temps).$push || $mm('push')).apply(_a, [].concat(tmps));
        };

        def['$has_temp?'] = function(tmp) {
          var _a;
          return ((_a = this.temps)['$include?'] || $mm('include?')).call(_a, tmp);
        };

        def.$new_temp = function() {
          var tmp = nil, _a, _b;
          if ((_a = ((_b = this.queue)['$empty?'] || $mm('empty?')).call(_b)) === false || _a === nil) {
            return ((_a = this.queue).$pop || $mm('pop')).call(_a)
          };
          tmp = "_" + (this.unique);
          this.unique = ((_a = this.unique).$succ || $mm('succ')).call(_a);
          ((_a = this.temps)['$<<'] || $mm('<<')).call(_a, tmp);
          return tmp;
        };

        def.$queue_temp = function(name) {
          var _a;
          return ((_a = this.queue)['$<<'] || $mm('<<')).call(_a, name);
        };

        def.$push_while = function() {
          var info = nil, _a;
          info = __hash2([], {});
          ((_a = this.while_stack).$push || $mm('push')).call(_a, info);
          return info;
        };

        def.$pop_while = function() {
          var _a;
          return ((_a = this.while_stack).$pop || $mm('pop')).call(_a);
        };

        def['$in_while?'] = function() {
          var _a, _b;
          return (_a = ((_b = this.while_stack)['$empty?'] || $mm('empty?')).call(_b), (_a === nil || _a === false));
        };

        def['$uses_block!'] = function() {
          var _a, _b, _c;
          if ((_a = ((_b = ((_c = this.type)['$=='] || $mm('==')).call(_c, "iter")) ? this.parent : _b)) !== false && _a !== nil) {
            return ((_a = this.parent)['$uses_block!'] || $mm('uses_block!')).call(_a)
            } else {
            return this.uses_block = true
          };
        };

        def['$identify!'] = function() {
          var _a;
          if ((_a = this.identity) !== false && _a !== nil) {
            return this.identity
          };
          this.identity = ((_a = this.parser).$unique_temp || $mm('unique_temp')).call(_a);
          if ((_a = this.parent) !== false && _a !== nil) {
            ((_a = this.parent).$add_temp || $mm('add_temp')).call(_a, this.identity)
          };
          return this.identity;
        };

        def.$identity = function() {
          
          return this.identity;
        };

        def.$get_super_chain = function() {
          var chain = nil, scope = nil, defn = nil, mid = nil, _a, _b, _c;
          _a = [[], this, "null", "null"], chain = _a[0], scope = _a[1], defn = _a[2], mid = _a[3];
          while (scope !== false && scope !== nil){if (((_b = ((_c = scope).$type || $mm('type')).call(_c))['$=='] || $mm('==')).call(_b, "iter")) {
            ((_b = chain)['$<<'] || $mm('<<')).call(_b, ((_c = scope)['$identify!'] || $mm('identify!')).call(_c));
            if ((_b = ((_c = scope).$parent || $mm('parent')).call(_c)) !== false && _b !== nil) {
              scope = ((_b = scope).$parent || $mm('parent')).call(_b)
            };
            } else {
            if (((_b = ((_c = scope).$type || $mm('type')).call(_c))['$=='] || $mm('==')).call(_b, "def")) {
              defn = ((_b = scope)['$identify!'] || $mm('identify!')).call(_b);
              mid = "'$" + (((_b = scope).$mid || $mm('mid')).call(_b)) + "'";
              break;;
              } else {
              break;
            }
          }};
          return [chain, defn, mid];
        };

        def['$uses_block?'] = function() {
          
          return this.uses_block;
        };

        return nil;
      })(Parser, null)
    })(Opal, null)
    
  })(self)
})(Opal);

  (function(__opal) {
  var self = __opal.top, __scope = __opal, nil = __opal.nil, $mm = __opal.mm, __breaker = __opal.breaker, __slice = __opal.slice, __module = __opal.module, __hash2 = __opal.hash2;
  return (function(__base){
    function Opal() {};
    Opal = __module(__base, "Opal", Opal);
    var def = Opal.prototype, __scope = Opal._scope;

    Opal._defs('$parse', function(str, file) {
      var _a, _b, _c;if (file == null) {
        file = "(file)"
      }
      return ((_a = ((_b = ((_c = __scope.Parser) == null ? __opal.cm("Parser") : _c)).$new || $mm('new')).call(_b)).$parse || $mm('parse')).call(_a, str, __hash2(["file"], {"file": file}))
    });

    Opal._defs('$core_dir', function() {
      var _a, _b;
      return ((_a = ((_b = __scope.File) == null ? __opal.cm("File") : _b)).$expand_path || $mm('expand_path')).call(_a, "../../opal", "(file)")
    });

    Opal._defs('$append_path', function(path) {
      var _a, _b;
      return ((_a = ((_b = this).$paths || $mm('paths')).call(_b))['$<<'] || $mm('<<')).call(_a, path)
    });

    Opal._defs('$paths', function() {
      var _a, _b, _c;
      if (this.paths == null) this.paths = nil;

      return ((_a = this.paths), _a !== false && _a !== nil ? _a : this.paths = [((_b = ((_c = __scope.Opal) == null ? __opal.cm("Opal") : _c)).$core_dir || $mm('core_dir')).call(_b)])
    });
    
  })(self);
})(Opal);

